!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!x[e])return;for(var n in x[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===y&&C()}(e,n),t&&t(e,n)};var n,r=!0,i="191378a758715ecf2d5a",o={},a=[],u=[];function l(e){var t=M[e];if(!t)return P;var r=function(r){return t.hot.active?(M[r]?-1===M[r].parents.indexOf(e)&&M[r].parents.push(e):(a=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),a=[]),P(r)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return P[e]},set:function(t){P[e]=t}}};for(var o in P)Object.prototype.hasOwnProperty.call(P,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(e){return"ready"===f&&d("prepare"),y++,P.e(e).then(t,(function(e){throw t(),e}));function t(){y--,"prepare"===f&&(b[e]||k(e),0===y&&0===v&&C())}},r.t=function(e,t){return 1&t&&(e=r(e)),P.t(e,-2&t)},r}function s(t){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(e,t){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._acceptedDependencies[e[n]]=t||function(){};else r._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._declinedDependencies[e[t]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=r._disposeHandlers.indexOf(e);t>=0&&r._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,f){case"idle":(h={})[t]=e[t],d("ready");break;case"ready":T(t);break;case"prepare":case"check":case"dispose":case"apply":(g=g||[]).push(t)}},check:E,apply:S,status:function(e){if(!e)return f;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:o[t]};return n=void 0,r}var c=[],f="idle";function d(e){f=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}var p,h,m,g,v=0,y=0,b={},x={},w={};function A(e){return+e+""===e?+e:e}function E(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,d("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=P.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return d(_()?"ready":"idle"),null;x={},b={},w=e.c,m=e.h,d("prepare");var t=new Promise((function(e,t){p={resolve:e,reject:t}}));h={};return k(0),"prepare"===f&&0===y&&0===v&&C(),t}));var t}function k(e){w[e]?(x[e]=!0,v++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=P.p+""+e+"."+i+".hot-update.js",document.head.appendChild(t)}(e)):b[e]=!0}function C(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then((function(){return S(r)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(A(n));e.resolve(t)}}function S(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");return function t(r){var u,l,s,c,f;function p(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((c=M[o])&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var u=0;u<c.parents.length;u++){var l=c.parents[u],s=M[l];if(s){if(s.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([l]),moduleId:o,parentId:l};-1===t.indexOf(l)&&(s.hot._acceptedDependencies[o]?(n[l]||(n[l]=[]),v(n[l],[o])):(delete n[l],t.push(l),r.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}_();var y={},b=[],x={},E=function(){console.warn("[HMR] unexpected require("+C.moduleId+") to disposed module")};for(var k in h)if(Object.prototype.hasOwnProperty.call(h,k)){var C;f=A(k),C=h[k]?p(f):{type:"disposed",moduleId:k};var S=!1,T=!1,N=!1,O="";switch(C.chain&&(O="\nUpdate propagation: "+C.chain.join(" -> ")),C.type){case"self-declined":r.onDeclined&&r.onDeclined(C),r.ignoreDeclined||(S=new Error("Aborted because of self decline: "+C.moduleId+O));break;case"declined":r.onDeclined&&r.onDeclined(C),r.ignoreDeclined||(S=new Error("Aborted because of declined dependency: "+C.moduleId+" in "+C.parentId+O));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(C),r.ignoreUnaccepted||(S=new Error("Aborted because "+f+" is not accepted"+O));break;case"accepted":r.onAccepted&&r.onAccepted(C),T=!0;break;case"disposed":r.onDisposed&&r.onDisposed(C),N=!0;break;default:throw new Error("Unexception type "+C.type)}if(S)return d("abort"),Promise.reject(S);if(T)for(f in x[f]=h[f],v(b,C.outdatedModules),C.outdatedDependencies)Object.prototype.hasOwnProperty.call(C.outdatedDependencies,f)&&(y[f]||(y[f]=[]),v(y[f],C.outdatedDependencies[f]));N&&(v(b,[C.moduleId]),x[f]=E)}var R,B=[];for(l=0;l<b.length;l++)f=b[l],M[f]&&M[f].hot._selfAccepted&&x[f]!==E&&!M[f].hot._selfInvalidated&&B.push({module:f,parents:M[f].parents.slice(),errorHandler:M[f].hot._selfAccepted});d("dispose"),Object.keys(w).forEach((function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)}));var D,I,L=b.slice();for(;L.length>0;)if(f=L.pop(),c=M[f]){var j={},F=c.hot._disposeHandlers;for(s=0;s<F.length;s++)(u=F[s])(j);for(o[f]=j,c.hot.active=!1,delete M[f],delete y[f],s=0;s<c.children.length;s++){var z=M[c.children[s]];z&&((R=z.parents.indexOf(f))>=0&&z.parents.splice(R,1))}}for(f in y)if(Object.prototype.hasOwnProperty.call(y,f)&&(c=M[f]))for(I=y[f],s=0;s<I.length;s++)D=I[s],(R=c.children.indexOf(D))>=0&&c.children.splice(R,1);d("apply"),void 0!==m&&(i=m,m=void 0);for(f in h=void 0,x)Object.prototype.hasOwnProperty.call(x,f)&&(e[f]=x[f]);var U=null;for(f in y)if(Object.prototype.hasOwnProperty.call(y,f)&&(c=M[f])){I=y[f];var H=[];for(l=0;l<I.length;l++)if(D=I[l],u=c.hot._acceptedDependencies[D]){if(-1!==H.indexOf(u))continue;H.push(u)}for(l=0;l<H.length;l++){u=H[l];try{u(I)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:f,dependencyId:I[l],error:e}),r.ignoreErrored||U||(U=e)}}}for(l=0;l<B.length;l++){var W=B[l];f=W.module,a=W.parents,n=f;try{P(f)}catch(e){if("function"==typeof W.errorHandler)try{W.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:f,error:t,originalError:e}),r.ignoreErrored||U||(U=t),U||(U=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:f,error:e}),r.ignoreErrored||U||(U=e)}}if(U)return d("fail"),Promise.reject(U);if(g)return t(r).then((function(e){return b.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return d("idle"),new Promise((function(e){e(b)}))}(t=t||{})}function _(){if(g)return h||(h={}),g.forEach(T),g=void 0,!0}function T(t){Object.prototype.hasOwnProperty.call(h,t)||(h[t]=e[t])}var M={};function P(t){if(M[t])return M[t].exports;var n=M[t]={i:t,l:!1,exports:{},hot:s(t),parents:(u=a,a=[],u),children:[]};return e[t].call(n.exports,n,n.exports,l(t)),n.l=!0,n.exports}P.m=e,P.c=M,P.d=function(e,t,n){P.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},P.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},P.t=function(e,t){if(1&t&&(e=P(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(P.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)P.d(n,r,function(t){return e[t]}.bind(null,r));return n},P.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return P.d(t,"a",t),t},P.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},P.p="/dist/",P.h=function(){return i},l(46)(P.s=46)}([function(e,t,n){"use strict";e.exports=n(88)},,function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(l," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var a,u,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},,function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(89)},function(e,t,n){e.exports=n(93)()},,function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function u(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],l=t.base?o[0]+t.base:o[0],s=n[l]||0,c="".concat(l," ").concat(s);n[l]=s+1;var f=u(c),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:c,updater:g(d,t),references:1}),r.push(c)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function g(e,t){var n,r,i;if(t.singleton){var o=m++;n=h||(h=s(t)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=s(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=u(n[r]);a[i].references--}for(var o=l(e,t),s=0;s<n.length;s++){var c=u(n[s]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=o}}}},,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement(i.a.Fragment,null,i.a.createElement("h2",null,"Site As An Example"),i.a.createElement("p",null,"This site was created as way to showcase my work as a software engineer. Most of my professional experience has been for corporate intranets, which are not accessible by the public."),i.a.createElement("p",null,"This Single Page Application written in HTML5, CSS3, and JavaScript uses a custom configuration of React, Babel, & Webpack."),i.a.createElement("h3",null,"Some Technologies Of Which I Am Familiar"),i.a.createElement("div",{className:"tech-icon-grid neushadow"},i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-html5 fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-css3-alt fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-js-square fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-react fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-less fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-sass fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-sketch fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-aws fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-docker fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-dropbox fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-git-alt fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-node-js fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-npm fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-python fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-raspberry-pi fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-apple fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-microsoft fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-linux fa-5x"})),i.a.createElement("div",{className:"tech-icon"},i.a.createElement("i",{className:"fab fa-ubuntu fa-5x"}))),i.a.createElement("p",null,"Please take a look around and enjoy!"),i.a.createElement("p",null,"Sincerely,",i.a.createElement("br",null),"John Sullivan"))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(0),i=n.n(r);n(96);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var u=["Be brave when facing the competition.","An exciting opportunity lies ahead of you.","A routine task will turn into an enchanting adventure.","Be true to your work, your word, and your friends.","You will receive money from an unexpected source.","Plan for many pleasures ahead."];function l(){var e=o(Object(r.useState)("Your fortune will appear here..."),2),t=e[0],n=e[1];return i.a.createElement(i.a.Fragment,null,i.a.createElement("div",{className:"Fortune-Teller neushadow"},i.a.createElement("div",{className:"FT-Header"},i.a.createElement("div",{className:"FT-Title"},"Fortunes, Forecasts, Lucky Charms"),i.a.createElement("div",{className:"FT-SubTitle"},"Catch the dope of your horoscope!")),i.a.createElement("div",{className:"FT-Panel"},i.a.createElement("p",null,t)),i.a.createElement("div",{className:"FT-Button",onClick:function(){n(u[Math.floor(Math.random()*u.length)])}},"Push me!"),i.a.createElement("div",{className:"FT-Footer"},"Please come again!")))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return Wf}));var r=n(0),i=n.n(r),o=function(e){return e?{width:e.offsetWidth,height:e.offsetHeight}:{width:0,height:0}};var a=function(e){var t=Object(r.useState)(o(e&&e.current||{})),n=t[0],i=t[1],a=Object(r.useCallback)((function(){e.current&&i(o(e.current))}),[e,i]);return Object(r.useLayoutEffect)((function(){if(!e||e.current){var t=e&&e.current||{};if(a(),"function"==typeof ResizeObserver){var n=new ResizeObserver((function(){a()}));return n.observe(e.current),function(){n.disconnect(t),n=null}}return window.addEventListener("resize",a),function(){window.removeEventListener("resize",a)}}}),[e,a]),n};function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){if(e){if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,t):void 0}}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}}(e,t)||s(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}function d(e,t){if(null==e)return{};var n,r,i=f(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=n(4),m=n.n(h);n(5);function g(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=g(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var v=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=g(e))&&(r&&(r+=" "),r+=t);return r};function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e){return e&&"object"===y(e)&&e.constructor===Object}function x(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},r=n.clone?u({},e):e;return b(e)&&b(t)&&Object.keys(t).forEach((function(i){"__proto__"!==i&&(b(t[i])&&i in e?r[i]=x(e[i],t[i],n):r[i]=t[i])})),r}function w(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}function A(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function E(e){if(e.type)return e;if("#"===e.charAt(0))return E(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(w(3,e));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function k(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function C(e){var t="hsl"===(e=E(e)).type?E(function(e){var t=(e=E(e)).values,n=t[0],r=t[1]/100,i=t[2]/100,o=r*Math.min(i,1-i),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return i-o*Math.max(Math.min(t-3,9-t,1),-1)},u="rgb",l=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(u+="a",l.push(t[3])),k({type:u,values:l})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function S(e,t){return e=E(e),t=A(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,k(e)}function _(e,t){if(e=E(e),t=A(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return k(e)}function T(e,t){if(e=E(e),t=A(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return k(e)}var M=n(39),P=n.n(M),N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O="object"===("undefined"==typeof window?"undefined":N(window))&&"object"===("undefined"==typeof document?"undefined":N(document))&&9===document.nodeType;function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t,n){return t&&R(e.prototype,t),n&&R(e,n),e}function D(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function I(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var L={}.constructor;function j(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(j);if(e.constructor!==L)return e;var t={};for(var n in e)t[n]=j(e[n]);return t}function F(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,i=j(t),o=r.plugins.onCreateRule(e,i,n);return o||(e[0],null)}var z=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function U(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=z(e[r]," ");else n=z(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function H(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function W(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var i=n.indent,o=void 0===i?0:i,a=t.fallbacks;if(e&&o++,a)if(Array.isArray(a))for(var u=0;u<a.length;u++){var l=a[u];for(var s in l){var c=l[s];null!=c&&(r&&(r+="\n"),r+=""+H(s+": "+U(c)+";",o))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=""+H(f+": "+U(d)+";",o))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+H(p+": "+U(h)+";",o))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),H(e+" {"+r,--o)+H("}",o)):r}var $=/([[\].#*$><+~=|^:(),"'`\s])/g,V="undefined"!=typeof CSS&&CSS.escape,Y=function(e){return V?V(e):e.replace($,"\\$1")},q=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,i=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:i&&(this.renderer=new i)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var i=t;n&&!1===n.process||(i=this.options.jss.plugins.onChangeValue(t,e,this));var o=null==i||!1===i,a=e in this.style;if(o&&!a&&!r)return this;var u=o&&a;if(u?delete this.style[e]:this.style[e]=i,this.renderable&&this.renderer)return u?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,i),this;var l=this.options.sheet;return l&&l.attached,this},e}(),Q=function(e){function t(t,n,r){var i;(i=e.call(this,t,n,r)||this).selectorText=void 0,i.id=void 0,i.renderable=void 0;var o=r.selector,a=r.scoped,u=r.sheet,l=r.generateId;return o?i.selectorText=o:!1!==a&&(i.id=l(I(I(i)),u),i.selectorText="."+Y(i.id)),i}D(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=U(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?u({},e,{allowEmpty:!0}):e;return W(this.selectorText,this.style,n)},B(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(q),X={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new Q(e,t,n)}},G={indent:1,children:!0},K=/@([\w-]+)/,Z=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.query=n.name;var r=e.match(K);for(var i in this.at=r?r[1]:"unknown",this.options=n,this.rules=new we(u({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=G),null==e.indent&&(e.indent=G.indent),null==e.children&&(e.children=G.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),J=/@media|@supports\s+/,ee={onCreateRule:function(e,t,n){return J.test(e)?new Z(e,t,n):null}},te={indent:1,children:!0},ne=/@keyframes\s+([\w-]+)/,re=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(ne);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,o=n.sheet,a=n.generateId;for(var l in this.id=!1===i?this.name:Y(a(this,o)),this.rules=new we(u({},n,{parent:this})),t)this.rules.add(l,t[l],u({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=te),null==e.indent&&(e.indent=te.indent),null==e.children&&(e.children=te.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),ie=/@keyframes\s+/,oe=/\$([\w-]+)/g,ae=function(e,t){return"string"==typeof e?e.replace(oe,(function(e,n){return n in t?t[n]:e})):e},ue=function(e,t,n){var r=e[t],i=ae(r,n);i!==r&&(e[t]=i)},le={onCreateRule:function(e,t,n){return"string"==typeof e&&ie.test(e)?new re(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&ue(e,"animation-name",n.keyframes),"animation"in e&&ue(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return ae(e,r.keyframes);default:return e}}},se=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return D(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?u({},e,{allowEmpty:!0}):e;return W(this.key,this.style,n)},t}(q),ce={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new se(e,t,n):null}},fe=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=W(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return W(this.at,this.style,e)},e}(),de=/@font-face/,pe={onCreateRule:function(e,t,n){return de.test(e)?new fe(e,t,n):null}},he=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return W(this.key,this.style,e)},e}(),me={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new he(e,t,n):null}},ge=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),ve={"@charset":!0,"@import":!0,"@namespace":!0},ye=[X,ee,le,ce,pe,me,{onCreateRule:function(e,t,n){return e in ve?new ge(e,t,n):null}}],be={process:!0},xe={force:!0,process:!0},we=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,i=r.parent,o=r.sheet,a=r.jss,l=r.Renderer,s=r.generateId,c=r.scoped,f=u({classes:this.classes,parent:i,sheet:o,jss:a,Renderer:l,generateId:s,scoped:c,name:e},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(f.selector="."+Y(this.classes[d]));var p=F(d,t,f);if(!p)return null;this.register(p);var h=void 0===f.index?this.index.length:f.index;return this.index.splice(h,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof Q?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof re&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof Q?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof re&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=be);var i=this.options,o=i.jss.plugins,a=i.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var u=t,l=u.style;if(o.onUpdate(n,t,a,r),r.process&&l&&l!==u.style){for(var s in o.onProcessStyle(u.style,u,a),u.style){var c=u.style[s];c!==l[s]&&u.prop(s,c,xe)}for(var f in l){var d=u.style[f],p=l[f];null==d&&d!==p&&u.prop(f,null,xe)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,i=0;i<this.index.length;i++){var o=this.index[i].toString(e);(o||r)&&(t&&(t+="\n"),t+=o)}return t},e}(),Ae=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=u({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new we(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var i=this.rules.add(e,t,n);return i?(this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(r?r.push(i):(this.insertRule(i),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),i):i:(this.deployed=!1,i)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var i=this.addRule(r,e[r],t);i&&n.push(i)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),Ee=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var i=this.registry.onCreateRule[r](e,t,n);if(i)return i}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var i=0;i<this.registry.onUpdate.length;i++)this.registry.onUpdate[i](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,i=0;i<this.registry.onChangeValue.length;i++)r=this.registry.onChangeValue[i](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),ke=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=f(t,["attached"]),i="",o=0;o<this.registry.length;o++){var a=this.registry[o];null!=n&&a.attached!==n||(i&&(i+="\n"),i+=a.toString(r))}return i},B(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),Ce="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),Se="2f1acc6c3a606b082e5eef5e54414ffb";null==Ce[Se]&&(Ce[Se]=0);var _e=Ce[Se]++,Te=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var i="",o="";return r&&(r.options.classNamePrefix&&(o=r.options.classNamePrefix),null!=r.options.jss.id&&(i=String(r.options.jss.id))),e.minify?""+(o||"c")+_e+i+t:o+n.key+"-"+_e+(i?"-"+i:"")+"-"+t}},Me=function(e){var t;return function(){return t||(t=e()),t}};function Pe(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function Ne(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=U(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function Oe(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function Re(e,t){return e.selectorText=t,e.selectorText===t}var Be=Me((function(){return document.querySelector("head")}));function De(e){var t=ke.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var i=function(e){for(var t=Be(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(i)return{parent:i.parentNode,node:i.nextSibling}}return!1}var Ie=Me((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),Le=function(e,t,n){var r=e.cssRules.length;(void 0===n||n>r)&&(n=r);try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},je=function(){function e(e){this.getPropertyValue=Pe,this.setProperty=Ne,this.removeProperty=Oe,this.setSelector=Re,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&ke.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,i=t.element;this.element=i||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var o=Ie();o&&this.element.setAttribute("nonce",o)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=De(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var i=n,o=i.parentNode;o&&o.insertBefore(e,i.nextSibling)}else Be().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){var e=this.element.parentNode;e&&e.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,i=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(i=Le(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,i),i)}if(e.renderable&&e.renderable.parentStyleSheet===this.element.sheet)return e.renderable;var o=e.toString();if(!o)return!1;var a=Le(n,o,t);return!1!==a&&(this.hasInsertedRules=!0,e.renderable=a,a)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),Fe=0,ze=function(){function e(e){this.id=Fe++,this.version="10.3.0",this.plugins=new Ee,this.options={id:{minify:!1},createGenerateId:Te,Renderer:O?je:null,plugins:[]},this.generateId=Te({minify:!1});for(var t=0;t<ye.length;t++)this.plugins.use(ye[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=u({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===ke.index?0:ke.index+1);var r=new Ae(e,u({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),ke.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=u({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var i=F(e,t,r);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();var Ue="undefined"!=typeof CSS&&CSS&&"number"in CSS,He=function(e){return new ze(e)};
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */He();function We(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;e.Component;if(!n)return t;var r=u({},t);return Object.keys(n).forEach((function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))})),r}var $e={set:function(e,t,n,r){var i=e.get(t);i||(i=new Map,e.set(t,i)),i.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};var Ve=i.a.createContext(null);function Ye(){return i.a.useContext(Ve)}var qe="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__",Qe=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var Xe=Date.now(),Ge="fnValues"+Xe,Ke="fnStyle"+ ++Xe;var Ze=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=F(e,{},n);return r[Ke]=t,r},onProcessStyle:function(e,t){if(Ge in t||Ke in t)return e;var n={};for(var r in e){var i=e[r];"function"==typeof i&&(delete e[r],n[r]=i)}return t[Ge]=n,e},onUpdate:function(e,t,n,r){var i=t,o=i[Ke];o&&(i.style=o(e)||{});var a=i[Ge];if(a)for(var u in a)i.prop(u,a[u](e),r)}}},Je="@global",et=function(){function e(e,t,n){for(var r in this.type="global",this.at=Je,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new we(u({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),tt=function(){function e(e,t,n){this.type="global",this.at=Je,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr("@global ".length);this.rule=n.jss.createRule(r,t,u({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),nt=/\s*,\s*/g;function rt(e,t){for(var n=e.split(nt),r="",i=0;i<n.length;i++)r+=t+" "+n[i].trim(),n[i+1]&&(r+=", ");return r}var it=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Je)return new et(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,"@global ".length))return new tt(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,r=n?n[Je]:null;if(r){for(var i in r)t.sheet.addRule(i,r[i],u({},t,{selector:rt(i,e.selector)}));delete n[Je]}}(e),function(e){var t=e.options,n=e.style;for(var r in n)if("@"===r[0]&&r.substr(0,Je.length)===Je){var i=rt(r.substr(Je.length),e.selector);t.sheet.addRule(i,n[r],u({},t,{selector:i})),delete n[r]}}(e))}}},ot=/\s*,\s*/g,at=/&/g,ut=/\$([\w-]+)/g;var lt=function(){function e(e,t){return function(n,r){var i=e.getRule(r)||t&&t.getRule(r);return i?(i=i).selector:r}}function t(e,t){for(var n=t.split(ot),r=e.split(ot),i="",o=0;o<n.length;o++)for(var a=n[o],u=0;u<r.length;u++){var l=r[u];i&&(i+=", "),i+=-1!==l.indexOf("&")?l.replace(at,a):a+" "+l}return i}function n(e,t,n){if(n)return u({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var i=u({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(r,i,o){if("style"!==i.type)return r;var a,l,s=i,c=s.options.parent;for(var f in r){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(a=n(s,c,a),d){var h=t(f,s.selector);l||(l=e(c,o)),h=h.replace(ut,l),c.addRule(h,r[f],u({},a,{selector:h}))}else p&&c.addRule(f,{},a).addRule(s.key,r[f],{selector:s.selector});delete r[f]}}return r}}},st=/[A-Z]/g,ct=/^ms-/,ft={};function dt(e){return"-"+e.toLowerCase()}var pt=function(e){if(ft.hasOwnProperty(e))return ft[e];var t=e.replace(st,dt);return ft[e]=ct.test(t)?"-"+t:t};function ht(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:pt(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(ht):t.fallbacks=ht(e.fallbacks)),t}var mt=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=ht(e[t]);return e}return ht(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=pt(t);return t===r?e:(n.prop(r,e),null)}}},gt=Ue&&CSS?CSS.px:"px",vt=Ue&&CSS?CSS.ms:"ms",yt=Ue&&CSS?CSS.percent:"%";function bt(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var i in e)r[i]=e[i],r[i.replace(t,n)]=e[i];return r}var xt=bt({"animation-delay":vt,"animation-duration":vt,"background-position":gt,"background-position-x":gt,"background-position-y":gt,"background-size":gt,border:gt,"border-bottom":gt,"border-bottom-left-radius":gt,"border-bottom-right-radius":gt,"border-bottom-width":gt,"border-left":gt,"border-left-width":gt,"border-radius":gt,"border-right":gt,"border-right-width":gt,"border-top":gt,"border-top-left-radius":gt,"border-top-right-radius":gt,"border-top-width":gt,"border-width":gt,margin:gt,"margin-bottom":gt,"margin-left":gt,"margin-right":gt,"margin-top":gt,padding:gt,"padding-bottom":gt,"padding-left":gt,"padding-right":gt,"padding-top":gt,"mask-position-x":gt,"mask-position-y":gt,"mask-size":gt,height:gt,width:gt,"min-height":gt,"max-height":gt,"min-width":gt,"max-width":gt,bottom:gt,left:gt,top:gt,right:gt,"box-shadow":gt,"text-shadow":gt,"column-gap":gt,"column-rule":gt,"column-rule-width":gt,"column-width":gt,"font-size":gt,"font-size-delta":gt,"letter-spacing":gt,"text-indent":gt,"text-stroke":gt,"text-stroke-width":gt,"word-spacing":gt,motion:gt,"motion-offset":gt,outline:gt,"outline-offset":gt,"outline-width":gt,perspective:gt,"perspective-origin-x":yt,"perspective-origin-y":yt,"transform-origin":yt,"transform-origin-x":yt,"transform-origin-y":yt,"transform-origin-z":yt,"transition-delay":vt,"transition-duration":vt,"vertical-align":gt,"flex-basis":gt,"shape-margin":gt,size:gt,grid:gt,"grid-gap":gt,"grid-row-gap":gt,"grid-column-gap":gt,"grid-template-rows":gt,"grid-template-columns":gt,"grid-auto-rows":gt,"grid-auto-columns":gt,"box-shadow-x":gt,"box-shadow-y":gt,"box-shadow-blur":gt,"box-shadow-spread":gt,"font-line-height":gt,"text-shadow-x":gt,"text-shadow-y":gt,"text-shadow-blur":gt});function wt(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=wt(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var i in t)t[i]=wt(i,t[i],n);else for(var o in t)t[o]=wt(e+"-"+o,t[o],n);else if("number"==typeof t){var a=n[e]||xt[e];return a?"function"==typeof a?a(t).toString():""+t+a:t.toString()}return t}var At=function(e){void 0===e&&(e={});var t=bt(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=wt(r,e[r],t);return e},onChangeValue:function(e,n){return wt(n,e,t)}}};function Et(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||s(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var kt="",Ct="",St="",_t="",Tt=O&&"ontouchstart"in document.documentElement;if(O){var Mt={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},Pt=document.createElement("p").style;for(var Nt in Mt)if(Nt+"Transform"in Pt){kt=Nt,Ct=Mt[Nt];break}"Webkit"===kt&&"msHyphens"in Pt&&(kt="ms",Ct=Mt.ms,_t="edge"),"Webkit"===kt&&"-apple-trailing-word"in Pt&&(St="apple")}var Ot=kt,Rt=Ct,Bt=St,Dt=_t,It=Tt;var Lt={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===Ot?"-webkit-"+e:Rt+e)}},jt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===Ot?Rt+"print-"+e:e)}},Ft=/[-\s]+(.)?/g;function zt(e,t){return t?t.toUpperCase():""}function Ut(e){return e.replace(Ft,zt)}function Ht(e){return Ut("-"+e)}var Wt,$t={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===Ot){if(Ut("mask-image")in t)return e;if(Ot+Ht("mask-image")in t)return Rt+e}return e}},Vt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==Bt||It?e:Rt+e)}},Yt={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:Rt+e)}},qt={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:Rt+e)}},Qt={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===Ot||"ms"===Ot&&"edge"!==Dt?Rt+e:e)}},Xt={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===Ot||"ms"===Ot||"apple"===Bt?Rt+e:e)}},Gt={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===Ot?"WebkitColumn"+Ht(e)in t&&Rt+"column-"+e:"Moz"===Ot&&("page"+Ht(e)in t&&"page-"+e))}},Kt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===Ot)return e;var n=e.replace("-inline","");return Ot+Ht(n)in t&&Rt+n}},Zt={supportedProperty:function(e,t){return Ut(e)in t&&e}},Jt={supportedProperty:function(e,t){var n=Ht(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:Ot+n in t?Rt+e:"Webkit"!==Ot&&"Webkit"+n in t&&"-webkit-"+e}},en={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===Ot?""+Rt+e:e)}},tn={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===Ot?Rt+"scroll-chaining":e)}},nn={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},rn={supportedProperty:function(e,t){var n=nn[e];return!!n&&(Ot+Ht(n)in t&&Rt+n)}},on={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},an=Object.keys(on),un=function(e){return Rt+e},ln=[Lt,jt,$t,Vt,Yt,qt,Qt,Xt,Gt,Kt,Zt,Jt,en,tn,rn,{supportedProperty:function(e,t,n){var r=n.multiple;if(an.indexOf(e)>-1){var i=on[e];if(!Array.isArray(i))return Ot+Ht(i)in t&&Rt+i;if(!r)return!1;for(var o=0;o<i.length;o++)if(!(Ot+Ht(i[0])in t))return!1;return i.map(un)}return!1}}],sn=ln.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),cn=ln.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,Et(t.noPrefill)),e}),[]),fn={};if(O){Wt=document.createElement("p");var dn=window.getComputedStyle(document.documentElement,"");for(var pn in dn)isNaN(pn)||(fn[dn[pn]]=dn[pn]);cn.forEach((function(e){return delete fn[e]}))}function hn(e,t){if(void 0===t&&(t={}),!Wt)return e;if(null!=fn[e])return fn[e];"transition"!==e&&"transform"!==e||(t[e]=e in Wt.style);for(var n=0;n<sn.length&&(fn[e]=sn[n](e,Wt.style,t),!fn[e]);n++);try{Wt.style[e]=""}catch(e){return!1}return fn[e]}var mn,gn={},vn={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},yn=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function bn(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?hn(t):", "+hn(n);return r||(t||n)}function xn(e,t){var n=t;if(!mn||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=gn[r])return gn[r];try{mn.style[e]=n}catch(e){return gn[r]=!1,!1}if(vn[e])n=n.replace(yn,bn);else if(""===mn.style[e]&&("-ms-flex"===(n=Rt+n)&&(mn.style[e]="-ms-flexbox"),mn.style[e]=n,""===mn.style[e]))return gn[r]=!1,!1;return mn.style[e]="",gn[r]=n,gn[r]}O&&(mn=document.createElement("p"));var wn=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var i=!1,o=hn(n);o&&o!==n&&(i=!0);var a=!1,u=xn(o,U(r));u&&u!==r&&(a=!0),(i||a)&&(i&&delete t[n],t[o||n]=u||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]||"ms"===Ot?n:"@"+Rt+"keyframes"+n.substr(10)}var n},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return xn(t,U(e))||e}}};var An=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},i=Object.keys(t).sort(e),o=0;o<i.length;o++)r[i[o]]=t[i[o]];return r}}};function En(){return{plugins:[Ze(),it(),lt(),mt(),At(),"undefined"==typeof window?null:wn(),An()]}}var kn=He(En()),Cn={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,i=void 0===r?"jss":r,o=e.seed,a=void 0===o?"":o,u=""===a?"":"".concat(a,"-"),l=0,s=function(){return l+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Qe.indexOf(e.key))return"Mui-".concat(e.key);var o="".concat(u).concat(r,"-").concat(e.key);return t.options.theme[qe]&&""===a?"".concat(o,"-").concat(s()):o}return"".concat(u).concat(i).concat(s())}}(),jss:kn,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},Sn=i.a.createContext(Cn);var _n=-1e9;function Tn(){return _n+=1}function Mn(e){var t="function"==typeof e;return{create:function(n,r){var i;try{i=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return i;var o=n.overrides[r],a=u({},i);return Object.keys(o).forEach((function(e){a[e]=x(a[e],o[e])})),a},options:{}}}var Pn={};function Nn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var i=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,i=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,i=!0),i&&(r.cacheClasses.value=We({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function On(e,t){var n=e.state,r=e.theme,i=e.stylesOptions,o=e.stylesCreator,a=e.name;if(!i.disableGeneration){var l=$e.get(i.sheetsManager,o,r);l||(l={refs:0,staticSheet:null,dynamicStyles:null},$e.set(i.sheetsManager,o,r,l));var s=u(u(u({},o.options),i),{},{theme:r,flip:"boolean"==typeof i.flip?i.flip:"rtl"===r.direction});s.generateId=s.serverGenerateClassName||s.generateClassName;var c=i.sheetsRegistry;if(0===l.refs){var f;i.sheetsCache&&(f=$e.get(i.sheetsCache,o,r));var d=o.create(r,a);f||((f=i.jss.createStyleSheet(d,u({link:!1},s))).attach(),i.sheetsCache&&$e.set(i.sheetsCache,o,r,f)),c&&c.add(f),l.staticSheet=f,l.dynamicStyles=function e(t){var n=null;for(var r in t){var i=t[r],o=typeof i;if("function"===o)n||(n={}),n[r]=i;else if("object"===o&&null!==i&&!Array.isArray(i)){var a=e(i);a&&(n||(n={}),n[r]=a)}}return n}(d)}if(l.dynamicStyles){var p=i.jss.createStyleSheet(l.dynamicStyles,u({link:!0},s));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=We({baseClasses:l.staticSheet.classes,newClasses:p.classes}),c&&c.add(p)}else n.classes=l.staticSheet.classes;l.refs+=1}}function Rn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function Bn(e){var t=e.state,n=e.theme,r=e.stylesOptions,i=e.stylesCreator;if(!r.disableGeneration){var o=$e.get(r.sheetsManager,i,n);o.refs-=1;var a=r.sheetsRegistry;0===o.refs&&($e.delete(r.sheetsManager,i,n),r.jss.removeStyleSheet(o.staticSheet),a&&a.remove(o.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function Dn(e,t){var n,r=i.a.useRef([]),o=i.a.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),i.a.useEffect((function(){return function(){n&&n()}}),[o])}function In(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,r=t.classNamePrefix,o=t.Component,a=t.defaultTheme,l=void 0===a?Pn:a,s=d(t,["name","classNamePrefix","Component","defaultTheme"]),c=Mn(e),f=n||r||"makeStyles";c.options={index:Tn(),name:n,meta:f,classNamePrefix:f};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Ye()||l,r=u(u({},i.a.useContext(Sn)),s),a=i.a.useRef(),f=i.a.useRef();Dn((function(){var i={name:n,state:{},stylesCreator:c,stylesOptions:r,theme:t};return On(i,e),f.current=!1,a.current=i,function(){Bn(i)}}),[t,c]),i.a.useEffect((function(){f.current&&Rn(a.current,e),f.current=!0}));var d=Nn(a.current,e.classes,o);return d};return p}function Ln(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var i,o=t.props[n];for(i in o)void 0===r[i]&&(r[i]=o[i]);return r}var jn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r=t.defaultTheme,o=t.withTheme,a=void 0!==o&&o,l=t.name,s=d(t,["defaultTheme","withTheme","name"]);var c=l,f=In(e,u({defaultTheme:r,Component:n,name:l||n.displayName,classNamePrefix:c},s)),p=i.a.forwardRef((function(e,t){e.classes;var o,s=e.innerRef,c=d(e,["classes","innerRef"]),p=f(u(u({},n.defaultProps),e)),h=c;return("string"==typeof l||a)&&(o=Ye()||r,l&&(h=Ln({theme:o,name:l,props:c})),a&&!h.theme&&(h.theme=o)),i.a.createElement(n,u({ref:s||t,classes:p},h))}));return P()(p,n),p}},Fn=["xs","sm","md","lg","xl"];function zn(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,i=void 0===r?"px":r,o=e.step,a=void 0===o?5:o,l=d(e,["values","unit","step"]);function s(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(i,")")}function c(e,t){var r=Fn.indexOf(t);return r===Fn.length-1?s(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(i,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[Fn[r+1]]?n[Fn[r+1]]:t)-a/100).concat(i,")")}return u({keys:Fn,values:n,up:s,down:function(e){var t=Fn.indexOf(e)+1,r=n[Fn[t]];return t===Fn.length?s("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-a/100).concat(i,")")},between:c,only:function(e){return c(e,e)},width:function(e){return n[e]}},l)}function Un(e,t,n){var r;return u({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return u({paddingLeft:t(2),paddingRight:t(2)},n,p({},e.up("sm"),u({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},p(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),p(r,e.up("sm"),{minHeight:64}),r)},n)}var Hn={black:"#000",white:"#fff"},Wn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},$n={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},Vn={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},Yn={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},qn={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},Qn={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},Xn={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},Gn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Hn.white,default:Wn[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Kn={text:{primary:Hn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:Wn[800],default:"#303030"},action:{active:Hn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Zn(e,t,n,r){var i=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=T(e.main,i):"dark"===t&&(e.dark=_(e.main,o)))}function Jn(e){var t=e.primary,n=void 0===t?{light:$n[300],main:$n[500],dark:$n[700]}:t,r=e.secondary,i=void 0===r?{light:Vn.A200,main:Vn.A400,dark:Vn.A700}:r,o=e.error,a=void 0===o?{light:Yn[300],main:Yn[500],dark:Yn[700]}:o,l=e.warning,s=void 0===l?{light:qn[300],main:qn[500],dark:qn[700]}:l,c=e.info,f=void 0===c?{light:Qn[300],main:Qn[500],dark:Qn[700]}:c,p=e.success,h=void 0===p?{light:Xn[300],main:Xn[500],dark:Xn[700]}:p,m=e.type,g=void 0===m?"light":m,v=e.contrastThreshold,y=void 0===v?3:v,b=e.tonalOffset,A=void 0===b?.2:b,E=d(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function k(e){return function(e,t){var n=C(e),r=C(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Kn.text.primary)>=y?Kn.text.primary:Gn.text.primary}var S=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=u({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(w(4,t));if("string"!=typeof e.main)throw new Error(w(5,JSON.stringify(e.main)));return Zn(e,"light",n,A),Zn(e,"dark",r,A),e.contrastText||(e.contrastText=k(e.main)),e},_={dark:Kn,light:Gn};return x(u({common:Hn,type:g,primary:S(n),secondary:S(i,"A400","A200","A700"),error:S(a),warning:S(s),info:S(f),success:S(h),grey:Wn,contrastThreshold:y,getContrastText:k,augmentColor:S,tonalOffset:A},_[g]),E)}function er(e){return Math.round(1e5*e)/1e5}var tr={textTransform:"uppercase"};function nr(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,i=void 0===r?'"Roboto", "Helvetica", "Arial", sans-serif':r,o=n.fontSize,a=void 0===o?14:o,l=n.fontWeightLight,s=void 0===l?300:l,c=n.fontWeightRegular,f=void 0===c?400:c,p=n.fontWeightMedium,h=void 0===p?500:p,m=n.fontWeightBold,g=void 0===m?700:m,v=n.htmlFontSize,y=void 0===v?16:v,b=n.allVariants,w=n.pxToRem,A=d(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var E=a/14,k=w||function(e){return"".concat(e/y*E,"rem")},C=function(e,t,n,r,o){return u({fontFamily:i,fontWeight:e,fontSize:k(t),lineHeight:n},'"Roboto", "Helvetica", "Arial", sans-serif'===i?{letterSpacing:"".concat(er(r/t),"em")}:{},o,b)},S={h1:C(s,96,1.167,-1.5),h2:C(s,60,1.2,-.5),h3:C(f,48,1.167,0),h4:C(f,34,1.235,.25),h5:C(f,24,1.334,0),h6:C(h,20,1.6,.15),subtitle1:C(f,16,1.75,.15),subtitle2:C(h,14,1.57,.1),body1:C(f,16,1.5,.15),body2:C(f,14,1.43,.15),button:C(h,14,1.75,.4,tr),caption:C(f,12,1.66,.4),overline:C(f,12,2.66,1,tr)};return x(u({htmlFontSize:y,pxToRem:k,round:er,fontFamily:i,fontSize:a,fontWeightLight:s,fontWeightRegular:f,fontWeightMedium:h,fontWeightBold:g},S),A,{clone:!1})}function rr(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var ir=["none",rr(0,2,1,-1,0,1,1,0,0,1,3,0),rr(0,3,1,-2,0,2,2,0,0,1,5,0),rr(0,3,3,-2,0,3,4,0,0,1,8,0),rr(0,2,4,-1,0,4,5,0,0,1,10,0),rr(0,3,5,-1,0,5,8,0,0,1,14,0),rr(0,3,5,-1,0,6,10,0,0,1,18,0),rr(0,4,5,-2,0,7,10,1,0,2,16,1),rr(0,5,5,-3,0,8,10,1,0,3,14,2),rr(0,5,6,-3,0,9,12,1,0,3,16,2),rr(0,6,6,-3,0,10,14,1,0,4,18,3),rr(0,6,7,-4,0,11,15,1,0,4,20,3),rr(0,7,8,-4,0,12,17,2,0,5,22,4),rr(0,7,8,-4,0,13,19,2,0,5,24,4),rr(0,7,9,-4,0,14,21,2,0,5,26,4),rr(0,8,9,-5,0,15,22,2,0,6,28,5),rr(0,8,10,-5,0,16,24,2,0,6,30,5),rr(0,8,11,-5,0,17,26,2,0,6,32,5),rr(0,9,11,-5,0,18,28,2,0,7,34,6),rr(0,9,12,-6,0,19,29,2,0,7,36,6),rr(0,10,13,-6,0,20,31,3,0,8,38,7),rr(0,10,13,-6,0,21,33,3,0,8,40,7),rr(0,10,14,-6,0,22,35,3,0,8,42,7),rr(0,11,14,-7,0,23,36,3,0,9,44,8),rr(0,11,15,-7,0,24,38,3,0,9,46,8)],or={borderRadius:4};var ar=function(e,t){return t?x(e,t,{clone:!1}):e},ur={xs:0,sm:600,md:960,lg:1280,xl:1920},lr={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(ur[e],"px)")}};var sr={m:"margin",p:"padding"},cr={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},fr={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},dr=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){if(e.length>2){if(!fr[e])return[e];e=fr[e]}var t=c(e.split(""),2),n=t[0],r=t[1],i=sr[n],o=cr[r]||"";return Array.isArray(o)?o.map((function(e){return i+e})):[i+o]})),pr=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function hr(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function mr(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function gr(e){var t=hr(e.theme);return Object.keys(e).map((function(n){if(-1===pr.indexOf(n))return null;var r=mr(dr(n),t),i=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||lr;return t.reduce((function(e,i,o){return e[r.up(r.keys[o])]=n(t[o]),e}),{})}if("object"===y(t)){var i=e.theme.breakpoints||lr;return Object.keys(t).reduce((function(e,r){return e[i.up(r)]=n(t[r]),e}),{})}return n(t)}(e,i,r)})).reduce(ar,{})}gr.propTypes={},gr.filterProps=pr;function vr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=hr({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var yr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},br={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function xr(e){return"".concat(Math.round(e),"ms")}var wr={easing:yr,duration:br,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?br.standard:n,i=t.easing,o=void 0===i?yr.easeInOut:i,a=t.delay,u=void 0===a?0:a;d(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:xr(r)," ").concat(o," ").concat("string"==typeof u?u:xr(u))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},Ar={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};var Er=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,i=void 0===r?{}:r,o=e.palette,a=void 0===o?{}:o,u=e.spacing,l=e.typography,s=void 0===l?{}:l,c=d(e,["breakpoints","mixins","palette","spacing","typography"]),f=Jn(a),p=zn(n),h=vr(u),m=x({breakpoints:p,direction:"ltr",mixins:Un(p,h,i),overrides:{},palette:f,props:{},shadows:ir,typography:nr(f,s),spacing:h,shape:or,transitions:wr,zIndex:Ar},c),g=arguments.length,v=new Array(g>1?g-1:0),y=1;y<g;y++)v[y-1]=arguments[y];return m=v.reduce((function(e,t){return x(e,t)}),m)}();var kr=function(e,t){return jn(e,u({defaultTheme:Er},t))};function Cr(e){if("string"!=typeof e)throw new Error(w(7));return e.charAt(0).toUpperCase()+e.slice(1)}var Sr=!1,_r=i.a.createContext(null),Tr=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var i,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(i="exited",r.appearStatus="entering"):i="entered":i=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:i},r.nextCallback=null,r}D(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,i=this.props.nodeRef?[r]:[m.a.findDOMNode(this),r],o=i[0],a=i[1],u=this.getTimeouts(),l=r?u.appear:u.enter;!e&&!n||Sr?this.safeSetState({status:"entered"},(function(){t.props.onEntered(o)})):(this.props.onEnter(o,a),this.safeSetState({status:"entering"},(function(){t.props.onEntering(o,a),t.onTransitionEnd(l,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(o,a)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:m.a.findDOMNode(this);t&&!Sr?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:m.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=i[0],a=i[1];this.props.addEndListener(o,a)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,f(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return i.a.createElement(_r.Provider,{value:null},"function"==typeof n?n(e,r):i.a.cloneElement(i.a.Children.only(n),r))},t}(i.a.Component);function Mr(){}Tr.contextType=_r,Tr.propTypes={},Tr.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Mr,onEntering:Mr,onEntered:Mr,onExit:Mr,onExiting:Mr,onExited:Mr},Tr.UNMOUNTED="unmounted",Tr.EXITED="exited",Tr.ENTERING="entering",Tr.ENTERED="entered",Tr.EXITING="exiting";var Pr=Tr;function Nr(){return Ye()||Er}function Or(e,t){var n=e.timeout,r=e.style,i=void 0===r?{}:r;return{duration:i.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:i.transitionDelay}}function Rr(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function Br(e,t){return r.useMemo((function(){return null==e&&null==t?null:function(n){Rr(e,n),Rr(t,n)}}),[e,t])}function Dr(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var Ir={entering:{opacity:1,transform:Dr(1)},entered:{opacity:1,transform:"none"}},Lr=r.forwardRef((function(e,t){var n=e.children,i=e.disableStrictModeCompat,o=void 0!==i&&i,a=e.in,l=e.onEnter,s=e.onEntered,f=e.onEntering,p=e.onExit,h=e.onExited,m=e.onExiting,g=e.style,v=e.timeout,y=void 0===v?"auto":v,b=e.TransitionComponent,x=void 0===b?Pr:b,w=d(e,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),A=r.useRef(),E=r.useRef(),k=Nr(),C=k.unstable_strictMode&&!o,S=r.useRef(null),_=Br(n.ref,t),T=Br(C?S:void 0,_),M=function(e){return function(t,n){if(e){var r=c(C?[S.current,t]:[t,n],2),i=r[0],o=r[1];void 0===o?e(i):e(i,o)}}},P=M(f),N=M((function(e,t){!function(e){e.scrollTop}(e);var n,r=Or({style:g,timeout:y},{mode:"enter"}),i=r.duration,o=r.delay;"auto"===y?(n=k.transitions.getAutoHeightDuration(e.clientHeight),E.current=n):n=i,e.style.transition=[k.transitions.create("opacity",{duration:n,delay:o}),k.transitions.create("transform",{duration:.666*n,delay:o})].join(","),l&&l(e,t)})),O=M(s),R=M(m),B=M((function(e){var t,n=Or({style:g,timeout:y},{mode:"exit"}),r=n.duration,i=n.delay;"auto"===y?(t=k.transitions.getAutoHeightDuration(e.clientHeight),E.current=t):t=r,e.style.transition=[k.transitions.create("opacity",{duration:t,delay:i}),k.transitions.create("transform",{duration:.666*t,delay:i||.333*t})].join(","),e.style.opacity="0",e.style.transform=Dr(.75),p&&p(e)})),D=M(h);return r.useEffect((function(){return function(){clearTimeout(A.current)}}),[]),r.createElement(x,u({appear:!0,in:a,nodeRef:C?S:void 0,onEnter:N,onEntered:O,onEntering:P,onExit:B,onExited:D,onExiting:R,addEndListener:function(e,t){var n=C?e:t;"auto"===y&&(A.current=setTimeout(n,E.current||0))},timeout:"auto"===y?null:y},w),(function(e,t){return r.cloneElement(n,u({style:u({opacity:0,transform:Dr(.75),visibility:"exited"!==e||a?void 0:"hidden"},Ir[e],g,n.props.style),ref:T},t))}))}));Lr.muiSupportAuto=!0;var jr=Lr,Fr=n(38);var zr="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;var Ur=r.forwardRef((function(e,t){var n=e.children,i=e.container,o=e.disablePortal,a=void 0!==o&&o,u=e.onRendered,l=r.useState(null),s=l[0],c=l[1],f=Br(r.isValidElement(n)?n.ref:null,t);return zr((function(){a||c(function(e){return e="function"==typeof e?e():e,h.findDOMNode(e)}(i)||document.body)}),[i,a]),zr((function(){if(s&&!a)return Rr(t,s),function(){Rr(t,null)}}),[t,s,a]),zr((function(){u&&(s||a)&&u()}),[u,s,a]),a?r.isValidElement(n)?r.cloneElement(n,{ref:f}):n:s?h.createPortal(n,s):s}));function Hr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];e.apply(this,r),t.apply(this,r)}}),(function(){}))}function Wr(e){return"function"==typeof e?e():e}var $r="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,Vr={},Yr=r.forwardRef((function(e,t){var n=e.anchorEl,i=e.children,o=e.container,a=e.disablePortal,l=void 0!==a&&a,s=e.keepMounted,c=void 0!==s&&s,f=e.modifiers,p=e.open,h=e.placement,m=void 0===h?"bottom":h,g=e.popperOptions,v=void 0===g?Vr:g,y=e.popperRef,b=e.style,x=e.transition,w=void 0!==x&&x,A=d(e,["anchorEl","children","container","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","style","transition"]),E=r.useRef(null),k=Br(E,t),C=r.useRef(null),S=Br(C,y),_=r.useRef(S);$r((function(){_.current=S}),[S]),r.useImperativeHandle(y,(function(){return C.current}),[]);var T=r.useState(!0),M=T[0],P=T[1],N=function(e,t){if("ltr"===(t&&t.direction||"ltr"))return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(m,Ye()),O=r.useState(N),R=O[0],B=O[1];r.useEffect((function(){C.current&&C.current.update()}));var D=r.useCallback((function(){if(E.current&&n&&p){C.current&&(C.current.destroy(),_.current(null));var e=function(e){B(e.placement)},t=(Wr(n),new Fr.a(Wr(n),E.current,u({placement:N},v,{modifiers:u({},l?{}:{preventOverflow:{boundariesElement:"window"}},f,v.modifiers),onCreate:Hr(e,v.onCreate),onUpdate:Hr(e,v.onUpdate)})));_.current(t)}}),[n,l,f,p,N,v]),I=r.useCallback((function(e){Rr(k,e),D()}),[k,D]),L=function(){C.current&&(C.current.destroy(),_.current(null))};if(r.useEffect((function(){return function(){L()}}),[]),r.useEffect((function(){p||w||L()}),[p,w]),!c&&!p&&(!w||M))return null;var j={placement:R};return w&&(j.TransitionProps={in:p,onEnter:function(){P(!1)},onExited:function(){P(!0),L()}}),r.createElement(Ur,{disablePortal:l,container:o},r.createElement("div",u({ref:I,role:"tooltip"},A,{style:u({position:"fixed",top:0,left:0,display:p||!c||w?null:"none"},b)}),"function"==typeof i?i(j):i))}));var qr=!0,Qr=!1,Xr=null,Gr={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Kr(e){e.metaKey||e.altKey||e.ctrlKey||(qr=!0)}function Zr(){qr=!1}function Jr(){"hidden"===this.visibilityState&&Qr&&(qr=!0)}function ei(e){var t,n,r,i=e.target;try{return i.matches(":focus-visible")}catch(e){}return qr||(n=(t=i).type,!("INPUT"!==(r=t.tagName)||!Gr[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function ti(){Qr=!0,window.clearTimeout(Xr),Xr=window.setTimeout((function(){Qr=!1}),100)}function ni(){return{isFocusVisible:ei,onBlurVisible:ti,ref:r.useCallback((function(e){var t,n=h.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",Kr,!0),t.addEventListener("mousedown",Zr,!0),t.addEventListener("pointerdown",Zr,!0),t.addEventListener("touchstart",Zr,!0),t.addEventListener("visibilitychange",Jr,!0))}),[])}}function ri(e){return Math.round(1e5*e)/1e5}var ii=!1,oi=null;var ai=r.forwardRef((function(e,t){var n=e.arrow,i=void 0!==n&&n,o=e.children,a=e.classes,l=e.disableFocusListener,s=void 0!==l&&l,f=e.disableHoverListener,p=void 0!==f&&f,m=e.disableTouchListener,g=void 0!==m&&m,y=e.enterDelay,b=void 0===y?100:y,w=e.enterNextDelay,A=void 0===w?0:w,E=e.enterTouchDelay,k=void 0===E?700:E,C=e.id,S=e.interactive,_=void 0!==S&&S,T=e.leaveDelay,M=void 0===T?0:T,P=e.leaveTouchDelay,N=void 0===P?1500:P,O=e.onClose,R=e.onOpen,B=e.open,D=e.placement,I=void 0===D?"bottom":D,L=e.PopperComponent,j=void 0===L?Yr:L,F=e.PopperProps,z=e.title,U=e.TransitionComponent,H=void 0===U?jr:U,W=e.TransitionProps,$=d(e,["arrow","children","classes","disableFocusListener","disableHoverListener","disableTouchListener","enterDelay","enterNextDelay","enterTouchDelay","id","interactive","leaveDelay","leaveTouchDelay","onClose","onOpen","open","placement","PopperComponent","PopperProps","title","TransitionComponent","TransitionProps"]),V=Nr(),Y=r.useState(),q=Y[0],Q=Y[1],X=r.useState(null),G=X[0],K=X[1],Z=r.useRef(!1),J=r.useRef(),ee=r.useRef(),te=r.useRef(),ne=r.useRef(),re=c(function(e){var t=e.controlled,n=e.default,i=(e.name,e.state,r.useRef(void 0!==t).current),o=r.useState(n),a=o[0],u=o[1];return[i?t:a,r.useCallback((function(e){i||u(e)}),[])]}({controlled:B,default:!1,name:"Tooltip",state:"open"}),2),ie=re[0],oe=re[1],ae=ie,ue=function(e){var t=r.useState(e),n=t[0],i=t[1],o=e||n;return r.useEffect((function(){null==n&&i("mui-".concat(Math.round(1e5*Math.random())))}),[n]),o}(C);r.useEffect((function(){return function(){clearTimeout(J.current),clearTimeout(ee.current),clearTimeout(te.current),clearTimeout(ne.current)}}),[]);var le=function(e){clearTimeout(oi),ii=!0,oe(!0),R&&R(e)},se=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(t){var n=o.props;"mouseover"===t.type&&n.onMouseOver&&e&&n.onMouseOver(t),Z.current&&"touchstart"!==t.type||(q&&q.removeAttribute("title"),clearTimeout(ee.current),clearTimeout(te.current),b||ii&&A?(t.persist(),ee.current=setTimeout((function(){le(t)}),ii?A:b)):le(t))}},ce=ni(),fe=ce.isFocusVisible,de=ce.onBlurVisible,pe=ce.ref,he=r.useState(!1),me=he[0],ge=he[1],ve=function(){me&&(ge(!1),de())},ye=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(t){q||Q(t.currentTarget),fe(t)&&(ge(!0),se()(t));var n=o.props;n.onFocus&&e&&n.onFocus(t)}},be=function(e){clearTimeout(oi),oi=setTimeout((function(){ii=!1}),800+M),oe(!1),O&&O(e),clearTimeout(J.current),J.current=setTimeout((function(){Z.current=!1}),V.transitions.duration.shortest)},xe=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(t){var n=o.props;"blur"===t.type&&(n.onBlur&&e&&n.onBlur(t),ve()),"mouseleave"===t.type&&n.onMouseLeave&&t.currentTarget===q&&n.onMouseLeave(t),clearTimeout(ee.current),clearTimeout(te.current),t.persist(),te.current=setTimeout((function(){be(t)}),M)}},we=function(e){Z.current=!0;var t=o.props;t.onTouchStart&&t.onTouchStart(e)},Ae=Br(Q,t),Ee=Br(pe,Ae),ke=r.useCallback((function(e){Rr(Ee,h.findDOMNode(e))}),[Ee]),Ce=Br(o.ref,ke);""===z&&(ae=!1);var Se=u({"aria-describedby":ae?ue:null,title:!ae&&!p&&"string"==typeof z?z:null},$,o.props,{className:v($.className,o.props.className),onTouchStart:we,ref:Ce}),_e={};g||(Se.onTouchStart=function(e){we(e),clearTimeout(te.current),clearTimeout(J.current),clearTimeout(ne.current),e.persist(),ne.current=setTimeout((function(){se()(e)}),k)},Se.onTouchEnd=function(e){o.props.onTouchEnd&&o.props.onTouchEnd(e),clearTimeout(ne.current),clearTimeout(te.current),e.persist(),te.current=setTimeout((function(){be(e)}),N)}),p||(Se.onMouseOver=se(),Se.onMouseLeave=xe(),_&&(_e.onMouseOver=se(!1),_e.onMouseLeave=xe(!1))),s||(Se.onFocus=ye(),Se.onBlur=xe(),_&&(_e.onFocus=ye(!1),_e.onBlur=xe(!1)));var Te=r.useMemo((function(){return x({popperOptions:{modifiers:{arrow:{enabled:Boolean(G),element:G}}}},F)}),[G,F]);return r.createElement(r.Fragment,null,r.cloneElement(o,Se),r.createElement(j,u({className:v(a.popper,_&&a.popperInteractive,i&&a.popperArrow),placement:I,anchorEl:q,open:!!q&&ae,id:Se["aria-describedby"],transition:!0},_e,Te),(function(e){var t=e.placement,n=e.TransitionProps;return r.createElement(H,u({timeout:V.transitions.duration.shorter},n,W),r.createElement("div",{className:v(a.tooltip,a["tooltipPlacement".concat(Cr(t.split("-")[0]))],Z.current&&a.touch,i&&a.tooltipArrow)},z,i?r.createElement("span",{className:a.arrow,ref:K}):null))})))})),ui=kr((function(e){return{popper:{zIndex:e.zIndex.tooltip,pointerEvents:"none"},popperInteractive:{pointerEvents:"auto"},popperArrow:{'&[x-placement*="bottom"] $arrow':{top:0,left:0,marginTop:"-0.71em",marginLeft:4,marginRight:4,"&::before":{transformOrigin:"0 100%"}},'&[x-placement*="top"] $arrow':{bottom:0,left:0,marginBottom:"-0.71em",marginLeft:4,marginRight:4,"&::before":{transformOrigin:"100% 0"}},'&[x-placement*="right"] $arrow':{left:0,marginLeft:"-0.71em",height:"1em",width:"0.71em",marginTop:4,marginBottom:4,"&::before":{transformOrigin:"100% 100%"}},'&[x-placement*="left"] $arrow':{right:0,marginRight:"-0.71em",height:"1em",width:"0.71em",marginTop:4,marginBottom:4,"&::before":{transformOrigin:"0 0"}}},tooltip:{backgroundColor:S(e.palette.grey[700],.9),borderRadius:e.shape.borderRadius,color:e.palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(10),lineHeight:"".concat(ri(1.4),"em"),maxWidth:300,wordWrap:"break-word",fontWeight:e.typography.fontWeightMedium},tooltipArrow:{position:"relative",margin:"0"},arrow:{overflow:"hidden",position:"absolute",width:"1em",height:"0.71em",boxSizing:"border-box",color:S(e.palette.grey[700],.9),"&::before":{content:'""',margin:"auto",display:"block",width:"100%",height:"100%",backgroundColor:"currentColor",transform:"rotate(45deg)"}},touch:{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:"".concat(ri(16/14),"em"),fontWeight:e.typography.fontWeightRegular},tooltipPlacementLeft:p({transformOrigin:"right center",margin:"0 24px "},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementRight:p({transformOrigin:"left center",margin:"0 24px"},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementTop:p({transformOrigin:"center bottom",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"}),tooltipPlacementBottom:p({transformOrigin:"center top",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"})}}),{name:"MuiTooltip",flip:!1})(ai),li=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN},si=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return li(t(e),n)}),{left:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;e(t[o],n)<0?r=o+1:i=o}return r},right:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;e(t[o],n)>0?i=o:r=o+1}return r}}};var ci=si(li),fi=ci.right,di=(ci.left,fi);var pi=Array.prototype,hi=(pi.slice,pi.map,function(e,t,n){e=+e,t=+t,n=(i=arguments.length)<2?(t=e,e=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((t-e)/n)),o=new Array(i);++r<i;)o[r]=e+r*n;return o}),mi=Math.sqrt(50),gi=Math.sqrt(10),vi=Math.sqrt(2),yi=function(e,t,n){var r,i,o,a,u=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(i=e,e=t,t=i),0===(a=bi(e,t,n))||!isFinite(a))return[];if(a>0)for(e=Math.ceil(e/a),t=Math.floor(t/a),o=new Array(i=Math.ceil(t-e+1));++u<i;)o[u]=(e+u)*a;else for(e=Math.floor(e*a),t=Math.ceil(t*a),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(e-u)/a;return r&&o.reverse(),o};function bi(e,t,n){var r=(t-e)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=mi?10:o>=gi?5:o>=vi?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=mi?10:o>=gi?5:o>=vi?2:1)}function xi(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=mi?i*=10:o>=gi?i*=5:o>=vi&&(i*=2),t<e?-i:i}var wi=function(e,t){var n,r,i=e.length,o=-1;if(null==t){for(;++o<i;)if(null!=(n=e[o])&&n>=n)for(r=n;++o<i;)null!=(n=e[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=t(e[o],o,e))&&n>=n)for(r=n;++o<i;)null!=(n=t(e[o],o,e))&&n>r&&(r=n);return r};Array.prototype.slice;var Ai={value:function(){}};function Ei(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new ki(r)}function ki(e){this._=e}function Ci(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function Si(e,t){for(var n,r=0,i=e.length;r<i;++r)if((n=e[r]).name===t)return n.value}function _i(e,t,n){for(var r=0,i=e.length;r<i;++r)if(e[r].name===t){e[r]=Ai,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}ki.prototype=Ei.prototype={constructor:ki,on:function(e,t){var n,r=this._,i=Ci(e+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++o<a;)if(n=(e=i[o]).type)r[n]=_i(r[n],e.name,t);else if(null==t)for(n in r)r[n]=_i(r[n],e.name,null);return this}for(;++o<a;)if((n=(e=i[o]).type)&&(n=Si(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new ki(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(o=0,n=(r=this._[e]).length;o<n;++o)r[o].value.apply(t,i)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],i=0,o=r.length;i<o;++i)r[i].value.apply(t,n)}};var Ti=Ei;function Mi(){}var Pi=function(e){return null==e?Mi:function(){return this.querySelector(e)}};function Ni(){return[]}var Oi=function(e){return null==e?Ni:function(){return this.querySelectorAll(e)}},Ri=function(e){return function(){return this.matches(e)}},Bi=function(e){return new Array(e.length)};function Di(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}Di.prototype={constructor:Di,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};function Ii(e,t,n,r,i,o){for(var a,u=0,l=t.length,s=o.length;u<s;++u)(a=t[u])?(a.__data__=o[u],r[u]=a):n[u]=new Di(e,o[u]);for(;u<l;++u)(a=t[u])&&(i[u]=a)}function Li(e,t,n,r,i,o,a){var u,l,s,c={},f=t.length,d=o.length,p=new Array(f);for(u=0;u<f;++u)(l=t[u])&&(p[u]=s="$"+a.call(l,l.__data__,u,t),s in c?i[u]=l:c[s]=l);for(u=0;u<d;++u)(l=c[s="$"+a.call(e,o[u],u,o)])?(r[u]=l,l.__data__=o[u],c[s]=null):n[u]=new Di(e,o[u]);for(u=0;u<f;++u)(l=t[u])&&c[p[u]]===l&&(i[u]=l)}function ji(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}var Fi="http://www.w3.org/1999/xhtml",zi={svg:"http://www.w3.org/2000/svg",xhtml:Fi,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Ui=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),zi.hasOwnProperty(t)?{space:zi[t],local:e}:e};function Hi(e){return function(){this.removeAttribute(e)}}function Wi(e){return function(){this.removeAttributeNS(e.space,e.local)}}function $i(e,t){return function(){this.setAttribute(e,t)}}function Vi(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function Yi(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function qi(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}var Qi=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function Xi(e){return function(){this.style.removeProperty(e)}}function Gi(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Ki(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function Zi(e,t){return e.style.getPropertyValue(t)||Qi(e).getComputedStyle(e,null).getPropertyValue(t)}function Ji(e){return function(){delete this[e]}}function eo(e,t){return function(){this[e]=t}}function to(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function no(e){return e.trim().split(/^|\s+/)}function ro(e){return e.classList||new io(e)}function io(e){this._node=e,this._names=no(e.getAttribute("class")||"")}function oo(e,t){for(var n=ro(e),r=-1,i=t.length;++r<i;)n.add(t[r])}function ao(e,t){for(var n=ro(e),r=-1,i=t.length;++r<i;)n.remove(t[r])}function uo(e){return function(){oo(this,e)}}function lo(e){return function(){ao(this,e)}}function so(e,t){return function(){(t.apply(this,arguments)?oo:ao)(this,e)}}io.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function co(){this.textContent=""}function fo(e){return function(){this.textContent=e}}function po(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function ho(){this.innerHTML=""}function mo(e){return function(){this.innerHTML=e}}function go(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function vo(){this.nextSibling&&this.parentNode.appendChild(this)}function yo(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function bo(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===Fi&&t.documentElement.namespaceURI===Fi?t.createElement(e):t.createElementNS(n,e)}}function xo(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}var wo=function(e){var t=Ui(e);return(t.local?xo:bo)(t)};function Ao(){return null}function Eo(){var e=this.parentNode;e&&e.removeChild(this)}function ko(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function Co(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}var So={},_o=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(So={mouseenter:"mouseover",mouseleave:"mouseout"}));function To(e,t,n){return e=Mo(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function Mo(e,t,n){return function(r){var i=_o;_o=r;try{e.call(this,this.__data__,t,n)}finally{_o=i}}}function Po(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function No(e){return function(){var t=this.__on;if(t){for(var n,r=0,i=-1,o=t.length;r<o;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?t.length=i:delete this.__on}}}function Oo(e,t,n){var r=So.hasOwnProperty(e.type)?To:Mo;return function(i,o,a){var u,l=this.__on,s=r(t,o,a);if(l)for(var c=0,f=l.length;c<f;++c)if((u=l[c]).type===e.type&&u.name===e.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=s,u.capture=n),void(u.value=t);this.addEventListener(e.type,s,n),u={type:e.type,name:e.name,value:t,listener:s,capture:n},l?l.push(u):this.__on=[u]}}function Ro(e,t,n){var r=Qi(e),i=r.CustomEvent;"function"==typeof i?i=new i(t,n):(i=r.document.createEvent("Event"),n?(i.initEvent(t,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(t,!1,!1)),e.dispatchEvent(i)}function Bo(e,t){return function(){return Ro(this,e,t)}}function Do(e,t){return function(){return Ro(this,e,t.apply(this,arguments))}}var Io=[null];function Lo(e,t){this._groups=e,this._parents=t}function jo(){return new Lo([[document.documentElement]],Io)}Lo.prototype=jo.prototype={constructor:Lo,select:function(e){"function"!=typeof e&&(e=Pi(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a,u=t[i],l=u.length,s=r[i]=new Array(l),c=0;c<l;++c)(o=u[c])&&(a=e.call(o,o.__data__,c,u))&&("__data__"in o&&(a.__data__=o.__data__),s[c]=a);return new Lo(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=Oi(e));for(var t=this._groups,n=t.length,r=[],i=[],o=0;o<n;++o)for(var a,u=t[o],l=u.length,s=0;s<l;++s)(a=u[s])&&(r.push(e.call(a,a.__data__,s,u)),i.push(a));return new Lo(r,i)},filter:function(e){"function"!=typeof e&&(e=Ri(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],u=a.length,l=r[i]=[],s=0;s<u;++s)(o=a[s])&&e.call(o,o.__data__,s,a)&&l.push(o);return new Lo(r,this._parents)},data:function(e,t){if(!e)return h=new Array(this.size()),c=-1,this.each((function(e){h[++c]=e})),h;var n,r=t?Li:Ii,i=this._parents,o=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var a=o.length,u=new Array(a),l=new Array(a),s=new Array(a),c=0;c<a;++c){var f=i[c],d=o[c],p=d.length,h=e.call(f,f&&f.__data__,c,i),m=h.length,g=l[c]=new Array(m),v=u[c]=new Array(m);r(f,d,g,v,s[c]=new Array(p),h,t);for(var y,b,x=0,w=0;x<m;++x)if(y=g[x]){for(x>=w&&(w=x+1);!(b=v[w])&&++w<m;);y._next=b||null}}return(u=new Lo(u,i))._enter=l,u._exit=s,u},enter:function(){return new Lo(this._enter||this._groups.map(Bi),this._parents)},exit:function(){return new Lo(this._exit||this._groups.map(Bi),this._parents)},join:function(e,t,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(i=t(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var l,s=t[u],c=n[u],f=s.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=s[p]||c[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new Lo(a,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,i=e[t],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=ji);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,u=n[o],l=u.length,s=i[o]=new Array(l),c=0;c<l;++c)(a=u[c])&&(s[c]=a);s.sort(t)}return new Lo(i,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each((function(){e[++t]=this})),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var e=0;return this.each((function(){++e})),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var i,o=t[n],a=0,u=o.length;a<u;++a)(i=o[a])&&e.call(i,i.__data__,a,o);return this},attr:function(e,t){var n=Ui(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Wi:Hi:"function"==typeof t?n.local?qi:Yi:n.local?Vi:$i)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?Xi:"function"==typeof t?Ki:Gi)(e,t,null==n?"":n)):Zi(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?Ji:"function"==typeof t?to:eo)(e,t)):this.node()[e]},classed:function(e,t){var n=no(e+"");if(arguments.length<2){for(var r=ro(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof t?so:t?uo:lo)(n,t))},text:function(e){return arguments.length?this.each(null==e?co:("function"==typeof e?po:fo)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?ho:("function"==typeof e?go:mo)(e)):this.node().innerHTML},raise:function(){return this.each(vo)},lower:function(){return this.each(yo)},append:function(e){var t="function"==typeof e?e:wo(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:wo(e),r=null==t?Ao:"function"==typeof t?t:Pi(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Eo)},clone:function(e){return this.select(e?Co:ko)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,i,o=Po(e+""),a=o.length;if(!(arguments.length<2)){for(u=t?Oo:No,null==n&&(n=!1),r=0;r<a;++r)this.each(u(o[r],t,n));return this}var u=this.node().__on;if(u)for(var l,s=0,c=u.length;s<c;++s)for(r=0,l=u[s];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?Do:Bo)(e,t))}};var Fo=jo;var zo=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function Uo(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Ho(){}var Wo="\\s*([+-]?\\d+)\\s*",$o="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Vo="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Yo=/^#([0-9a-f]{3,8})$/,qo=new RegExp("^rgb\\("+[Wo,Wo,Wo]+"\\)$"),Qo=new RegExp("^rgb\\("+[Vo,Vo,Vo]+"\\)$"),Xo=new RegExp("^rgba\\("+[Wo,Wo,Wo,$o]+"\\)$"),Go=new RegExp("^rgba\\("+[Vo,Vo,Vo,$o]+"\\)$"),Ko=new RegExp("^hsl\\("+[$o,Vo,Vo]+"\\)$"),Zo=new RegExp("^hsla\\("+[$o,Vo,Vo,$o]+"\\)$"),Jo={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ea(){return this.rgb().formatHex()}function ta(){return this.rgb().formatRgb()}function na(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=Yo.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?ra(t):3===n?new ua(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?ia(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?ia(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=qo.exec(e))?new ua(t[1],t[2],t[3],1):(t=Qo.exec(e))?new ua(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=Xo.exec(e))?ia(t[1],t[2],t[3],t[4]):(t=Go.exec(e))?ia(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Ko.exec(e))?fa(t[1],t[2]/100,t[3]/100,1):(t=Zo.exec(e))?fa(t[1],t[2]/100,t[3]/100,t[4]):Jo.hasOwnProperty(e)?ra(Jo[e]):"transparent"===e?new ua(NaN,NaN,NaN,0):null}function ra(e){return new ua(e>>16&255,e>>8&255,255&e,1)}function ia(e,t,n,r){return r<=0&&(e=t=n=NaN),new ua(e,t,n,r)}function oa(e){return e instanceof Ho||(e=na(e)),e?new ua((e=e.rgb()).r,e.g,e.b,e.opacity):new ua}function aa(e,t,n,r){return 1===arguments.length?oa(e):new ua(e,t,n,null==r?1:r)}function ua(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function la(){return"#"+ca(this.r)+ca(this.g)+ca(this.b)}function sa(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function ca(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function fa(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new pa(e,t,n,r)}function da(e){if(e instanceof pa)return new pa(e.h,e.s,e.l,e.opacity);if(e instanceof Ho||(e=na(e)),!e)return new pa;if(e instanceof pa)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,i=Math.min(t,n,r),o=Math.max(t,n,r),a=NaN,u=o-i,l=(o+i)/2;return u?(a=t===o?(n-r)/u+6*(n<r):n===o?(r-t)/u+2:(t-n)/u+4,u/=l<.5?o+i:2-o-i,a*=60):u=l>0&&l<1?0:a,new pa(a,u,l,e.opacity)}function pa(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function ha(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function ma(e,t,n,r,i){var o=e*e,a=o*e;return((1-3*e+3*o-a)*t+(4-6*o+3*a)*n+(1+3*e+3*o-3*a)*r+a*i)/6}zo(Ho,na,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:ea,formatHex:ea,formatHsl:function(){return da(this).formatHsl()},formatRgb:ta,toString:ta}),zo(ua,aa,Uo(Ho,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new ua(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new ua(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:la,formatHex:la,formatRgb:sa,toString:sa})),zo(pa,(function(e,t,n,r){return 1===arguments.length?da(e):new pa(e,t,n,null==r?1:r)}),Uo(Ho,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new pa(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new pa(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,i=2*n-r;return new ua(ha(e>=240?e-240:e+120,i,r),ha(e,i,r),ha(e<120?e+240:e-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));var ga=function(e){return function(){return e}};function va(e,t){return function(n){return e+n*t}}function ya(e){return 1==(e=+e)?ba:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):ga(isNaN(t)?n:t)}}function ba(e,t){var n=t-e;return n?va(e,n):ga(isNaN(e)?t:e)}var xa=function e(t){var n=ya(t);function r(e,t){var r=n((e=aa(e)).r,(t=aa(t)).r),i=n(e.g,t.g),o=n(e.b,t.b),a=ba(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=i(t),e.b=o(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function wa(e){return function(t){var n,r,i=t.length,o=new Array(i),a=new Array(i),u=new Array(i);for(n=0;n<i;++n)r=aa(t[n]),o[n]=r.r||0,a[n]=r.g||0,u[n]=r.b||0;return o=e(o),a=e(a),u=e(u),r.opacity=1,function(e){return r.r=o(e),r.g=a(e),r.b=u(e),r+""}}}wa((function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),i=e[r],o=e[r+1],a=r>0?e[r-1]:2*i-o,u=r<t-1?e[r+2]:2*o-i;return ma((n-r/t)*t,a,i,o,u)}})),wa((function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),i=e[(r+t-1)%t],o=e[r%t],a=e[(r+1)%t],u=e[(r+2)%t];return ma((n-r/t)*t,i,o,a,u)}}));var Aa=function(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,i=t.slice();return function(o){for(n=0;n<r;++n)i[n]=e[n]*(1-o)+t[n]*o;return i}};function Ea(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function ka(e,t){var n,r=t?t.length:0,i=e?Math.min(r,e.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Ra(e[n],t[n]);for(;n<r;++n)a[n]=t[n];return function(e){for(n=0;n<i;++n)a[n]=o[n](e);return a}}var Ca=function(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}},Sa=function(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}},_a=function(e,t){var n,r={},i={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=Ra(e[n],t[n]):i[n]=t[n];return function(e){for(n in r)i[n]=r[n](e);return i}},Ta=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ma=new RegExp(Ta.source,"g");var Pa,Na,Oa=function(e,t){var n,r,i,o=Ta.lastIndex=Ma.lastIndex=0,a=-1,u=[],l=[];for(e+="",t+="";(n=Ta.exec(e))&&(r=Ma.exec(t));)(i=r.index)>o&&(i=t.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,l.push({i:a,x:Sa(n,r)})),o=Ma.lastIndex;return o<t.length&&(i=t.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?l[0]?function(e){return function(t){return e(t)+""}}(l[0].x):function(e){return function(){return e}}(t):(t=l.length,function(e){for(var n,r=0;r<t;++r)u[(n=l[r]).i]=n.x(e);return u.join("")})},Ra=function(e,t){var n,r=typeof t;return null==t||"boolean"===r?ga(t):("number"===r?Sa:"string"===r?(n=na(t))?(t=n,xa):Oa:t instanceof na?xa:t instanceof Date?Ca:Ea(t)?Aa:Array.isArray(t)?ka:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?_a:Sa)(e,t)},Ba=0,Da=0,Ia=0,La=0,ja=0,Fa=0,za="object"==typeof performance&&performance.now?performance:Date,Ua="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function Ha(){return ja||(Ua(Wa),ja=za.now()+Fa)}function Wa(){ja=0}function $a(){this._call=this._time=this._next=null}function Va(e,t,n){var r=new $a;return r.restart(e,t,n),r}function Ya(){ja=(La=za.now())+Fa,Ba=Da=0;try{!function(){Ha(),++Ba;for(var e,t=Pa;t;)(e=ja-t._time)>=0&&t._call.call(null,e),t=t._next;--Ba}()}finally{Ba=0,function(){var e,t,n=Pa,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:Pa=t);Na=e,Qa(r)}(),ja=0}}function qa(){var e=za.now(),t=e-La;t>1e3&&(Fa-=t,La=e)}function Qa(e){Ba||(Da&&(Da=clearTimeout(Da)),e-ja>24?(e<1/0&&(Da=setTimeout(Ya,e-za.now()-Fa)),Ia&&(Ia=clearInterval(Ia))):(Ia||(La=za.now(),Ia=setInterval(qa,1e3)),Ba=1,Ua(Ya)))}$a.prototype=Va.prototype={constructor:$a,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?Ha():+n)+(null==t?0:+t),this._next||Na===this||(Na?Na._next=this:Pa=this,Na=this),this._call=e,this._time=n,Qa()},stop:function(){this._call&&(this._call=null,this._time=1/0,Qa())}};var Xa=function(e,t,n){var r=new $a;return t=null==t?0:+t,r.restart((function(n){r.stop(),e(n+t)}),t,n),r},Ga=Ti("start","end","cancel","interrupt"),Ka=[],Za=function(e,t,n,r,i,o){var a=e.__transition;if(a){if(n in a)return}else e.__transition={};!function(e,t,n){var r,i=e.__transition;function o(l){var s,c,f,d;if(1!==n.state)return u();for(s in i)if((d=i[s]).name===n.name){if(3===d.state)return Xa(o);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete i[s]):+s<t&&(d.state=6,d.timer.stop(),d.on.call("cancel",e,e.__data__,d.index,d.group),delete i[s])}if(Xa((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(l))})),n.state=2,n.on.call("start",e,e.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),s=0,c=-1;s<f;++s)(d=n.tween[s].value.call(e,e.__data__,n.index,n.group))&&(r[++c]=d);r.length=c+1}}function a(t){for(var i=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(u),n.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(e,i);5===n.state&&(n.on.call("end",e,e.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete i[t],i)return;delete e.__transition}i[t]=n,n.timer=Va((function(e){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=e&&o(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:i,on:Ga,tween:Ka,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function Ja(e,t){var n=tu(e,t);if(n.state>0)throw new Error("too late; already scheduled");return n}function eu(e,t){var n=tu(e,t);if(n.state>3)throw new Error("too late; already running");return n}function tu(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}var nu,ru,iu,ou,au=function(e,t){var n,r,i,o=e.__transition,a=!0;if(o){for(i in t=null==t?null:t+"",o)(n=o[i]).name===t?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete e.__transition}},uu=180/Math.PI,lu={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},su=function(e,t,n,r,i,o){var a,u,l;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(l=e*n+t*r)&&(n-=e*l,r-=t*l),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,l/=u),e*r<t*n&&(e=-e,t=-t,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(t,e)*uu,skewX:Math.atan(l)*uu,scaleX:a,scaleY:u}};function cu(e,t,n,r){function i(e){return e.length?e.pop()+" ":""}return function(o,a){var u=[],l=[];return o=e(o),a=e(a),function(e,r,i,o,a,u){if(e!==i||r!==o){var l=a.push("translate(",null,t,null,n);u.push({i:l-4,x:Sa(e,i)},{i:l-2,x:Sa(r,o)})}else(i||o)&&a.push("translate("+i+t+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,u,l),function(e,t,n,o){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Sa(e,t)})):t&&n.push(i(n)+"rotate("+t+r)}(o.rotate,a.rotate,u,l),function(e,t,n,o){e!==t?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Sa(e,t)}):t&&n.push(i(n)+"skewX("+t+r)}(o.skewX,a.skewX,u,l),function(e,t,n,r,o,a){if(e!==n||t!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Sa(e,n)},{i:u-2,x:Sa(t,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,l),o=a=null,function(e){for(var t,n=-1,r=l.length;++n<r;)u[(t=l[n]).i]=t.x(e);return u.join("")}}}var fu=cu((function(e){return"none"===e?lu:(nu||(nu=document.createElement("DIV"),ru=document.documentElement,iu=document.defaultView),nu.style.transform=e,e=iu.getComputedStyle(ru.appendChild(nu),null).getPropertyValue("transform"),ru.removeChild(nu),e=e.slice(7,-1).split(","),su(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))}),"px, ","px)","deg)"),du=cu((function(e){return null==e?lu:(ou||(ou=document.createElementNS("http://www.w3.org/2000/svg","g")),ou.setAttribute("transform",e),(e=ou.transform.baseVal.consolidate())?(e=e.matrix,su(e.a,e.b,e.c,e.d,e.e,e.f)):lu)}),", ",")",")");function pu(e,t){var n,r;return function(){var i=eu(this,e),o=i.tween;if(o!==n)for(var a=0,u=(r=n=o).length;a<u;++a)if(r[a].name===t){(r=r.slice()).splice(a,1);break}i.tween=r}}function hu(e,t,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=eu(this,e),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:t,value:n},l=0,s=i.length;l<s;++l)if(i[l].name===t){i[l]=u;break}l===s&&i.push(u)}o.tween=i}}function mu(e,t,n){var r=e._id;return e.each((function(){var e=eu(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return tu(e,r).value[t]}}var gu=function(e,t){var n;return("number"==typeof t?Sa:t instanceof na?xa:(n=na(t))?(t=n,xa):Oa)(e,t)};function vu(e){return function(){this.removeAttribute(e)}}function yu(e){return function(){this.removeAttributeNS(e.space,e.local)}}function bu(e,t,n){var r,i,o=n+"";return function(){var a=this.getAttribute(e);return a===o?null:a===r?i:i=t(r=a,n)}}function xu(e,t,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(e.space,e.local);return a===o?null:a===r?i:i=t(r=a,n)}}function wu(e,t,n){var r,i,o;return function(){var a,u,l=n(this);if(null!=l)return(a=this.getAttribute(e))===(u=l+"")?null:a===r&&u===i?o:(i=u,o=t(r=a,l));this.removeAttribute(e)}}function Au(e,t,n){var r,i,o;return function(){var a,u,l=n(this);if(null!=l)return(a=this.getAttributeNS(e.space,e.local))===(u=l+"")?null:a===r&&u===i?o:(i=u,o=t(r=a,l));this.removeAttributeNS(e.space,e.local)}}function Eu(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function ku(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function Cu(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&ku(e,i)),n}return i._value=t,i}function Su(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&Eu(e,i)),n}return i._value=t,i}function _u(e,t){return function(){Ja(this,e).delay=+t.apply(this,arguments)}}function Tu(e,t){return t=+t,function(){Ja(this,e).delay=t}}function Mu(e,t){return function(){eu(this,e).duration=+t.apply(this,arguments)}}function Pu(e,t){return t=+t,function(){eu(this,e).duration=t}}function Nu(e,t){if("function"!=typeof t)throw new Error;return function(){eu(this,e).ease=t}}function Ou(e,t,n){var r,i,o=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?Ja:eu;return function(){var a=o(this,e),u=a.on;u!==r&&(i=(r=u).copy()).on(t,n),a.on=i}}var Ru=Fo.prototype.constructor;function Bu(e){return function(){this.style.removeProperty(e)}}function Du(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function Iu(e,t,n){var r,i;function o(){var o=t.apply(this,arguments);return o!==i&&(r=(i=o)&&Du(e,o,n)),r}return o._value=t,o}function Lu(e){return function(t){this.textContent=e.call(this,t)}}function ju(e){var t,n;function r(){var r=e.apply(this,arguments);return r!==n&&(t=(n=r)&&Lu(r)),t}return r._value=e,r}var Fu=0;function zu(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function Uu(){return++Fu}var Hu=Fo.prototype;zu.prototype=function(e){return Fo().transition(e)}.prototype={constructor:zu,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Pi(e));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,l,s=r[a],c=s.length,f=o[a]=new Array(c),d=0;d<c;++d)(u=s[d])&&(l=e.call(u,u.__data__,d,s))&&("__data__"in u&&(l.__data__=u.__data__),f[d]=l,Za(f[d],t,n,d,f,tu(u,n)));return new zu(o,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Oi(e));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var l,s=r[u],c=s.length,f=0;f<c;++f)if(l=s[f]){for(var d,p=e.call(l,l.__data__,f,s),h=tu(l,n),m=0,g=p.length;m<g;++m)(d=p[m])&&Za(d,t,n,m,p,h);o.push(p),a.push(l)}return new zu(o,a,t,n)},filter:function(e){"function"!=typeof e&&(e=Ri(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],u=a.length,l=r[i]=[],s=0;s<u;++s)(o=a[s])&&e.call(o,o.__data__,s,a)&&l.push(o);return new zu(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var l,s=t[u],c=n[u],f=s.length,d=a[u]=new Array(f),p=0;p<f;++p)(l=s[p]||c[p])&&(d[p]=l);for(;u<r;++u)a[u]=t[u];return new zu(a,this._parents,this._name,this._id)},selection:function(){return new Ru(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=Uu(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],l=u.length,s=0;s<l;++s)if(a=u[s]){var c=tu(a,t);Za(a,e,n,s,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new zu(r,this._parents,e,n)},call:Hu.call,nodes:Hu.nodes,node:Hu.node,size:Hu.size,empty:Hu.empty,each:Hu.each,on:function(e,t){var n=this._id;return arguments.length<2?tu(this.node(),n).on.on(e):this.each(Ou(n,e,t))},attr:function(e,t){var n=Ui(e),r="transform"===n?du:gu;return this.attrTween(e,"function"==typeof t?(n.local?Au:wu)(n,r,mu(this,"attr."+e,t)):null==t?(n.local?yu:vu)(n):(n.local?xu:bu)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=Ui(e);return this.tween(n,(r.local?Cu:Su)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?fu:gu;return null==t?this.styleTween(e,function(e,t){var n,r,i;return function(){var o=Zi(this,e),a=(this.style.removeProperty(e),Zi(this,e));return o===a?null:o===n&&a===r?i:i=t(n=o,r=a)}}(e,r)).on("end.style."+e,Bu(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,i,o;return function(){var a=Zi(this,e),u=n(this),l=u+"";return null==u&&(this.style.removeProperty(e),l=u=Zi(this,e)),a===l?null:a===r&&l===i?o:(i=l,o=t(r=a,u))}}(e,r,mu(this,"style."+e,t))).each(function(e,t){var n,r,i,o,a="style."+t,u="end."+a;return function(){var l=eu(this,e),s=l.on,c=null==l.value[a]?o||(o=Bu(t)):void 0;s===n&&i===c||(r=(n=s).copy()).on(u,i=c),l.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,i,o=n+"";return function(){var a=Zi(this,e);return a===o?null:a===r?i:i=t(r=a,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,Iu(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(mu(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,ju(e))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,i=tu(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===e)return r.value;return null}return this.each((null==t?pu:hu)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?_u:Tu)(t,e)):tu(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Mu:Pu)(t,e)):tu(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(Nu(t,e)):tu(this.node(),t).ease},end:function(){var e,t,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var u={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=eu(this,r),i=n.on;i!==e&&((t=(e=i).copy())._.cancel.push(u),t._.interrupt.push(u),t._.end.push(l)),n.on=t}))}))}};var Wu={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function $u(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Wu.time=Ha(),Wu;return n}Fo.prototype.interrupt=function(e){return this.each((function(){au(this,e)}))},Fo.prototype.transition=function(e){var t,n;e instanceof zu?(t=e._id,e=e._name):(t=Uu(),(n=Wu).time=Ha(),e=null==e?null:e+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],l=u.length,s=0;s<l;++s)(a=u[s])&&Za(a,e,t,s,u,n||$u(a,t));return new zu(r,this._parents,e,t)};function Vu(e){return[+e[0],+e[1]]}function Yu(e){return[Vu(e[0]),Vu(e[1])]}["w","e"].map(qu),["n","s"].map(qu),["n","w","e","s","nw","ne","sw","se"].map(qu);function qu(e){return{type:e}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Qu=Math.PI,Xu=2*Qu,Gu=Xu-1e-6;function Ku(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Zu(){return new Ku}Ku.prototype=Zu.prototype={constructor:Ku,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,i,o){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(e,t,n,r,i){e=+e,t=+t,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,u=n-e,l=r-t,s=o-e,c=a-t,f=s*s+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(f>1e-6)if(Math.abs(c*u-l*s)>1e-6&&i){var d=n-o,p=r-a,h=u*u+l*l,m=d*d+p*p,g=Math.sqrt(h),v=Math.sqrt(f),y=i*Math.tan((Qu-Math.acos((h+f-m)/(2*g*v)))/2),b=y/v,x=y/g;Math.abs(b-1)>1e-6&&(this._+="L"+(e+b*s)+","+(t+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*d>s*p)+","+(this._x1=e+x*u)+","+(this._y1=t+x*l)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,i,o){e=+e,t=+t,o=!!o;var a=(n=+n)*Math.cos(r),u=n*Math.sin(r),l=e+a,s=t+u,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+s:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+l+","+s),n&&(f<0&&(f=f%Xu+Xu),f>Gu?this._+="A"+n+","+n+",0,1,"+c+","+(e-a)+","+(t-u)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=s):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Qu)+","+c+","+(this._x1=e+n*Math.cos(i))+","+(this._y1=t+n*Math.sin(i))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Ju=Zu;function el(){}function tl(e,t){var n=new el;if(e instanceof el)e.each((function(e,t){n.set(t,e)}));else if(Array.isArray(e)){var r,i=-1,o=e.length;if(null==t)for(;++i<o;)n.set(i,e[i]);else for(;++i<o;)n.set(t(r=e[i],i,e),r)}else if(e)for(var a in e)n.set(a,e[a]);return n}el.prototype=tl.prototype={constructor:el,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var nl=tl;function rl(){}var il=nl.prototype;function ol(e,t){var n=new rl;if(e instanceof rl)e.each((function(e){n.add(e)}));else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}rl.prototype=ol.prototype={constructor:rl,has:il.has,add:function(e){return this["$"+(e+="")]=e,this},remove:il.remove,clear:il.clear,values:il.keys,size:il.size,empty:il.empty,each:il.each};Array.prototype.slice;function al(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var i,o,a,u,l,s,c,f,d,p=e._root,h={data:r},m=e._x0,g=e._y0,v=e._x1,y=e._y1;if(!p)return e._root=h,e;for(;p.length;)if((s=t>=(o=(m+v)/2))?m=o:v=o,(c=n>=(a=(g+y)/2))?g=a:y=a,i=p,!(p=p[f=c<<1|s]))return i[f]=h,e;if(u=+e._x.call(null,p.data),l=+e._y.call(null,p.data),t===u&&n===l)return h.next=p,i?i[f]=h:e._root=h,e;do{i=i?i[f]=new Array(4):e._root=new Array(4),(s=t>=(o=(m+v)/2))?m=o:v=o,(c=n>=(a=(g+y)/2))?g=a:y=a}while((f=c<<1|s)==(d=(l>=a)<<1|u>=o));return i[d]=p,i[f]=h,e}var ul=function(e,t,n,r,i){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=i};function ll(e){return e[0]}function sl(e){return e[1]}function cl(e,t,n){var r=new fl(null==t?ll:t,null==n?sl:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function fl(e,t,n,r,i,o){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function dl(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var pl=cl.prototype=fl.prototype;pl.copy=function(){var e,t,n=new fl(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=dl(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var i=0;i<4;++i)(t=r.source[i])&&(t.length?e.push({source:t,target:r.target[i]=new Array(4)}):r.target[i]=dl(t));return n},pl.add=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return al(this.cover(t,n),t,n,e)},pl.addAll=function(e){var t,n,r,i,o=e.length,a=new Array(o),u=new Array(o),l=1/0,s=1/0,c=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,t=e[n]))||isNaN(i=+this._y.call(null,t))||(a[n]=r,u[n]=i,r<l&&(l=r),r>c&&(c=r),i<s&&(s=i),i>f&&(f=i));if(l>c||s>f)return this;for(this.cover(l,s).cover(c,f),n=0;n<o;++n)al(this,a[n],u[n],e[n]);return this},pl.cover=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(e))+1,o=(r=Math.floor(t))+1;else{for(var a,u,l=i-n,s=this._root;n>e||e>=i||r>t||t>=o;)switch(u=(t<r)<<1|e<n,(a=new Array(4))[u]=s,s=a,l*=2,u){case 0:i=n+l,o=r+l;break;case 1:n=i-l,o=r+l;break;case 2:i=n+l,r=o-l;break;case 3:n=i-l,r=o-l}this._root&&this._root.length&&(this._root=s)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},pl.data=function(){var e=[];return this.visit((function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)})),e},pl.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},pl.find=function(e,t,n){var r,i,o,a,u,l,s,c=this._x0,f=this._y0,d=this._x1,p=this._y1,h=[],m=this._root;for(m&&h.push(new ul(m,c,f,d,p)),null==n?n=1/0:(c=e-n,f=t-n,d=e+n,p=t+n,n*=n);l=h.pop();)if(!(!(m=l.node)||(i=l.x0)>d||(o=l.y0)>p||(a=l.x1)<c||(u=l.y1)<f))if(m.length){var g=(i+a)/2,v=(o+u)/2;h.push(new ul(m[3],g,v,a,u),new ul(m[2],i,v,g,u),new ul(m[1],g,o,a,v),new ul(m[0],i,o,g,v)),(s=(t>=v)<<1|e>=g)&&(l=h[h.length-1],h[h.length-1]=h[h.length-1-s],h[h.length-1-s]=l)}else{var y=e-+this._x.call(null,m.data),b=t-+this._y.call(null,m.data),x=y*y+b*b;if(x<n){var w=Math.sqrt(n=x);c=e-w,f=t-w,d=e+w,p=t+w,r=m.data}}return r},pl.remove=function(e){if(isNaN(o=+this._x.call(null,e))||isNaN(a=+this._y.call(null,e)))return this;var t,n,r,i,o,a,u,l,s,c,f,d,p=this._root,h=this._x0,m=this._y0,g=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((s=o>=(u=(h+g)/2))?h=u:g=u,(c=a>=(l=(m+v)/2))?m=l:v=l,t=p,!(p=p[f=c<<1|s]))return this;if(!p.length)break;(t[f+1&3]||t[f+2&3]||t[f+3&3])&&(n=t,d=f)}for(;p.data!==e;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):t?(i?t[f]=i:delete t[f],(p=t[0]||t[1]||t[2]||t[3])&&p===(t[3]||t[2]||t[1]||t[0])&&!p.length&&(n?n[d]=p:this._root=p),this):(this._root=i,this)},pl.removeAll=function(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this},pl.root=function(){return this._root},pl.size=function(){var e=0;return this.visit((function(t){if(!t.length)do{++e}while(t=t.next)})),e},pl.visit=function(e){var t,n,r,i,o,a,u=[],l=this._root;for(l&&u.push(new ul(l,this._x0,this._y0,this._x1,this._y1));t=u.pop();)if(!e(l=t.node,r=t.x0,i=t.y0,o=t.x1,a=t.y1)&&l.length){var s=(r+o)/2,c=(i+a)/2;(n=l[3])&&u.push(new ul(n,s,c,o,a)),(n=l[2])&&u.push(new ul(n,r,c,s,a)),(n=l[1])&&u.push(new ul(n,s,i,o,c)),(n=l[0])&&u.push(new ul(n,r,i,s,c))}return this},pl.visitAfter=function(e){var t,n=[],r=[];for(this._root&&n.push(new ul(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var i=t.node;if(i.length){var o,a=t.x0,u=t.y0,l=t.x1,s=t.y1,c=(a+l)/2,f=(u+s)/2;(o=i[0])&&n.push(new ul(o,a,u,c,f)),(o=i[1])&&n.push(new ul(o,c,u,l,f)),(o=i[2])&&n.push(new ul(o,a,f,c,s)),(o=i[3])&&n.push(new ul(o,c,f,l,s))}r.push(t)}for(;t=r.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this},pl.x=function(e){return arguments.length?(this._x=e,this):this._x},pl.y=function(e){return arguments.length?(this._y=e,this):this._y};Math.PI,Math.sqrt(5);var hl=function(){return Math.random()},ml=(function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(hl),function e(t){function n(e,n){var r,i;return e=null==e?0:+e,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*t()-1,o=2*t()-1,i=r*r+o*o}while(!i||i>1);return e+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=e,n}(hl)),gl=(function e(t){function n(){var e=ml.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(hl),function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}(hl));(function e(t){function n(e){var n=gl.source(t)(e);return function(){return n()/e}}return n.source=e,n})(hl),function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(hl);function vl(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}var yl=Array.prototype,bl=yl.map,xl=yl.slice,wl={name:"implicit"};function Al(){var e=nl(),t=[],n=[],r=wl;function i(i){var o=i+"",a=e.get(o);if(!a){if(r!==wl)return r;e.set(o,a=t.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return t.slice();t=[],e=nl();for(var r,o,a=-1,u=n.length;++a<u;)e.has(o=(r=n[a])+"")||e.set(o,t.push(r));return i},i.range=function(e){return arguments.length?(n=xl.call(e),i):n.slice()},i.unknown=function(e){return arguments.length?(r=e,i):r},i.copy=function(){return Al(t,n).unknown(r)},vl.apply(i,arguments),i}function El(){var e,t,n=Al().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,u=0,l=0,s=.5;function c(){var n=r().length,c=o[1]<o[0],f=o[c-0],d=o[1-c];e=(d-f)/Math.max(1,n-u+2*l),a&&(e=Math.floor(e)),f+=(d-f-e*(n-u))*s,t=e*(1-u),a&&(f=Math.round(f),t=Math.round(t));var p=hi(n).map((function(t){return f+e*t}));return i(c?p.reverse():p)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),c()):r()},n.range=function(e){return arguments.length?(o=[+e[0],+e[1]],c()):o.slice()},n.rangeRound=function(e){return o=[+e[0],+e[1]],a=!0,c()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(a=!!e,c()):a},n.padding=function(e){return arguments.length?(u=Math.min(1,l=+e),c()):u},n.paddingInner=function(e){return arguments.length?(u=Math.min(1,e),c()):u},n.paddingOuter=function(e){return arguments.length?(l=+e,c()):l},n.align=function(e){return arguments.length?(s=Math.max(0,Math.min(1,e)),c()):s},n.copy=function(){return El(r(),o).round(a).paddingInner(u).paddingOuter(l).align(s)},vl.apply(c(),arguments)}var kl=function(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}},Cl=function(e){return+e},Sl=[0,1];function _l(e){return e}function Tl(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:(n=isNaN(t)?NaN:.5,function(){return n});var n}function Ml(e){var t,n=e[0],r=e[e.length-1];return n>r&&(t=n,n=r,r=t),function(e){return Math.max(n,Math.min(r,e))}}function Pl(e,t,n){var r=e[0],i=e[1],o=t[0],a=t[1];return i<r?(r=Tl(i,r),o=n(a,o)):(r=Tl(r,i),o=n(o,a)),function(e){return o(r(e))}}function Nl(e,t,n){var r=Math.min(e.length,t.length)-1,i=new Array(r),o=new Array(r),a=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++a<r;)i[a]=Tl(e[a],e[a+1]),o[a]=n(t[a],t[a+1]);return function(t){var n=di(e,t,1,r)-1;return o[n](i[n](t))}}function Ol(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function Rl(){var e,t,n,r,i,o,a=Sl,u=Sl,l=Ra,s=_l;function c(){return r=Math.min(a.length,u.length)>2?Nl:Pl,i=o=null,f}function f(t){return isNaN(t=+t)?n:(i||(i=r(a.map(e),u,l)))(e(s(t)))}return f.invert=function(n){return s(t((o||(o=r(u,a.map(e),Sa)))(n)))},f.domain=function(e){return arguments.length?(a=bl.call(e,Cl),s===_l||(s=Ml(a)),c()):a.slice()},f.range=function(e){return arguments.length?(u=xl.call(e),c()):u.slice()},f.rangeRound=function(e){return u=xl.call(e),l=kl,c()},f.clamp=function(e){return arguments.length?(s=e?Ml(a):_l,f):s!==_l},f.interpolate=function(e){return arguments.length?(l=e,c()):l},f.unknown=function(e){return arguments.length?(n=e,f):n},function(n,r){return e=n,t=r,c()}}function Bl(e,t){return Rl()(e,t)}var Dl=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Il(e){if(!(t=Dl.exec(e)))throw new Error("invalid format: "+e);var t;return new Ll({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function Ll(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}Il.prototype=Ll.prototype,Ll.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var jl,Fl,zl,Ul,Hl=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]},Wl=function(e){return(e=Hl(Math.abs(e)))?e[1]:NaN},$l=function(e,t){var n=Hl(e,t);if(!n)return e+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Vl={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return $l(100*e,t)},r:$l,s:function(e,t){var n=Hl(e,t);if(!n)return e+"";var r=n[0],i=n[1],o=i-(jl=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Hl(e,Math.max(0,t+o-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Yl=function(e){return e},ql=Array.prototype.map,Ql=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Fl=function(e){var t,n,r=void 0===e.grouping||void 0===e.thousands?Yl:(t=ql.call(e.grouping,Number),n=e.thousands+"",function(e,r){for(var i=e.length,o=[],a=0,u=t[0],l=0;i>0&&u>0&&(l+u+1>r&&(u=Math.max(1,r-l)),o.push(e.substring(i-=u,i+u)),!((l+=u+1)>r));)u=t[a=(a+1)%t.length];return o.reverse().join(n)}),i=void 0===e.currency?"":e.currency[0]+"",o=void 0===e.currency?"":e.currency[1]+"",a=void 0===e.decimal?".":e.decimal+"",u=void 0===e.numerals?Yl:function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}(ql.call(e.numerals,String)),l=void 0===e.percent?"%":e.percent+"",s=void 0===e.minus?"-":e.minus+"",c=void 0===e.nan?"NaN":e.nan+"";function f(e){var t=(e=Il(e)).fill,n=e.align,f=e.sign,d=e.symbol,p=e.zero,h=e.width,m=e.comma,g=e.precision,v=e.trim,y=e.type;"n"===y?(m=!0,y="g"):Vl[y]||(void 0===g&&(g=12),v=!0,y="g"),(p||"0"===t&&"="===n)&&(p=!0,t="0",n="=");var b="$"===d?i:"#"===d&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===d?o:/[%p]/.test(y)?l:"",w=Vl[y],A=/[defgprs%]/.test(y);function E(e){var i,o,l,d=b,E=x;if("c"===y)E=w(e)+E,e="";else{var k=(e=+e)<0||1/e<0;if(e=isNaN(e)?c:w(Math.abs(e),g),v&&(e=function(e){e:for(var t,n=e.length,r=1,i=-1;r<n;++r)switch(e[r]){case".":i=t=r;break;case"0":0===i&&(i=r),t=r;break;default:if(!+e[r])break e;i>0&&(i=0)}return i>0?e.slice(0,i)+e.slice(t+1):e}(e)),k&&0==+e&&"+"!==f&&(k=!1),d=(k?"("===f?f:s:"-"===f||"("===f?"":f)+d,E=("s"===y?Ql[8+jl/3]:"")+E+(k&&"("===f?")":""),A)for(i=-1,o=e.length;++i<o;)if(48>(l=e.charCodeAt(i))||l>57){E=(46===l?a+e.slice(i+1):e.slice(i))+E,e=e.slice(0,i);break}}m&&!p&&(e=r(e,1/0));var C=d.length+e.length+E.length,S=C<h?new Array(h-C+1).join(t):"";switch(m&&p&&(e=r(S+e,S.length?h-E.length:1/0),S=""),n){case"<":e=d+e+E+S;break;case"=":e=d+S+e+E;break;case"^":e=S.slice(0,C=S.length>>1)+d+e+E+S.slice(C);break;default:e=S+d+e+E}return u(e)}return g=void 0===g?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),E.toString=function(){return e+""},E}return{format:f,formatPrefix:function(e,t){var n=f(((e=Il(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(Wl(t)/3))),i=Math.pow(10,-r),o=Ql[8+r/3];return function(e){return n(i*e)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),zl=Fl.format,Ul=Fl.formatPrefix;var Xl=function(e,t,n,r){var i,o=xi(e,t,n);switch((r=Il(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(i=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Wl(t)/3)))-Wl(Math.abs(e)))}(o,a))||(r.precision=i),Ul(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Wl(t)-Wl(e))+1}(o,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(e){return Math.max(0,-Wl(Math.abs(e)))}(o))||(r.precision=i-2*("%"===r.type))}return zl(r)};function Gl(e){var t=e.domain;return e.ticks=function(e){var n=t();return yi(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return Xl(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,i=t(),o=0,a=i.length-1,u=i[o],l=i[a];return l<u&&(r=u,u=l,l=r,r=o,o=a,a=r),(r=bi(u,l,n))>0?r=bi(u=Math.floor(u/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=bi(u=Math.ceil(u*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(l/r)*r,t(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(l*r)/r,t(i)),e},e}function Kl(){var e=Bl(_l,_l);return e.copy=function(){return Ol(e,Kl())},vl.apply(e,arguments),Gl(e)}var Zl=new Date,Jl=new Date;function es(e,t,n,r){function i(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return i.floor=function(t){return e(t=new Date(+t)),t},i.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},i.round=function(e){var t=i(e),n=i.ceil(e);return e-t<n-e?t:n},i.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},i.range=function(n,r,o){var a,u=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return u;do{u.push(a=new Date(+n)),t(n,o),e(n)}while(a<n&&n<r);return u},i.filter=function(n){return es((function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),(function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););}))},n&&(i.count=function(t,r){return Zl.setTime(+t),Jl.setTime(+r),e(Zl),e(Jl),Math.floor(n(Zl,Jl))},i.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?i.filter(r?function(t){return r(t)%e==0}:function(t){return i.count(0,t)%e==0}):i:null}),i}var ts=es((function(e){e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,t){e.setFullYear(e.getFullYear()+t)}),(function(e,t){return t.getFullYear()-e.getFullYear()}),(function(e){return e.getFullYear()}));ts.every=function(e){return isFinite(e=Math.floor(e))&&e>0?es((function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n*e)})):null};var ns=ts,rs=(ts.range,es((function(e){e.setDate(1),e.setHours(0,0,0,0)}),(function(e,t){e.setMonth(e.getMonth()+t)}),(function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())}),(function(e){return e.getMonth()})));rs.range;function is(e){return es((function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+7*t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/6048e5}))}var os=is(0),as=is(1),us=is(2),ls=is(3),ss=is(4),cs=is(5),fs=is(6),ds=(os.range,as.range,us.range,ls.range,ss.range,cs.range,fs.range,es((function(e){e.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5}),(function(e){return e.getDate()-1}))),ps=ds,hs=(ds.range,es((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds()-6e4*e.getMinutes())}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getHours()}))),ms=(hs.range,es((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds())}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getMinutes()}))),gs=(ms.range,es((function(e){e.setTime(e-e.getMilliseconds())}),(function(e,t){e.setTime(+e+1e3*t)}),(function(e,t){return(t-e)/1e3}),(function(e){return e.getUTCSeconds()}))),vs=(gs.range,es((function(){}),(function(e,t){e.setTime(+e+t)}),(function(e,t){return t-e})));vs.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?es((function(t){t.setTime(Math.floor(t/e)*e)}),(function(t,n){t.setTime(+t+n*e)}),(function(t,n){return(n-t)/e})):vs:null};vs.range;function ys(e){return es((function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+7*t)}),(function(e,t){return(t-e)/6048e5}))}var bs=ys(0),xs=ys(1),ws=ys(2),As=ys(3),Es=ys(4),ks=ys(5),Cs=ys(6),Ss=(bs.range,xs.range,ws.range,As.range,Es.range,ks.range,Cs.range,es((function(e){e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+t)}),(function(e,t){return(t-e)/864e5}),(function(e){return e.getUTCDate()-1}))),_s=Ss,Ts=(Ss.range,es((function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)}),(function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()}),(function(e){return e.getUTCFullYear()})));Ts.every=function(e){return isFinite(e=Math.floor(e))&&e>0?es((function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null};var Ms=Ts;Ts.range;function Ps(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function Ns(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function Os(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}var Rs,Bs={"-":"",_:" ",0:"0"},Ds=/^\s*\d+/,Is=/^%/,Ls=/[\\^$*+?|[\]().{}]/g;function js(e,t,n){var r=e<0?"-":"",i=(r?-e:e)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(t)+i:i)}function Fs(e){return e.replace(Ls,"\\$&")}function zs(e){return new RegExp("^(?:"+e.map(Fs).join("|")+")","i")}function Us(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function Hs(e,t,n){var r=Ds.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function Ws(e,t,n){var r=Ds.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function $s(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function Vs(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function Ys(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function qs(e,t,n){var r=Ds.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function Qs(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Xs(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Gs(e,t,n){var r=Ds.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function Ks(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function Zs(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function Js(e,t,n){var r=Ds.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function ec(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function tc(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function nc(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function rc(e,t,n){var r=Ds.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function ic(e,t,n){var r=Ds.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function oc(e,t,n){var r=Is.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function ac(e,t,n){var r=Ds.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function uc(e,t,n){var r=Ds.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function lc(e,t){return js(e.getDate(),t,2)}function sc(e,t){return js(e.getHours(),t,2)}function cc(e,t){return js(e.getHours()%12||12,t,2)}function fc(e,t){return js(1+ps.count(ns(e),e),t,3)}function dc(e,t){return js(e.getMilliseconds(),t,3)}function pc(e,t){return dc(e,t)+"000"}function hc(e,t){return js(e.getMonth()+1,t,2)}function mc(e,t){return js(e.getMinutes(),t,2)}function gc(e,t){return js(e.getSeconds(),t,2)}function vc(e){var t=e.getDay();return 0===t?7:t}function yc(e,t){return js(os.count(ns(e)-1,e),t,2)}function bc(e,t){var n=e.getDay();return e=n>=4||0===n?ss(e):ss.ceil(e),js(ss.count(ns(e),e)+(4===ns(e).getDay()),t,2)}function xc(e){return e.getDay()}function wc(e,t){return js(as.count(ns(e)-1,e),t,2)}function Ac(e,t){return js(e.getFullYear()%100,t,2)}function Ec(e,t){return js(e.getFullYear()%1e4,t,4)}function kc(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+js(t/60|0,"0",2)+js(t%60,"0",2)}function Cc(e,t){return js(e.getUTCDate(),t,2)}function Sc(e,t){return js(e.getUTCHours(),t,2)}function _c(e,t){return js(e.getUTCHours()%12||12,t,2)}function Tc(e,t){return js(1+_s.count(Ms(e),e),t,3)}function Mc(e,t){return js(e.getUTCMilliseconds(),t,3)}function Pc(e,t){return Mc(e,t)+"000"}function Nc(e,t){return js(e.getUTCMonth()+1,t,2)}function Oc(e,t){return js(e.getUTCMinutes(),t,2)}function Rc(e,t){return js(e.getUTCSeconds(),t,2)}function Bc(e){var t=e.getUTCDay();return 0===t?7:t}function Dc(e,t){return js(bs.count(Ms(e)-1,e),t,2)}function Ic(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Es(e):Es.ceil(e),js(Es.count(Ms(e),e)+(4===Ms(e).getUTCDay()),t,2)}function Lc(e){return e.getUTCDay()}function jc(e,t){return js(xs.count(Ms(e)-1,e),t,2)}function Fc(e,t){return js(e.getUTCFullYear()%100,t,2)}function zc(e,t){return js(e.getUTCFullYear()%1e4,t,4)}function Uc(){return"+0000"}function Hc(){return"%"}function Wc(e){return+e}function $c(e){return Math.floor(+e/1e3)}!function(e){Rs=function(e){var t=e.dateTime,n=e.date,r=e.time,i=e.periods,o=e.days,a=e.shortDays,u=e.months,l=e.shortMonths,s=zs(i),c=Us(i),f=zs(o),d=Us(o),p=zs(a),h=Us(a),m=zs(u),g=Us(u),v=zs(l),y=Us(l),b={a:function(e){return a[e.getDay()]},A:function(e){return o[e.getDay()]},b:function(e){return l[e.getMonth()]},B:function(e){return u[e.getMonth()]},c:null,d:lc,e:lc,f:pc,H:sc,I:cc,j:fc,L:dc,m:hc,M:mc,p:function(e){return i[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:Wc,s:$c,S:gc,u:vc,U:yc,V:bc,w:xc,W:wc,x:null,X:null,y:Ac,Y:Ec,Z:kc,"%":Hc},x={a:function(e){return a[e.getUTCDay()]},A:function(e){return o[e.getUTCDay()]},b:function(e){return l[e.getUTCMonth()]},B:function(e){return u[e.getUTCMonth()]},c:null,d:Cc,e:Cc,f:Pc,H:Sc,I:_c,j:Tc,L:Mc,m:Nc,M:Oc,p:function(e){return i[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:Wc,s:$c,S:Rc,u:Bc,U:Dc,V:Ic,w:Lc,W:jc,x:null,X:null,y:Fc,Y:zc,Z:Uc,"%":Hc},w={a:function(e,t,n){var r=p.exec(t.slice(n));return r?(e.w=h[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=f.exec(t.slice(n));return r?(e.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=v.exec(t.slice(n));return r?(e.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=m.exec(t.slice(n));return r?(e.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return k(e,t,n,r)},d:Zs,e:Zs,f:ic,H:ec,I:ec,j:Js,L:rc,m:Ks,M:tc,p:function(e,t,n){var r=s.exec(t.slice(n));return r?(e.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:Gs,Q:ac,s:uc,S:nc,u:Ws,U:$s,V:Vs,w:Hs,W:Ys,x:function(e,t,r){return k(e,n,t,r)},X:function(e,t,n){return k(e,r,t,n)},y:Qs,Y:qs,Z:Xs,"%":oc};function A(e,t){return function(n){var r,i,o,a=[],u=-1,l=0,s=e.length;for(n instanceof Date||(n=new Date(+n));++u<s;)37===e.charCodeAt(u)&&(a.push(e.slice(l,u)),null!=(i=Bs[r=e.charAt(++u)])?r=e.charAt(++u):i="e"===r?" ":"0",(o=t[r])&&(r=o(n,i)),a.push(r),l=u+1);return a.push(e.slice(l,u)),a.join("")}}function E(e,t){return function(n){var r,i,o=Os(1900,void 0,1);if(k(o,e,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(t&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Ns(Os(o.y,0,1))).getUTCDay(),r=i>4||0===i?xs.ceil(r):xs(r),r=_s.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Ps(Os(o.y,0,1))).getDay(),r=i>4||0===i?as.ceil(r):as(r),r=ps.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ns(Os(o.y,0,1)).getUTCDay():Ps(Os(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ns(o)):Ps(o)}}function k(e,t,n,r){for(var i,o,a=0,u=t.length,l=n.length;a<u;){if(r>=l)return-1;if(37===(i=t.charCodeAt(a++))){if(i=t.charAt(a++),!(o=w[i in Bs?t.charAt(a++):i])||(r=o(e,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return b.x=A(n,b),b.X=A(r,b),b.c=A(t,b),x.x=A(n,x),x.X=A(r,x),x.c=A(t,x),{format:function(e){var t=A(e+="",b);return t.toString=function(){return e},t},parse:function(e){var t=E(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=A(e+="",x);return t.toString=function(){return e},t},utcParse:function(e){var t=E(e+="",!0);return t.toString=function(){return e},t}}}(e),Rs.format,Rs.parse,Rs.utcFormat,Rs.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Vc=es((function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCMonth(e.getUTCMonth()+t)}),(function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())}),(function(e){return e.getUTCMonth()})),Yc=(Vc.range,es((function(e){e.setUTCMinutes(0,0,0)}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getUTCHours()}))),qc=(Yc.range,es((function(e){e.setUTCSeconds(0,0)}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getUTCMinutes()})));qc.range;var Qc=function(e){return function(){return e}};function Xc(e){this._context=e}Xc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};var Gc=function(e){return new Xc(e)};function Kc(e){return e[0]}function Zc(e){return e[1]}function Jc(){this._=null}function ef(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function tf(e,t){var n=t,r=t.R,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function nf(e,t){var n=t,r=t.L,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function rf(e){for(;e.L;)e=e.L;return e}Jc.prototype={constructor:Jc,insert:function(e,t){var n,r,i;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=rf(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.R&&(tf(this,n),n=(e=n).U),n.C=!1,r.C=!0,nf(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.L&&(nf(this,n),n=(e=n).U),n.C=!1,r.C=!0,tf(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,i=e.U,o=e.L,a=e.R;if(n=o?a?rf(a):o:a,i?i.L===e?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=e.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=e.U,e=n.R,i.L=e,n.R=a,a.U=n):(n.U=i,i=n,e=n.R)):(r=e.C,e=n),e&&(e.U=i),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===i.L){if((t=i.R).C&&(t.C=!1,i.C=!0,tf(this,i),t=i.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,nf(this,t),t=i.R),t.C=i.C,i.C=t.R.C=!1,tf(this,i),e=this._;break}}else if((t=i.L).C&&(t.C=!1,i.C=!0,nf(this,i),t=i.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,tf(this,t),t=i.L),t.C=i.C,i.C=t.L.C=!1,nf(this,i),e=this._;break}t.C=!0,e=i,i=i.U}while(!e.C);e&&(e.C=!1)}}};var of=Jc;function af(e,t,n,r){var i=[null,null],o=Pf.push(i)-1;return i.left=e,i.right=t,n&&lf(i,e,t,n),r&&lf(i,t,e,r),Tf[e.index].halfedges.push(o),Tf[t.index].halfedges.push(o),i}function uf(e,t,n){var r=[t,n];return r.left=e,r}function lf(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function sf(e,t,n,r,i){var o,a=e[0],u=e[1],l=a[0],s=a[1],c=0,f=1,d=u[0]-l,p=u[1]-s;if(o=t-l,d||!(o>0)){if(o/=d,d<0){if(o<c)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>c&&(c=o)}if(o=r-l,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>c&&(c=o)}else if(d>0){if(o<c)return;o<f&&(f=o)}if(o=n-s,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>c&&(c=o)}if(o=i-s,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(e[0]=[l+c*d,s+c*p]),f<1&&(e[1]=[l+f*d,s+f*p]),!0)}}}}}function cf(e,t,n,r,i){var o=e[1];if(o)return!0;var a,u,l=e[0],s=e.left,c=e.right,f=s[0],d=s[1],p=c[0],h=c[1],m=(f+p)/2,g=(d+h)/2;if(h===d){if(m<t||m>=r)return;if(f>p){if(l){if(l[1]>=i)return}else l=[m,n];o=[m,i]}else{if(l){if(l[1]<n)return}else l=[m,i];o=[m,n]}}else if(u=g-(a=(f-p)/(h-d))*m,a<-1||a>1)if(f>p){if(l){if(l[1]>=i)return}else l=[(n-u)/a,n];o=[(i-u)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-u)/a,i];o=[(n-u)/a,n]}else if(d<h){if(l){if(l[0]>=r)return}else l=[t,a*t+u];o=[r,a*r+u]}else{if(l){if(l[0]<t)return}else l=[r,a*r+u];o=[t,a*t+u]}return e[0]=l,e[1]=o,!0}function ff(e,t){var n=e.site,r=t.left,i=t.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=t[1],i=t[0]):(r=t[0],i=t[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function df(e,t){return t[+(t.left!==e.site)]}function pf(e,t){return t[+(t.left===e.site)]}var hf,mf=[];function gf(){ef(this),this.x=this.y=this.arc=this.site=this.cy=null}function vf(e){var t=e.P,n=e.N;if(t&&n){var r=t.site,i=e.site,o=n.site;if(r!==o){var a=i[0],u=i[1],l=r[0]-a,s=r[1]-u,c=o[0]-a,f=o[1]-u,d=2*(l*f-s*c);if(!(d>=-Of)){var p=l*l+s*s,h=c*c+f*f,m=(f*p-s*h)/d,g=(l*h-c*p)/d,v=mf.pop()||new gf;v.arc=e,v.site=i,v.x=m+a,v.y=(v.cy=g+u)+Math.sqrt(m*m+g*g),e.circle=v;for(var y=null,b=Mf._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){y=b.P;break}b=b.L}else{if(!b.R){y=b;break}b=b.R}Mf.insert(y,v),y||(hf=v)}}}}function yf(e){var t=e.circle;t&&(t.P||(hf=t.N),Mf.remove(t),mf.push(t),ef(t),e.circle=null)}var bf=[];function xf(){ef(this),this.edge=this.site=this.circle=null}function wf(e){var t=bf.pop()||new xf;return t.site=e,t}function Af(e){yf(e),_f.remove(e),bf.push(e),ef(e)}function Ef(e){var t=e.circle,n=t.x,r=t.cy,i=[n,r],o=e.P,a=e.N,u=[e];Af(e);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<Nf&&Math.abs(r-l.circle.cy)<Nf;)o=l.P,u.unshift(l),Af(l),l=o;u.unshift(l),yf(l);for(var s=a;s.circle&&Math.abs(n-s.circle.x)<Nf&&Math.abs(r-s.circle.cy)<Nf;)a=s.N,u.push(s),Af(s),s=a;u.push(s),yf(s);var c,f=u.length;for(c=1;c<f;++c)s=u[c],l=u[c-1],lf(s.edge,l.site,s.site,i);l=u[0],(s=u[f-1]).edge=af(l.site,s.site,null,i),vf(l),vf(s)}function kf(e){for(var t,n,r,i,o=e[0],a=e[1],u=_f._;u;)if((r=Cf(u,a)-o)>Nf)u=u.L;else{if(!((i=o-Sf(u,a))>Nf)){r>-Nf?(t=u.P,n=u):i>-Nf?(t=u,n=u.N):t=n=u;break}if(!u.R){t=u;break}u=u.R}!function(e){Tf[e.index]={site:e,halfedges:[]}}(e);var l=wf(e);if(_f.insert(t,l),t||n){if(t===n)return yf(t),n=wf(t.site),_f.insert(l,n),l.edge=n.edge=af(t.site,l.site),vf(t),void vf(n);if(n){yf(t),yf(n);var s=t.site,c=s[0],f=s[1],d=e[0]-c,p=e[1]-f,h=n.site,m=h[0]-c,g=h[1]-f,v=2*(d*g-p*m),y=d*d+p*p,b=m*m+g*g,x=[(g*y-p*b)/v+c,(d*b-m*y)/v+f];lf(n.edge,s,h,x),l.edge=af(s,e,null,x),n.edge=af(e,h,null,x),vf(t),vf(n)}else l.edge=af(t.site,l.site)}}function Cf(e,t){var n=e.site,r=n[0],i=n[1],o=i-t;if(!o)return r;var a=e.P;if(!a)return-1/0;var u=(n=a.site)[0],l=n[1],s=l-t;if(!s)return u;var c=u-r,f=1/o-1/s,d=c/s;return f?(-d+Math.sqrt(d*d-2*f*(c*c/(-2*s)-l+s/2+i-o/2)))/f+r:(r+u)/2}function Sf(e,t){var n=e.N;if(n)return Cf(n,t);var r=e.site;return r[1]===t?r[0]:1/0}var _f,Tf,Mf,Pf,Nf=1e-6,Of=1e-12;function Rf(e,t){return t[1]-e[1]||t[0]-e[0]}function Bf(e,t){var n,r,i,o=e.sort(Rf).pop();for(Pf=[],Tf=new Array(e.length),_f=new of,Mf=new of;;)if(i=hf,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(kf(o),n=o[0],r=o[1]),o=e.pop();else{if(!i)break;Ef(i.arc)}if(function(){for(var e,t,n,r,i=0,o=Tf.length;i<o;++i)if((e=Tf[i])&&(r=(t=e.halfedges).length)){var a=new Array(r),u=new Array(r);for(n=0;n<r;++n)a[n]=n,u[n]=ff(e,Pf[t[n]]);for(a.sort((function(e,t){return u[t]-u[e]})),n=0;n<r;++n)u[n]=t[a[n]];for(n=0;n<r;++n)t[n]=u[n]}}(),t){var a=+t[0][0],u=+t[0][1],l=+t[1][0],s=+t[1][1];!function(e,t,n,r){for(var i,o=Pf.length;o--;)cf(i=Pf[o],e,t,n,r)&&sf(i,e,t,n,r)&&(Math.abs(i[0][0]-i[1][0])>Nf||Math.abs(i[0][1]-i[1][1])>Nf)||delete Pf[o]}(a,u,l,s),function(e,t,n,r){var i,o,a,u,l,s,c,f,d,p,h,m,g=Tf.length,v=!0;for(i=0;i<g;++i)if(o=Tf[i]){for(a=o.site,u=(l=o.halfedges).length;u--;)Pf[l[u]]||l.splice(u,1);for(u=0,s=l.length;u<s;)h=(p=pf(o,Pf[l[u]]))[0],m=p[1],f=(c=df(o,Pf[l[++u%s]]))[0],d=c[1],(Math.abs(h-f)>Nf||Math.abs(m-d)>Nf)&&(l.splice(u,0,Pf.push(uf(a,p,Math.abs(h-e)<Nf&&r-m>Nf?[e,Math.abs(f-e)<Nf?d:r]:Math.abs(m-r)<Nf&&n-h>Nf?[Math.abs(d-r)<Nf?f:n,r]:Math.abs(h-n)<Nf&&m-t>Nf?[n,Math.abs(f-n)<Nf?d:t]:Math.abs(m-t)<Nf&&h-e>Nf?[Math.abs(d-t)<Nf?f:e,t]:null))-1),++s);s&&(v=!1)}if(v){var y,b,x,w=1/0;for(i=0,v=null;i<g;++i)(o=Tf[i])&&(x=(y=(a=o.site)[0]-e)*y+(b=a[1]-t)*b)<w&&(w=x,v=o);if(v){var A=[e,t],E=[e,r],k=[n,r],C=[n,t];v.halfedges.push(Pf.push(uf(a=v.site,A,E))-1,Pf.push(uf(a,E,k))-1,Pf.push(uf(a,k,C))-1,Pf.push(uf(a,C,A))-1)}}for(i=0;i<g;++i)(o=Tf[i])&&(o.halfedges.length||delete Tf[i])}(a,u,l,s)}this.edges=Pf,this.cells=Tf,_f=Mf=Pf=Tf=null}Bf.prototype={constructor:Bf,polygons:function(){var e=this.edges;return this.cells.map((function(t){var n=t.halfedges.map((function(n){return df(t,e[n])}));return n.data=t.site.data,n}))},triangles:function(){var e=[],t=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,u,l,s,c=n.site,f=-1,d=t[i[o-1]],p=d.left===c?d.right:d.left;++f<o;)a=p,p=(d=t[i[f]]).left===c?d.right:d.left,a&&p&&r<a.index&&r<p.index&&(l=a,s=p,((u=c)[0]-s[0])*(l[1]-u[1])-(u[0]-l[0])*(s[1]-u[1])<0)&&e.push([c.data,a.data,p.data])})),e},links:function(){return this.edges.filter((function(e){return e.right})).map((function(e){return{source:e.left.data,target:e.right.data}}))},find:function(e,t,n){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var l=e-i.site[0],s=t-i.site[1],c=l*l+s*s;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],u=r.left;if(u!==i.site&&u||(u=r.right)){var l=e-u[0],s=t-u[1],f=l*l+s*s;f<c&&(c=f,a=u.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}};Math.SQRT2;function Df(e,t,n){this.k=e,this.x=t,this.y=n}Df.prototype={constructor:Df,scale:function(e){return 1===e?this:new Df(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new Df(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Df(1,0,0);Df.prototype;function If(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Lf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Lf(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var jf=["Year","AMERICAS","APAC","EMEA","Capex"],Ff=function(e){var t=e.data,n=e.dimensions,o={top:n.height/10,right:n.width/10,bottom:n.height/10,left:n.width/10},a=If(Object(r.useState)(null),2),u=a[0],l=a[1],s=jf.slice(1,jf.length-1),c=El().domain(t.map((function(e){return e.Year}))).rangeRound([o.left,n.width-o.right]).paddingInner(.1),f=El().domain(s).rangeRound([0,c.bandwidth()]).padding(.05),d=Kl().domain([0,wi(t,(function(e){return wi(s,(function(t){return e[t]}))}))]).nice().rangeRound([n.height-o.bottom,o.top]),p=Kl().domain([0,wi(t,(function(e){return e.Capex}))]).nice().rangeRound([n.height-o.bottom,o.top]),h=d.ticks(),m=p.ticks(),g=Al().range(["#00467F","#6583A7","#98AAC3","#CCD3E0"]),v=function(){var e=Kc,t=Zc,n=Qc(!0),r=null,i=Gc,o=null;function a(a){var u,l,s,c=a.length,f=!1;for(null==r&&(o=i(s=Ju())),u=0;u<=c;++u)!(u<c&&n(l=a[u],u,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+e(l,u,a),+t(l,u,a));if(s)return o=null,s+""||null}return a.x=function(t){return arguments.length?(e="function"==typeof t?t:Qc(+t),a):e},a.y=function(e){return arguments.length?(t="function"==typeof e?e:Qc(+e),a):t},a.defined=function(e){return arguments.length?(n="function"==typeof e?e:Qc(!!e),a):n},a.curve=function(e){return arguments.length?(i=e,null!=r&&(o=i(r)),a):i},a.context=function(e){return arguments.length?(null==e?r=o=null:o=i(r=e),a):r},a}().defined((function(e){return!isNaN(e.Capex)})).x((function(e){return c(e.Year)+c.bandwidth()/2})).y((function(e){return p(e.Capex)}));return i.a.createElement("svg",{width:n.width,height:n.height},i.a.createElement("g",{className:"title"},i.a.createElement("text",{x:n.width/2,y:o.top/2,textAnchor:"middle",fontSize:o.top/3,fontWeight:"bold"},"ANNUAL COST BY REGION")),i.a.createElement("g",{className:"bars"},t.map((function(e,t){return i.a.createElement("g",{key:t,transform:"translate(".concat(c(e.Year),",0)")},s.map((function(t,n){return i.a.createElement(ui,{key:n,title:"Annual Cost: $".concat(e[t],"MM"),placement:"top"},i.a.createElement("rect",{className:u===t?"hoverBar":"bar",x:f(t),y:d(e[t]),width:f.bandwidth(),height:d(0)-d(e[t]),fill:g(t),onMouseEnter:function(){return l(t)},onMouseLeave:function(){return l(null)}}))})))}))),i.a.createElement("g",{className:"line"},i.a.createElement("path",{d:v(t),fill:"none",stroke:"#0093D0",strokeWidth:2}),t.map((function(e,t){return i.a.createElement(ui,{key:t,title:"Capex: $".concat(e.Capex,"MM"),placement:"top"},i.a.createElement("circle",{cx:c(e.Year)+c.bandwidth()/2,cy:p(e.Capex),r:"4",fill:"#0093D0"}))}))),i.a.createElement("g",{className:"legend",transform:"translate(".concat(0,",0)"),textAnchor:"end"},g.domain().slice().map((function(e,t){return i.a.createElement("g",{key:t,transform:"translate(".concat((t+.75)*((n.width-o.left-o.right)/g.domain().slice().length)+o.left,",").concat(o.top*(2/3),")")},i.a.createElement("rect",{x:-o.top/4,y:0,width:o.top/4,height:o.top/4,fill:u===e?"#0093d0":g(e)}),i.a.createElement("text",{x:-o.top/3,y:o.top/8,dy:o.top/10,fontSize:o.top/4},e))}))),i.a.createElement("g",{className:"x-axis"},i.a.createElement("line",{x1:o.left,y1:n.height-o.bottom,x2:n.width-o.right,y2:n.height-o.bottom,style:{stroke:"black",strokeWidth:"1"}}),c.domain().slice().map((function(e,t){var r=c(e)+c.bandwidth()/2;return i.a.createElement("g",{key:t},i.a.createElement("line",{x1:r,y1:n.height-o.bottom,x2:r,y2:n.height-o.bottom+5,style:{stroke:"black",strokeWidth:"1"}}),i.a.createElement("text",{x:r,y:n.height-o.bottom/2,textAnchor:"middle",fontSize:o.top/4},e))})),i.a.createElement("text",{x:n.width/2,y:n.height-o.bottom/8,textAnchor:"middle",fontSize:o.bottom/4,fontWeight:"bold"},"YEAR")),i.a.createElement("g",{className:"y-axis"},i.a.createElement("line",{x1:o.left,y1:o.top,x2:o.left,y2:n.height-o.bottom,style:{stroke:"black",strokeWidth:"1"}}),h.map((function(e,t){return i.a.createElement("g",{key:t},i.a.createElement("line",{x1:o.left,y1:d(e),x2:o.left-o.left/20,y2:d(e),style:{stroke:"black",strokeWidth:"1"}}),i.a.createElement("text",{x:o.left/1.5,y:d(e),dy:"0.35em",fontSize:o.left/8,textAnchor:"middle"},"$",e,"MM"))})),i.a.createElement("text",{x:-n.height/2-o.top/2+o.bottom/2,y:o.left/6,textAnchor:"middle",fontSize:o.left/6,fontWeight:"bold",transform:"rotate(-90 0 0 )"},"AMERICAS, APAC, EMEA")),i.a.createElement("g",{className:"y-axis-secondary"},i.a.createElement("line",{x1:n.width-o.right,y1:o.top,x2:n.width-o.right,y2:n.height-o.bottom,style:{stroke:"black",strokeWidth:"1"}}),m.map((function(e,t){return i.a.createElement("g",{key:t},i.a.createElement("line",{x1:n.width-o.right,y1:p(e),x2:n.width-o.right+o.right/20,y2:p(e),style:{stroke:"black",strokeWidth:"1"}}),i.a.createElement("text",{x:n.width-o.right*(2/3),y:p(e),dy:"0.35em",fontSize:o.right/8,textAnchor:"middle"},"$",e,"MM"))})),i.a.createElement("text",{x:n.height/2+o.top/2-o.bottom/2,y:-n.width+o.right/6,textAnchor:"middle",fontSize:o.right/6,fontWeight:"bold",transform:"rotate(90 0 0 )"},"Capex")))};function zf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Uf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Uf(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Uf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Hf=[{Year:"2014",AMERICAS:134,APAC:64,EMEA:53,Capex:50},{Year:"2015",AMERICAS:137,APAC:65,EMEA:54,Capex:51},{Year:"2016",AMERICAS:140,APAC:66,EMEA:55,Capex:16},{Year:"2017",AMERICAS:136,APAC:64,EMEA:53,Capex:52},{Year:"2018",AMERICAS:129,APAC:61,EMEA:50,Capex:51},{Year:"2019",AMERICAS:133,APAC:63,EMEA:52,Capex:10},{Year:"2020",AMERICAS:137,APAC:65,EMEA:53,Capex:2}];function Wf(){var e=Object(r.useRef)(null),t=a(e),n=t.width,o=t.height,u=zf(Object(r.useState)(Hf),1)[0];return i.a.createElement(i.a.Fragment,null,i.a.createElement("div",null,i.a.createElement("p",null,"One of the holy grails of modern web visualization is combining the strength of D3 (Data Driven Documents) with the power of React. Using the correct combinations can lead to beautiful adaptive and interactive visualizations of data.")),i.a.createElement("div",{ref:e},n&&o&&i.a.createElement(Ff,{data:u,dimensions:{width:"480",height:"240"}})))}},,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,".menu {\n  display: flex;\n  flex-flow: column nowrap;\n}\n\n.menu ul {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\n.menu li {\n  margin-bottom: 0.5em;\n  border-radius: 0.25em;\n}\n\n.menu li a {\n  /* display: block; */\n  text-decoration: none;\n  padding: 8px;\n  color: rgba(0, 0, 0, 0.67);\n}\n\n.menu li:hover {\n}\n\na,\na:hover,\na:visited {\n  font-size: 18px;\n  line-height: 1.5em;\n  /* margin: 0.5em 0em; */\n  color: rgba(0, 0, 0, 0.67);\n}\n\na:active {\n  color: rgba(0, 0, 0, 0.25);\n}\n","",{version:3,sources:["Menu.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,wBAAwB;AAC1B;;AAEA;EACE,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,oBAAoB;EACpB,qBAAqB;AACvB;;AAEA;EACE,oBAAoB;EACpB,qBAAqB;EACrB,YAAY;EACZ,0BAA0B;AAC5B;;AAEA;AACA;;AAEA;;;EAGE,eAAe;EACf,kBAAkB;EAClB,uBAAuB;EACvB,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B",file:"Menu.css",sourcesContent:[".menu {\n  display: flex;\n  flex-flow: column nowrap;\n}\n\n.menu ul {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\n.menu li {\n  margin-bottom: 0.5em;\n  border-radius: 0.25em;\n}\n\n.menu li a {\n  /* display: block; */\n  text-decoration: none;\n  padding: 8px;\n  color: rgba(0, 0, 0, 0.67);\n}\n\n.menu li:hover {\n}\n\na,\na:hover,\na:visited {\n  font-size: 18px;\n  line-height: 1.5em;\n  /* margin: 0.5em 0em; */\n  color: rgba(0, 0, 0, 0.67);\n}\n\na:active {\n  color: rgba(0, 0, 0, 0.25);\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,".Fortune-Teller {\n  background-color: #16a085;\n  padding: 1em;\n  border: 1px solid #f39c12;\n  border-radius: 0.5em;\n  display: grid;\n  /* width: 100%; */\n  height: 320px;\n  grid-template-columns: 6px 3fr 1fr 6px;\n  grid-template-rows: 6px auto auto auto 6px;\n  grid-template-areas: '. . . .' '. title title .' '. panel button .' '. footer footer .' '. . . .';\n  gap: 1rem;\n  place-items: stretch;\n}\n\n.FT-Header {\n  grid-area: title;\n  border: 1px solid #16a085;\n  border-radius: 0.25em;\n  box-shadow: inset 4px 4px 6px #27ae60, inset -4px -4px 6px #1abc9c;\n  padding: 24px;\n}\n\n.FT-Title {\n  font-size: 22px;\n  text-align: center;\n  color: #2c3e50;\n  text-shadow: 1px 1px 1.5px #27ae60, -1px 1px 1.5px #1abc9c;\n}\n\n.FT-SubTitle {\n  font-style: italic;\n  text-align: center;\n  text-shadow: 1px 1px 1.5px #27ae60, -1px 1px 1.5px #1abc9c;\n}\n\n.FT-Main {\n}\n\n.FT-Panel {\n  grid-area: panel;\n  text-align: center;\n  box-shadow: inset 4px 4px 6px #27ae60, inset -4px -4px 6px #1abc9c;\n  text-shadow: 1px 1px 1.5px #27ae60, -1px -1px 1.5px #1abc9c;\n}\n\n.FT-Button {\n  grid-area: button;\n  user-select: none;\n  cursor: pointer;\n  text-align: center;\n  background-color: #e74c3c;\n  border: 2px solid #e74c3c;\n  border-radius: 50%;\n  box-shadow: 4px 4px 6px #27ae60, -4px -4px 6px #1abc9c, inset -4px -4px 6px #e67e22, inset 4px 4px 6px #f1c40f;\n  /* text-shadow: 1px 1px 1.5px #e67e22, -1px -1px 1.5px #f1c40f; */\n  place-self: center;\n  padding: 1em;\n}\n\n.FT-Button:active {\n  grid-area: button;\n  cursor: pointer;\n  text-align: center;\n  background-color: #e74c3c;\n  /* border: 1px solid #c0392b; */\n  border-radius: 50%;\n  box-shadow: inset -4px -4px 6px #f1c40f, inset 4px 4px 6px #e67e22;\n  /* text-shadow: 1px 1px 1.5px #f1c40f, -1px -1px 1.5px #e67e22; */\n  place-self: center;\n  padding: 1em;\n}\n\n.FT-Footer {\n  grid-area: footer;\n  text-align: center;\n  font-style: italic;\n  text-shadow: 1px 1px 1.5px #27ae60, -1px 1px 1.5px #1abc9c;\n}\n","",{version:3,sources:["FortuneTeller.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB,YAAY;EACZ,yBAAyB;EACzB,oBAAoB;EACpB,aAAa;EACb,iBAAiB;EACjB,aAAa;EACb,sCAAsC;EACtC,0CAA0C;EAC1C,iGAAiG;EACjG,SAAS;EACT,oBAAoB;AACtB;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,qBAAqB;EACrB,kEAAkE;EAClE,aAAa;AACf;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,cAAc;EACd,0DAA0D;AAC5D;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,0DAA0D;AAC5D;;AAEA;AACA;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,kEAAkE;EAClE,2DAA2D;AAC7D;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,eAAe;EACf,kBAAkB;EAClB,yBAAyB;EACzB,yBAAyB;EACzB,kBAAkB;EAClB,8GAA8G;EAC9G,iEAAiE;EACjE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,kBAAkB;EAClB,yBAAyB;EACzB,+BAA+B;EAC/B,kBAAkB;EAClB,kEAAkE;EAClE,iEAAiE;EACjE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,0DAA0D;AAC5D",file:"FortuneTeller.css",sourcesContent:[".Fortune-Teller {\n  background-color: #16a085;\n  padding: 1em;\n  border: 1px solid #f39c12;\n  border-radius: 0.5em;\n  display: grid;\n  /* width: 100%; */\n  height: 320px;\n  grid-template-columns: 6px 3fr 1fr 6px;\n  grid-template-rows: 6px auto auto auto 6px;\n  grid-template-areas: '. . . .' '. title title .' '. panel button .' '. footer footer .' '. . . .';\n  gap: 1rem;\n  place-items: stretch;\n}\n\n.FT-Header {\n  grid-area: title;\n  border: 1px solid #16a085;\n  border-radius: 0.25em;\n  box-shadow: inset 4px 4px 6px #27ae60, inset -4px -4px 6px #1abc9c;\n  padding: 24px;\n}\n\n.FT-Title {\n  font-size: 22px;\n  text-align: center;\n  color: #2c3e50;\n  text-shadow: 1px 1px 1.5px #27ae60, -1px 1px 1.5px #1abc9c;\n}\n\n.FT-SubTitle {\n  font-style: italic;\n  text-align: center;\n  text-shadow: 1px 1px 1.5px #27ae60, -1px 1px 1.5px #1abc9c;\n}\n\n.FT-Main {\n}\n\n.FT-Panel {\n  grid-area: panel;\n  text-align: center;\n  box-shadow: inset 4px 4px 6px #27ae60, inset -4px -4px 6px #1abc9c;\n  text-shadow: 1px 1px 1.5px #27ae60, -1px -1px 1.5px #1abc9c;\n}\n\n.FT-Button {\n  grid-area: button;\n  user-select: none;\n  cursor: pointer;\n  text-align: center;\n  background-color: #e74c3c;\n  border: 2px solid #e74c3c;\n  border-radius: 50%;\n  box-shadow: 4px 4px 6px #27ae60, -4px -4px 6px #1abc9c, inset -4px -4px 6px #e67e22, inset 4px 4px 6px #f1c40f;\n  /* text-shadow: 1px 1px 1.5px #e67e22, -1px -1px 1.5px #f1c40f; */\n  place-self: center;\n  padding: 1em;\n}\n\n.FT-Button:active {\n  grid-area: button;\n  cursor: pointer;\n  text-align: center;\n  background-color: #e74c3c;\n  /* border: 1px solid #c0392b; */\n  border-radius: 50%;\n  box-shadow: inset -4px -4px 6px #f1c40f, inset 4px 4px 6px #e67e22;\n  /* text-shadow: 1px 1px 1.5px #f1c40f, -1px -1px 1.5px #e67e22; */\n  place-self: center;\n  padding: 1em;\n}\n\n.FT-Footer {\n  grid-area: footer;\n  text-align: center;\n  font-style: italic;\n  text-shadow: 1px 1px 1.5px #27ae60, -1px 1px 1.5px #1abc9c;\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,".contact-card {\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n}\n\n.contact-card > img {\n  /* display: block; */\n  /* float: left; */\n  margin: 0em;\n  padding: 0;\n  height: 64px;\n  width: 64px;\n}\n\n.contact-card > div > p {\n  font-size: 0.82em;\n  line-height: 1.5em;\n}\n\n.pointer {\n  cursor: pointer;\n}\n","",{version:3,sources:["Contact.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,oBAAoB;EACpB,iBAAiB;EACjB,WAAW;EACX,UAAU;EACV,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB",file:"Contact.css",sourcesContent:[".contact-card {\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n}\n\n.contact-card > img {\n  /* display: block; */\n  /* float: left; */\n  margin: 0em;\n  padding: 0;\n  height: 64px;\n  width: 64px;\n}\n\n.contact-card > div > p {\n  font-size: 0.82em;\n  line-height: 1.5em;\n}\n\n.pointer {\n  cursor: pointer;\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,"","",{version:3,sources:[],names:[],mappings:"",file:"App.css"}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,"body {\n  font-family: 'Open Sans', 'Courier New', Courier, monospace;\n  background-color: #f39c12;\n  color: #2c3e50;\n  /* margin: 0; */\n}\n\nh1 {\n  font-size: 44px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em 0em; */\n}\n\nh2 {\n  font-size: 33px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em 0em; */\n  color: #34495e;\n}\n\nh3 {\n  font-size: 22px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em 0em; */\n  color: #34495e;\n}\n\np {\n  font-family: 'Roboto', 'Courier New', Courier, monospace;\n  font-size: 16px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em; */\n  color: #34495e;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n.centered {\n  text-align: center;\n}\n\n.righted {\n  text-align: right;\n}\n\n.sidep {\n  font-family: 'Roboto', 'Courier New', Courier, monospace;\n  font-size: 14px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em; */\n  color: #34495e;\n}\n\n.code {\n  font-family: 'Source Code Pro', 'Courier New', Courier, monospace;\n  font-size: 14px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em; */\n  color: #34495e;\n}\n\na,\na:hover,\na:visited {\n  color: #34495e;\n}\n\na:active {\n  color: #2c3e50;\n}\n\n.fa-js-square {\n  color: #f1c40f;\n}\n\n.fa-html5 {\n  color: #e74c3c;\n}\n\n.fa-css3-alt {\n  color: #2980b9;\n}\n\n.fa-react {\n  color: #3498db;\n}\n\n.fa-less {\n  color: #2980b9;\n}\n\n.fa-sass {\n  color: #e74c3c;\n}\n\n.fa-sketch {\n  color: #e67e22;\n}\n\n.fa-raspberry-pi {\n  color: #c0392b;\n}\n\n.fa-node-js {\n  color: #27ae60;\n}\n\n.fa-npm {\n  color: #c0392b;\n}\n\n.fa-python {\n  color: #27ae60;\n}\n\n.fa-aws {\n  color: #d35400;\n}\n\n.fa-docker {\n  color: #2980b9;\n}\n\n.fa-dropbox {\n  color: #3498db;\n}\n\n.fa-git-alt {\n  color: #e74c3c;\n}\n\n.fa-apple {\n  color: #2c3e50;\n}\n\n.fa-microsoft {\n  color: #2980b9;\n}\n\n.fa-linux {\n  color: #2c3e50;\n}\n\n.fa-ubuntu {\n  color: #e74c3c;\n}\n","",{version:3,sources:["johnography.css"],names:[],mappings:"AAAA;EACE,2DAA2D;EAC3D,yBAAyB;EACzB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,eAAe;EACf,wBAAwB;AAC1B;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,eAAe;EACf,wBAAwB;EACxB,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,eAAe;EACf,wBAAwB;EACxB,cAAc;AAChB;;AAEA;EACE,wDAAwD;EACxD,eAAe;EACf,kBAAkB;EAClB,eAAe;EACf,oBAAoB;EACpB,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,wDAAwD;EACxD,eAAe;EACf,kBAAkB;EAClB,eAAe;EACf,oBAAoB;EACpB,cAAc;AAChB;;AAEA;EACE,iEAAiE;EACjE,eAAe;EACf,kBAAkB;EAClB,eAAe;EACf,oBAAoB;EACpB,cAAc;AAChB;;AAEA;;;EAGE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB",file:"johnography.css",sourcesContent:["body {\n  font-family: 'Open Sans', 'Courier New', Courier, monospace;\n  background-color: #f39c12;\n  color: #2c3e50;\n  /* margin: 0; */\n}\n\nh1 {\n  font-size: 44px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em 0em; */\n}\n\nh2 {\n  font-size: 33px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em 0em; */\n  color: #34495e;\n}\n\nh3 {\n  font-size: 22px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em 0em; */\n  color: #34495e;\n}\n\np {\n  font-family: 'Roboto', 'Courier New', Courier, monospace;\n  font-size: 16px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em; */\n  color: #34495e;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n.centered {\n  text-align: center;\n}\n\n.righted {\n  text-align: right;\n}\n\n.sidep {\n  font-family: 'Roboto', 'Courier New', Courier, monospace;\n  font-size: 14px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em; */\n  color: #34495e;\n}\n\n.code {\n  font-family: 'Source Code Pro', 'Courier New', Courier, monospace;\n  font-size: 14px;\n  line-height: 1.5em;\n  /* margin: 0; */\n  /* padding: 0.5em; */\n  color: #34495e;\n}\n\na,\na:hover,\na:visited {\n  color: #34495e;\n}\n\na:active {\n  color: #2c3e50;\n}\n\n.fa-js-square {\n  color: #f1c40f;\n}\n\n.fa-html5 {\n  color: #e74c3c;\n}\n\n.fa-css3-alt {\n  color: #2980b9;\n}\n\n.fa-react {\n  color: #3498db;\n}\n\n.fa-less {\n  color: #2980b9;\n}\n\n.fa-sass {\n  color: #e74c3c;\n}\n\n.fa-sketch {\n  color: #e67e22;\n}\n\n.fa-raspberry-pi {\n  color: #c0392b;\n}\n\n.fa-node-js {\n  color: #27ae60;\n}\n\n.fa-npm {\n  color: #c0392b;\n}\n\n.fa-python {\n  color: #27ae60;\n}\n\n.fa-aws {\n  color: #d35400;\n}\n\n.fa-docker {\n  color: #2980b9;\n}\n\n.fa-dropbox {\n  color: #3498db;\n}\n\n.fa-git-alt {\n  color: #e74c3c;\n}\n\n.fa-apple {\n  color: #2c3e50;\n}\n\n.fa-microsoft {\n  color: #2980b9;\n}\n\n.fa-linux {\n  color: #2c3e50;\n}\n\n.fa-ubuntu {\n  color: #e74c3c;\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,".container {\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-template-columns: 6px auto 6px;\n  grid-template-rows: 6px auto auto auto auto auto 6px;\n  grid-template-areas: '. . .' '. header .' '. leftmenu .' '. main .' '. rightmenu .' '.footer .' '. . .';\n  gap: 1rem;\n  place-items: start;\n}\n\n@media only screen and (min-width: 500px) {\n  .container {\n    display: grid;\n    /* width: 100vw; */\n    /* height: 100vh; */\n    /* grid-template-columns: 12px 20% auto 20% 12px; */\n    /* grid-template-rows: 12px 12.5% auto 12.5% 12px; */\n    /* grid-template-areas: '. . . . .' '. header header header .' '. leftmenu main rightmenu .' '. leftmenu footer footer .' '. . . . .'; */\n    /* gap: 1rem; */\n    /* place-items: start; */\n    grid-template: auto 1fr auto / auto 1fr auto;\n  }\n}\n\n/* .container > div {\n  background-color: #f39c12;\n  border-radius: 1rem;\n} */\n\n.header {\n  /* grid-area: header; */\n  grid-column: 1 / 4;\n}\n\n.leftmenu {\n  /* grid-area: leftmenu; */\n  grid-column: 1 / 2;\n}\n\n.main {\n  /* grid-area: main; */\n  grid-column: 2 / 3;\n}\n\n.rightmenu {\n  /* grid-area: rightmenu; */\n  grid-column: 3 / 4;\n}\n\n.footer {\n  /* grid-area: footer; */\n  grid-column: 1 / 4;\n}\n","",{version:3,sources:["grid.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,mCAAmC;EACnC,oDAAoD;EACpD,uGAAuG;EACvG,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE;IACE,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,mDAAmD;IACnD,oDAAoD;IACpD,wIAAwI;IACxI,eAAe;IACf,wBAAwB;IACxB,4CAA4C;EAC9C;AACF;;AAEA;;;GAGG;;AAEH;EACE,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;;AAEA;EACE,0BAA0B;EAC1B,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;AACpB",file:"grid.css",sourcesContent:[".container {\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-template-columns: 6px auto 6px;\n  grid-template-rows: 6px auto auto auto auto auto 6px;\n  grid-template-areas: '. . .' '. header .' '. leftmenu .' '. main .' '. rightmenu .' '.footer .' '. . .';\n  gap: 1rem;\n  place-items: start;\n}\n\n@media only screen and (min-width: 500px) {\n  .container {\n    display: grid;\n    /* width: 100vw; */\n    /* height: 100vh; */\n    /* grid-template-columns: 12px 20% auto 20% 12px; */\n    /* grid-template-rows: 12px 12.5% auto 12.5% 12px; */\n    /* grid-template-areas: '. . . . .' '. header header header .' '. leftmenu main rightmenu .' '. leftmenu footer footer .' '. . . . .'; */\n    /* gap: 1rem; */\n    /* place-items: start; */\n    grid-template: auto 1fr auto / auto 1fr auto;\n  }\n}\n\n/* .container > div {\n  background-color: #f39c12;\n  border-radius: 1rem;\n} */\n\n.header {\n  /* grid-area: header; */\n  grid-column: 1 / 4;\n}\n\n.leftmenu {\n  /* grid-area: leftmenu; */\n  grid-column: 1 / 2;\n}\n\n.main {\n  /* grid-area: main; */\n  grid-column: 2 / 3;\n}\n\n.rightmenu {\n  /* grid-area: rightmenu; */\n  grid-column: 3 / 4;\n}\n\n.footer {\n  /* grid-area: footer; */\n  grid-column: 1 / 4;\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n.n(r)()(!0);i.push([e.i,".neushadow {\n  /* background-color: #f39c12; */\n  /* border: 0.5em solid #f39c12; */\n  /* margin: 0.5em; */\n  /* padding: 1em; */\n  border: 1px solid #f39c12;\n  border-radius: 0.5em;\n  box-shadow: 4px 4px 6px #e67e22, -4px -4px 6px #f1c40f;\n}\n\nli.neushadow,\na.neushadow {\n  cursor: pointer;\n}\n\nli.neushadow:hover,\na.neushadow:hover a.neushadow:active {\n  /* -webkit-box-shadow: none; */\n  /* box-shadow: none; */\n  /* -webkit-box-shadow: inset 4px 4px 6px #e67e22, inset -4px -4px 6px #f1c40f; */\n  box-shadow: inset 4px 4px 6px #e67e22, inset -4px -4px 6px #f1c40f;\n  /* box-shadow: 4px 4px 6px #e67e22, -4px -4px 6px #f1c40f, inset 4px 4px 6px #e67e22, inset -4px -4px 6px #f1c40f; */\n}\n\n.neuglow {\n  border-radius: 0.5em;\n  box-shadow: 0px 0px 6px 6px #e67e22;\n}\n","",{version:3,sources:["neumorphism.css"],names:[],mappings:"AAAA;EACE,+BAA+B;EAC/B,iCAAiC;EACjC,mBAAmB;EACnB,kBAAkB;EAClB,yBAAyB;EACzB,oBAAoB;EACpB,sDAAsD;AACxD;;AAEA;;EAEE,eAAe;AACjB;;AAEA;;EAEE,8BAA8B;EAC9B,sBAAsB;EACtB,gFAAgF;EAChF,kEAAkE;EAClE,oHAAoH;AACtH;;AAEA;EACE,oBAAoB;EACpB,mCAAmC;AACrC",file:"neumorphism.css",sourcesContent:[".neushadow {\n  /* background-color: #f39c12; */\n  /* border: 0.5em solid #f39c12; */\n  /* margin: 0.5em; */\n  /* padding: 1em; */\n  border: 1px solid #f39c12;\n  border-radius: 0.5em;\n  box-shadow: 4px 4px 6px #e67e22, -4px -4px 6px #f1c40f;\n}\n\nli.neushadow,\na.neushadow {\n  cursor: pointer;\n}\n\nli.neushadow:hover,\na.neushadow:hover a.neushadow:active {\n  /* -webkit-box-shadow: none; */\n  /* box-shadow: none; */\n  /* -webkit-box-shadow: inset 4px 4px 6px #e67e22, inset -4px -4px 6px #f1c40f; */\n  box-shadow: inset 4px 4px 6px #e67e22, inset -4px -4px 6px #f1c40f;\n  /* box-shadow: 4px 4px 6px #e67e22, -4px -4px 6px #f1c40f, inset 4px 4px 6px #e67e22, inset -4px -4px 6px #f1c40f; */\n}\n\n.neuglow {\n  border-radius: 0.5em;\n  box-shadow: 0px 0px 6px 6px #e67e22;\n}\n"]}]),t.default=i},,,,,,,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))i.call(n,c)&&(l[c]=n[c]);if(r){u=r(n);for(var f=0;f<u.length;f++)o.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";(function(e){var r=n(0),i=n.n(r),o=(n(5),n(42)),a=n(43),u=n(37),l=n(41),s=n(44),c=n(12),f=n(13),d=n(14),p=(n(101),n(102),n(103),n(104),n(40));function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return m(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var g=[{name:"Home",link:"/",color:"rgba(140,70,70,0.25)",component:i.a.createElement(c.a,null)},{name:"Fortune Teller",color:"rgba(70,140,70,0.25)",component:i.a.createElement(f.a,null)},{name:"Data Visualizer",link:"/datavis",color:"rgba(140,140,70,0.25)",component:i.a.createElement(d.a,null)}];function v(e){var t=h(Object(r.useState)(0),2),n=t[0],c=t[1];return i.a.createElement("div",{className:"App"},i.a.createElement("div",{className:"header"},i.a.createElement(o.a,null)),i.a.createElement("div",{className:"left-sidebar"},i.a.createElement(a.a,{menuItems:g,menuSelection:n,setMenuSelection:c})),i.a.createElement("div",{className:"main"},i.a.createElement(u.a,{menuItems:g,menuSelection:n})),i.a.createElement("div",{className:"right-sidebar"},i.a.createElement(l.a,null)),i.a.createElement("div",{className:"footer"},i.a.createElement(s.a,null)))}v.propTypes={},t.a=Object(p.hot)(e)(v)}).call(this,n(92)(e))},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(0),i=n.n(r),o=n(12),a=n(13),u=n(14);function l(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(o.a,null),i.a.createElement(a.a,null),i.a.createElement(u.a,null))}},function(e,t,n){"use strict";(function(e){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1-lts
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}();var i=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),r))}};function o(e){return e&&"[object Function]"==={}.toString.call(e)}function a(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function u(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function l(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=a(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:l(u(e))}function s(e){return e&&e.referenceNode?e.referenceNode:e}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function d(e){return 11===e?c:10===e?f:c||f}function p(e){if(!e)return document.documentElement;for(var t=d(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===a(n,"position")?p(n):n:e?e.ownerDocument.documentElement:document.documentElement}function h(e){return null!==e.parentNode?h(e.parentNode):e}function m(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,u,l=o.commonAncestorContainer;if(e!==l&&t!==l||r.contains(i))return"BODY"===(u=(a=l).nodeName)||"HTML"!==u&&p(a.firstElementChild)!==a?p(l):l;var s=h(e);return s.host?m(s.host,t):m(e,h(t).host)}function g(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",r=e.nodeName;if("BODY"===r||"HTML"===r){var i=e.ownerDocument.documentElement,o=e.ownerDocument.scrollingElement||i;return o[n]}return e[n]}function v(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=g(t,"top"),i=g(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}function y(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"])+parseFloat(e["border"+r+"Width"])}function b(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],d(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function x(e){var t=e.body,n=e.documentElement,r=d(10)&&getComputedStyle(n);return{height:b("Height",t,n,r),width:b("Width",t,n,r)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},A=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function C(e){return k({},e,{right:e.left+e.width,bottom:e.top+e.height})}function S(e){var t={};try{if(d(10)){t=e.getBoundingClientRect();var n=g(e,"top"),r=g(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?x(e.ownerDocument):{},u=o.width||e.clientWidth||i.width,l=o.height||e.clientHeight||i.height,s=e.offsetWidth-u,c=e.offsetHeight-l;if(s||c){var f=a(e);s-=y(f,"x"),c-=y(f,"y"),i.width-=s,i.height-=c}return C(i)}function _(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=d(10),i="HTML"===t.nodeName,o=S(e),u=S(t),s=l(e),c=a(t),f=parseFloat(c.borderTopWidth),p=parseFloat(c.borderLeftWidth);n&&i&&(u.top=Math.max(u.top,0),u.left=Math.max(u.left,0));var h=C({top:o.top-u.top-f,left:o.left-u.left-p,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!r&&i){var m=parseFloat(c.marginTop),g=parseFloat(c.marginLeft);h.top-=f-m,h.bottom-=f-m,h.left-=p-g,h.right-=p-g,h.marginTop=m,h.marginLeft=g}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(h=v(h,t)),h}function T(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=_(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:g(n),u=t?0:g(n,"left"),l={top:a-r.top+r.marginTop,left:u-r.left+r.marginLeft,width:i,height:o};return C(l)}function M(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===a(e,"position"))return!0;var n=u(e);return!!n&&M(n)}function P(e){if(!e||!e.parentElement||d())return document.documentElement;for(var t=e.parentElement;t&&"none"===a(t,"transform");)t=t.parentElement;return t||document.documentElement}function N(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?P(e):m(e,s(t));if("viewport"===r)o=T(a,i);else{var c=void 0;"scrollParent"===r?"BODY"===(c=l(u(t))).nodeName&&(c=e.ownerDocument.documentElement):c="window"===r?e.ownerDocument.documentElement:r;var f=_(c,a,i);if("HTML"!==c.nodeName||M(a))o=f;else{var d=x(e.ownerDocument),p=d.height,h=d.width;o.top+=f.top-f.marginTop,o.bottom=p+f.top,o.left+=f.left-f.marginLeft,o.right=h+f.left}}var g="number"==typeof(n=n||0);return o.left+=g?n:n.left||0,o.top+=g?n:n.top||0,o.right-=g?n:n.right||0,o.bottom-=g?n:n.bottom||0,o}function O(e){return e.width*e.height}function R(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=N(n,r,o,i),u={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(u).map((function(e){return k({key:e},u[e],{area:O(u[e])})})).sort((function(e,t){return t.area-e.area})),s=l.filter((function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight})),c=s.length>0?s[0].key:l[0].key,f=e.split("-")[1];return c+(f?"-"+f:"")}function B(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=r?P(t):m(t,s(n));return _(n,i,r)}function D(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function I(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function L(e,t,n){n=n.split("-")[0];var r=D(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",u=o?"left":"top",l=o?"height":"width",s=o?"width":"height";return i[a]=t[a]+t[l]/2-r[l]/2,i[u]=n===u?t[u]-r[s]:t[I(u)],i}function j(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function F(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===n}));var r=j(e,(function(e){return e[t]===n}));return e.indexOf(r)}(e,"name",n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&o(n)&&(t.offsets.popper=C(t.offsets.popper),t.offsets.reference=C(t.offsets.reference),t=n(t,e))})),t}function z(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=B(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=R(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=L(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=F(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function U(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function W(){return this.state.isDestroyed=!0,U(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function $(e){var t=e.ownerDocument;return t?t.defaultView:window}function V(e,t,n,r){n.updateBound=r,$(e).addEventListener("resize",n.updateBound,{passive:!0});var i=l(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(l(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function Y(){this.state.eventsEnabled||(this.state=V(this.reference,this.options,this.state,this.scheduleUpdate))}function q(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,$(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function Q(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function X(e,t){Object.keys(t).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Q(t[n])&&(r="px"),e.style[n]=t[n]+r}))}var G=n&&/Firefox/i.test(navigator.userAgent);function K(e,t,n){var r=j(e,(function(e){return e.name===t})),i=!!r&&e.some((function(e){return e.name===n&&e.enabled&&e.order<r.order}));if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var Z=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],J=Z.slice(3);function ee(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=J.indexOf(e),r=J.slice(n+1).concat(J.slice(0,n));return t?r.reverse():r}var te="flip",ne="clockwise",re="counterclockwise";function ie(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map((function(e){return e.trim()})),u=a.indexOf(j(a,(function(e){return-1!==e.search(/,|\s/)})));a[u]&&-1===a[u].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,s=-1!==u?[a.slice(0,u).concat([a[u].split(l)[0]]),[a[u].split(l)[1]].concat(a.slice(u+1))]:[a];return(s=s.map((function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var u=void 0;switch(a){case"%p":u=n;break;case"%":case"%r":default:u=r}return C(u)[t]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(e,i,t,n)}))}))).forEach((function(e,t){e.forEach((function(n,r){Q(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))}))})),i}var oe={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,u=-1!==["bottom","top"].indexOf(n),l=u?"left":"top",s=u?"width":"height",c={start:E({},l,o[l]),end:E({},l,o[l]+o[s]-a[s])};e.offsets.popper=k({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,u=r.split("-")[0],l=void 0;return l=Q(+n)?[+n,0]:ie(n,o,a,u),"left"===u?(o.top+=l[0],o.left-=l[1]):"right"===u?(o.top+=l[0],o.left+=l[1]):"top"===u?(o.left+=l[0],o.top-=l[1]):"bottom"===u&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||p(e.instance.popper);e.instance.reference===n&&(n=p(n));var r=H("transform"),i=e.instance.popper.style,o=i.top,a=i.left,u=i[r];i.top="",i.left="",i[r]="";var l=N(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=o,i.left=a,i[r]=u,t.boundaries=l;var s=t.priority,c=e.offsets.popper,f={primary:function(e){var n=c[e];return c[e]<l[e]&&!t.escapeWithReference&&(n=Math.max(c[e],l[e])),E({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>l[e]&&!t.escapeWithReference&&(r=Math.min(c[n],l[e]-("right"===e?c.width:c.height))),E({},n,r)}};return s.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=k({},c,f[t](e))})),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),u=a?"right":"bottom",l=a?"left":"top",s=a?"width":"height";return n[u]<o(r[l])&&(e.offsets.popper[l]=o(r[l])-n[s]),n[l]>o(r[u])&&(e.offsets.popper[l]=o(r[u])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!K(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,u=o.popper,l=o.reference,s=-1!==["left","right"].indexOf(i),c=s?"height":"width",f=s?"Top":"Left",d=f.toLowerCase(),p=s?"left":"top",h=s?"bottom":"right",m=D(r)[c];l[h]-m<u[d]&&(e.offsets.popper[d]-=u[d]-(l[h]-m)),l[d]+m>u[h]&&(e.offsets.popper[d]+=l[d]+m-u[h]),e.offsets.popper=C(e.offsets.popper);var g=l[d]+l[c]/2-m/2,v=a(e.instance.popper),y=parseFloat(v["margin"+f]),b=parseFloat(v["border"+f+"Width"]),x=g-e.offsets.popper[d]-y-b;return x=Math.max(Math.min(u[c]-m,x),0),e.arrowElement=r,e.offsets.arrow=(E(n={},d,Math.round(x)),E(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(U(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=N(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=I(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case te:a=[r,i];break;case ne:a=ee(r);break;case re:a=ee(r,!0);break;default:a=t.behavior}return a.forEach((function(u,l){if(r!==u||a.length===l+1)return e;r=e.placement.split("-")[0],i=I(r);var s=e.offsets.popper,c=e.offsets.reference,f=Math.floor,d="left"===r&&f(s.right)>f(c.left)||"right"===r&&f(s.left)<f(c.right)||"top"===r&&f(s.bottom)>f(c.top)||"bottom"===r&&f(s.top)<f(c.bottom),p=f(s.left)<f(n.left),h=f(s.right)>f(n.right),m=f(s.top)<f(n.top),g=f(s.bottom)>f(n.bottom),v="left"===r&&p||"right"===r&&h||"top"===r&&m||"bottom"===r&&g,y=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&h||!y&&"start"===o&&m||!y&&"end"===o&&g),x=!!t.flipVariationsByContent&&(y&&"start"===o&&h||y&&"end"===o&&p||!y&&"start"===o&&g||!y&&"end"===o&&m),w=b||x;(d||v||w)&&(e.flipped=!0,(d||v)&&(r=a[l+1]),w&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=k({},e.offsets.popper,L(e.instance.popper,e.offsets.reference,e.placement)),e=F(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),u=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(u?i[a?"width":"height"]:0),e.placement=I(t),e.offsets.popper=C(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!K(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=j(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=j(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,u=p(e.instance.popper),l=S(u),s={position:i.position},c=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,u=function(e){return e},l=o(i.width),s=o(r.width),c=-1!==["left","right"].indexOf(e.placement),f=-1!==e.placement.indexOf("-"),d=t?c||f||l%2==s%2?o:a:u,p=t?o:u;return{left:d(l%2==1&&s%2==1&&!f&&t?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:d(r.right)}}(e,window.devicePixelRatio<2||!G),f="bottom"===n?"top":"bottom",d="right"===r?"left":"right",h=H("transform"),m=void 0,g=void 0;if(g="bottom"===f?"HTML"===u.nodeName?-u.clientHeight+c.bottom:-l.height+c.bottom:c.top,m="right"===d?"HTML"===u.nodeName?-u.clientWidth+c.right:-l.width+c.right:c.left,a&&h)s[h]="translate3d("+m+"px, "+g+"px, 0)",s[f]=0,s[d]=0,s.willChange="transform";else{var v="bottom"===f?-1:1,y="right"===d?-1:1;s[f]=g*v,s[d]=m*y,s.willChange=f+", "+d}var b={"x-placement":e.placement};return e.attributes=k({},b,e.attributes),e.styles=k({},s,e.styles),e.arrowStyles=k({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return X(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&X(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=B(i,t,e,n.positionFixed),a=R(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),X(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},ae=function(){function e(t,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=k({},e.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(k({},e.Defaults.modifiers,a.modifiers)).forEach((function(t){r.options.modifiers[t]=k({},e.Defaults.modifiers[t]||{},a.modifiers?a.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return k({name:e},r.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&o(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)})),this.update();var u=this.options.eventsEnabled;u&&this.enableEventListeners(),this.state.eventsEnabled=u}return A(e,[{key:"update",value:function(){return z.call(this)}},{key:"destroy",value:function(){return W.call(this)}},{key:"enableEventListeners",value:function(){return Y.call(this)}},{key:"disableEventListeners",value:function(){return q.call(this)}}]),e}();ae.Utils=("undefined"!=typeof window?window:e).PopperUtils,ae.placements=Z,ae.Defaults=oe,t.a=ae}).call(this,n(97))},function(e,t,n){"use strict";var r=n(98),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||i}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=p(n);i&&i!==h&&e(t,i,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),g=0;g<a.length;++g){var v=a[g];if(!(o[v]||r&&r[v]||m&&m[v]||u&&u[v])){var y=d(n,v);try{s(t,v,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";e.exports=n(105)},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(0),i=n.n(r),o=(n(100),n.p+"8e172b863bd747e5e556639017427aec.jpg");function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(){var e=a(Object(r.useState)(!1),2),t=e[0],n=e[1];return i.a.createElement("div",{onClick:function(){return n(!t)}},i.a.createElement("p",{className:"pointer"},"John Sullivan",i.a.createElement("br",null),t?"johnography@outlook.com":"Click to reveal",i.a.createElement("br",null),t?"415-879-2257":"contact information."))}function s(){return i.a.createElement("div",{className:"contact-card neushadow"},i.a.createElement("img",{className:"neushadow",src:o}),i.a.createElement(l,null))}function c(){return i.a.createElement(i.a.Fragment,null,i.a.createElement("h3",null,"About Me"),i.a.createElement("p",null,"I live in the Pacific Northwest with my wife, son, and two dogs. We love to go hiking and swimming."))}function f(){return i.a.createElement("div",{className:"right-sidebar"},i.a.createElement(s,null),i.a.createElement(c,null))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("h1",null,"Titlebar"))}function a(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(o,null))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(0),i=n.n(r);n(95);function o(e){var t=e.menuItems,n=(e.menuSelection,e.setMenuSelection);return t&&i.a.createElement("div",{className:"menu"},i.a.createElement("ul",null,t.map((function(e,t){return i.a.createElement("li",{className:"neushadow",key:t,onClick:function(){return n(t)}},e.name)}))))}function a(e){var t=e.menuItems,n=e.menuSelection,r=e.setMenuSelection;return i.a.createElement("div",{class:"left-sidebar"},i.a.createElement(o,{menuItems:t,menuSelection:n,setMenuSelection:r}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(0),i=n.n(r);function o(){return i.a.createElement(i.a.Fragment,null,i.a.createElement("h3",null,"About This Site"),i.a.createElement("p",null,"All elements and components used for this website have been hand-coded and can be viewed on my"," ",i.a.createElement("a",{href:"https://github.com/johnography",target:"_blank"},"GitHub"),"."))}function a(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(o,null))}},,function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(4),a=n.n(o),u=n(36);a.a.render(i.a.createElement(u.a,null),document.getElementById("root"))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(35),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,s=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.memo"):60115,m=i?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function x(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}function w(){}function A(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var E=A.prototype=new w;E.constructor=A,r(E,x.prototype),E.isPureReactComponent=!0;var k={current:null},C=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&!S.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:k.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var M=/\/+/g,P=[];function N(e,t,n,r){if(P.length){var i=P.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function O(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,i){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case a:l=!0}}if(l)return r(i,t,""===n?"."+B(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+B(u=t[s],s);l+=e(u,c,r,i)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=g&&t[g]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(u=t.next()).done;)l+=e(u=u.value,c=n+B(u,s++),r,i);else if("object"===u)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(T(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(M,"$&/")+"/"),R(e,I,t=N(t,o,r,i)),O(t)}var j={current:null};function F(){var e=j.current;if(null===e)throw Error(v(321));return e}var z={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,D,t=N(null,null,t,n)),O(t)},count:function(e){return R(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!T(e))throw Error(v(143));return e}},t.Component=x,t.Fragment=u,t.Profiler=s,t.PureComponent=A,t.StrictMode=l,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)C.call(t,c)&&!S.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(35),o=n(90);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,i,o,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var l=!1,s=null,c=!1,f=null,d={onError:function(e){l=!0,s=e}};function p(e,t,n,r,i,o,a,c,f){l=!1,s=null,u.apply(d,arguments)}var h=null,m=null,g=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=g(n),function(e,t,n,r,i,o,u,d,h){if(p.apply(this,arguments),l){if(!l)throw Error(a(198));var m=s;l=!1,s=null,c||(c=!0,f=m)}}(r,t,void 0,e),e.currentTarget=null}var y=null,b={};function x(){if(y)for(var e in b){var t=b[e],n=y.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!A[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in A[n]=t,n=t.eventTypes){var i=void 0,o=n[r],u=t,l=r;if(E.hasOwnProperty(l))throw Error(a(99,l));E[l]=o;var s=o.phasedRegistrationNames;if(s){for(i in s)s.hasOwnProperty(i)&&w(s[i],u,l);i=!0}else o.registrationName?(w(o.registrationName,u,l),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function w(e,t,n){if(k[e])throw Error(a(100,e));k[e]=t,C[e]=t.eventTypes[n].dependencies}var A=[],E={},k={},C={};function S(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&x()}var _=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),T=null,M=null,P=null;function N(e){if(e=m(e)){if("function"!=typeof T)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),T(e.stateNode,e.type,t))}}function O(e){M?P?P.push(e):P=[e]:M=e}function R(){if(M){var e=M,t=P;if(P=M=null,N(e),t)for(e=0;e<t.length;e++)N(t[e])}}function B(e,t){return e(t)}function D(e,t,n,r,i){return e(t,n,r,i)}function I(){}var L=B,j=!1,F=!1;function z(){null===M&&null===P||(I(),R())}function U(e,t,n){if(F)return e(t,n);F=!0;try{return L(e,t,n)}finally{F=!1,z()}}var H=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,W=Object.prototype.hasOwnProperty,$={},V={};function Y(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){q[e]=new Y(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];q[t]=new Y(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){q[e]=new Y(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){q[e]=new Y(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){q[e]=new Y(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){q[e]=new Y(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){q[e]=new Y(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){q[e]=new Y(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){q[e]=new Y(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function X(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,X);q[t]=new Y(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,X);q[t]=new Y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,X);q[t]=new Y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){q[e]=new Y(e,1,!1,e.toLowerCase(),null,!1)})),q.xlinkHref=new Y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){q[e]=new Y(e,1,!1,e.toLowerCase(),null,!0)}));var G=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function K(e,t,n,r){var i=q.hasOwnProperty(t)?q[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!W.call(V,e)||!W.call($,e)&&(H.test(e)?V[e]=!0:($[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}G.hasOwnProperty("ReactCurrentDispatcher")||(G.ReactCurrentDispatcher={current:null}),G.hasOwnProperty("ReactCurrentBatchConfig")||(G.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,ie=J?Symbol.for("react.profiler"):60114,oe=J?Symbol.for("react.provider"):60109,ae=J?Symbol.for("react.context"):60110,ue=J?Symbol.for("react.concurrent_mode"):60111,le=J?Symbol.for("react.forward_ref"):60112,se=J?Symbol.for("react.suspense"):60113,ce=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,pe=J?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ge(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case se:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case oe:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ge(e.type);case pe:return ge(e.render);case de:if(e=1===e._status?e._result:null)return ge(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=ge(e.type);n=null,r&&(n=ge(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(Z,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function xe(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ae(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ke(e,t){null!=(t=t.checked)&&K(e,"checked",t,!1)}function Ce(e,t){ke(e,t);var n=ye(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?_e(e,t.type,n):t.hasOwnProperty("defaultValue")&&_e(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Se(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function _e(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Te(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Me(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Pe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ne(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function Oe(e,t){var n=ye(t.value),r=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Re(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Be="http://www.w3.org/1999/xhtml",De="http://www.w3.org/2000/svg";function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var je,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==De||"innerHTML"in e)e.innerHTML=t;else{for((je=je||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=je.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ze(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ue(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:Ue("Animation","AnimationEnd"),animationiteration:Ue("Animation","AnimationIteration"),animationstart:Ue("Animation","AnimationStart"),transitionend:Ue("Transition","TransitionEnd")},We={},$e={};function Ve(e){if(We[e])return We[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in $e)return We[e]=n[t];return e}_&&($e=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var Ye=Ve("animationend"),qe=Ve("animationiteration"),Qe=Ve("animationstart"),Xe=Ve("transitionend"),Ge="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ke=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Ke.get(e);return void 0===t&&(t=new Map,Ke.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return tt(i),e;if(o===r)return tt(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function ut(e){if(null!==e&&(ot=rt(ot,e)),e=ot,ot=null,e){if(it(e,at),ot)throw Error(a(95));if(c)throw e=f,c=!1,f=null,e}}function lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function st(e){if(!_)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function dt(e,t,n,r){if(ct.length){var i=ct.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=_n(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=lt(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,l=0;l<A.length;l++){var s=A[l];s&&(s=s.extractEvents(r,t,o,i,a))&&(u=rt(u,s))}ut(u)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Qt(t,"scroll",!0);break;case"focus":case"blur":Qt(t,"focus",!0),Qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":st(e)&&Qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ge.indexOf(e)&&qt(e,t)}n.set(e,null)}}var mt,gt,vt,yt=!1,bt=[],xt=null,wt=null,At=null,Et=new Map,kt=new Map,Ct=[],St="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),_t="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Tt(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function Mt(e,t){switch(e){case"focus":case"blur":xt=null;break;case"dragenter":case"dragleave":wt=null;break;case"mouseover":case"mouseout":At=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":kt.delete(t.pointerId)}}function Pt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=Tt(t,n,r,i,o),null!==t&&(null!==(t=Tn(t))&&gt(t)),e):(e.eventSystemFlags|=r,e)}function Nt(e){var t=_n(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ot(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Tn(t);return null!==n&&gt(n),e.blockedOn=t,!1}return!0}function Rt(e,t,n){Ot(e)&&n.delete(t)}function Bt(){for(yt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=Tn(e.blockedOn))&&mt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==xt&&Ot(xt)&&(xt=null),null!==wt&&Ot(wt)&&(wt=null),null!==At&&Ot(At)&&(At=null),Et.forEach(Rt),kt.forEach(Rt)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Bt)))}function It(e){function t(t){return Dt(t,e)}if(0<bt.length){Dt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xt&&Dt(xt,e),null!==wt&&Dt(wt,e),null!==At&&Dt(At,e),Et.forEach(t),kt.forEach(t),n=0;n<Ct.length;n++)(r=Ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ct.length&&null===(n=Ct[0]).blockedOn;)Nt(n),null===n.blockedOn&&Ct.shift()}var Lt={},jt=new Map,Ft=new Map,zt=["abort","abort",Ye,"animationEnd",qe,"animationIteration",Qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Xe,"transitionEnd","waiting","waiting"];function Ut(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),jt.set(r,o),Lt[i]=o}}Ut("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ut("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ut(zt,2);for(var Ht="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Wt=0;Wt<Ht.length;Wt++)Ft.set(Ht[Wt],0);var $t=o.unstable_UserBlockingPriority,Vt=o.unstable_runWithPriority,Yt=!0;function qt(e,t){Qt(t,e,!1)}function Qt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Xt.bind(null,t,1,e);break;case 1:r=Gt.bind(null,t,1,e);break;default:r=Kt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Xt(e,t,n,r){j||I();var i=Kt,o=j;j=!0;try{D(i,e,t,n,r)}finally{(j=o)||z()}}function Gt(e,t,n,r){Vt($t,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){if(Yt)if(0<bt.length&&-1<St.indexOf(e))e=Tt(null,e,t,n,r),bt.push(e);else{var i=Zt(e,t,n,r);if(null===i)Mt(e,r);else if(-1<St.indexOf(e))e=Tt(i,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return xt=Pt(xt,e,t,n,r,i),!0;case"dragenter":return wt=Pt(wt,e,t,n,r,i),!0;case"mouseover":return At=Pt(At,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Et.set(o,Pt(Et.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,kt.set(o,Pt(kt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){Mt(e,r),e=dt(e,r,null,t);try{U(pt,e)}finally{ft(e)}}}}function Zt(e,t,n,r){if(null!==(n=_n(n=lt(r)))){var i=Je(n);if(null===i)n=null;else{var o=i.tag;if(13===o){if(null!==(n=et(i)))return n;n=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=dt(e,r,n,t);try{U(pt,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var un=Be;function ln(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function sn(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,gn=null;function vn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,xn="function"==typeof clearTimeout?clearTimeout:void 0;function wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function An(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),kn="__reactInternalInstance$"+En,Cn="__reactEventHandlers$"+En,Sn="__reactContainere$"+En;function _n(e){var t=e[kn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Sn]||n[kn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=An(e);null!==e;){if(n=e[kn])return n;e=An(e)}return t}n=(e=n).parentNode}return null}function Tn(e){return!(e=e[kn]||e[Sn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Mn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Pn(e){return e[Cn]||null}function Nn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function On(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Rn(e,t,n){(t=On(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Bn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Nn(t);for(t=n.length;0<t--;)Rn(n[t],"captured",e);for(t=0;t<n.length;t++)Rn(n[t],"bubbled",e)}}function Dn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=On(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){e&&e.dispatchConfig.registrationName&&Dn(e._targetInst,null,e)}function Ln(e){it(e,Bn)}var jn=null,Fn=null,zn=null;function Un(){if(zn)return zn;var e,t,n=Fn,r=n.length,i="value"in jn?jn.value:jn.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return zn=i.slice(e,1<t?1-t:void 0)}function Hn(){return!0}function Wn(){return!1}function $n(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Hn:Wn,this.isPropagationStopped=Wn,this}function Vn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Yn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function qn(e){e.eventPool=[],e.getPooled=Vn,e.release=Yn}i($n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Hn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Hn)},persist:function(){this.isPersistent=Hn},isPersistent:Wn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Wn,this._dispatchInstances=this._dispatchListeners=null}}),$n.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},$n.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,qn(n),n},qn($n);var Qn=$n.extend({data:null}),Xn=$n.extend({data:null}),Gn=[9,13,27,32],Kn=_&&"CompositionEvent"in window,Zn=null;_&&"documentMode"in document&&(Zn=document.documentMode);var Jn=_&&"TextEvent"in window&&!Zn,er=_&&(!Kn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ir(e,t){switch(e){case"keyup":return-1!==Gn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var ur={eventTypes:nr,extractEvents:function(e,t,n,r){var i;if(Kn)e:{switch(e){case"compositionstart":var o=nr.compositionStart;break e;case"compositionend":o=nr.compositionEnd;break e;case"compositionupdate":o=nr.compositionUpdate;break e}o=void 0}else ar?ir(e,n)&&(o=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=nr.compositionStart);return o?(er&&"ko"!==n.locale&&(ar||o!==nr.compositionStart?o===nr.compositionEnd&&ar&&(i=Un()):(Fn="value"in(jn=r)?jn.value:jn.textContent,ar=!0)),o=Qn.getPooled(o,t,n,r),i?o.data=i:null!==(i=or(n))&&(o.data=i),Ln(o),i=o):i=null,(e=Jn?function(e,t){switch(e){case"compositionend":return or(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Kn&&ir(e,t)?(e=Un(),zn=Fn=jn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Xn.getPooled(nr.beforeInput,t,n,r)).data=e,Ln(t)):t=null,null===i?t:null===t?i:[i,t]}},lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!lr[e.type]:"textarea"===t}var cr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=$n.getPooled(cr.change,e,t,n)).type="change",O(n),Ln(e),e}var dr=null,pr=null;function hr(e){ut(e)}function mr(e){if(we(Mn(e)))return e}function gr(e,t){if("change"===e)return t}var vr=!1;function yr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&mr(pr))if(e=fr(pr,e,lt(e)),j)ut(e);else{j=!0;try{B(hr,e)}finally{j=!1,z()}}}function xr(e,t,n){"focus"===e?(yr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&yr()}function wr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function Ar(e,t){if("click"===e)return mr(t)}function Er(e,t){if("input"===e||"change"===e)return mr(t)}_&&(vr=st("input")&&(!document.documentMode||9<document.documentMode));var kr={eventTypes:cr,_isInputEventSupported:vr,extractEvents:function(e,t,n,r){var i=t?Mn(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=gr;else if(sr(i))if(vr)a=Er;else{a=wr;var u=xr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=Ar);if(a&&(a=a(e,t)))return fr(a,n,r);u&&u(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&_e(i,"number",i.value)}},Cr=$n.extend({view:null,detail:null}),Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _r(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Tr(){return _r}var Mr=0,Pr=0,Nr=!1,Or=!1,Rr=Cr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Tr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Mr;return Mr=e.screenX,Nr?"mousemove"===e.type?e.screenX-t:0:(Nr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Pr;return Pr=e.screenY,Or?"mousemove"===e.type?e.screenY-t:0:(Or=!0,0)}}),Br=Rr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Dr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ir={eventTypes:Dr,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?_n(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Rr,l=Dr.mouseLeave,s=Dr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=Br,l=Dr.pointerLeave,s=Dr.pointerEnter,c="pointer");if(e=null==a?o:Mn(a),o=null==t?o:Mn(t),(l=u.getPooled(l,a,n,r)).type=c+"leave",l.target=e,l.relatedTarget=o,(n=u.getPooled(s,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=e,c=t,(r=a)&&c)e:{for(s=c,a=0,e=u=r;e;e=Nn(e))a++;for(e=0,t=s;t;t=Nn(t))e++;for(;0<a-e;)u=Nn(u),a--;for(;0<e-a;)s=Nn(s),e--;for(;a--;){if(u===s||u===s.alternate)break e;u=Nn(u),s=Nn(s)}u=null}else u=null;for(s=u,u=[];r&&r!==s&&(null===(a=r.alternate)||a!==s);)u.push(r),r=Nn(r);for(r=[];c&&c!==s&&(null===(a=c.alternate)||a!==s);)r.push(c),c=Nn(c);for(c=0;c<u.length;c++)Dn(u[c],"bubbled",l);for(c=r.length;0<c--;)Dn(r[c],"captured",n);return 0==(64&i)?[l]:[l,n]}};var Lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},jr=Object.prototype.hasOwnProperty;function Fr(e,t){if(Lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!jr.call(t,n[r])||!Lr(e[n[r]],t[n[r]]))return!1;return!0}var zr=_&&"documentMode"in document&&11>=document.documentMode,Ur={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,Wr=null,$r=null,Vr=!1;function Yr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vr||null==Hr||Hr!==cn(n)?null:("selectionStart"in(n=Hr)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},$r&&Fr($r,n)?null:($r=n,(e=$n.getPooled(Ur.select,Wr,e,t)).type="select",e.target=Hr,Ln(e),e))}var qr={eventTypes:Ur,extractEvents:function(e,t,n,r,i,o){if(!(o=!(i=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Ze(i),o=C.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?Mn(t):window,e){case"focus":(sr(i)||"true"===i.contentEditable)&&(Hr=i,Wr=t,$r=null);break;case"blur":$r=Wr=Hr=null;break;case"mousedown":Vr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vr=!1,Yr(n,r);case"selectionchange":if(zr)break;case"keydown":case"keyup":return Yr(n,r)}return null}},Qr=$n.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Xr=$n.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Gr=Cr.extend({relatedTarget:null});function Kr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ei=Cr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Kr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Tr,charCode:function(e){return"keypress"===e.type?Kr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Kr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ti=Rr.extend({dataTransfer:null}),ni=Cr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Tr}),ri=$n.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ii=Rr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),oi={eventTypes:Lt,extractEvents:function(e,t,n,r){var i=jt.get(e);if(!i)return null;switch(e){case"keypress":if(0===Kr(n))return null;case"keydown":case"keyup":e=ei;break;case"blur":case"focus":e=Gr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Rr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ti;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ni;break;case Ye:case qe:case Qe:e=Qr;break;case Xe:e=ri;break;case"scroll":e=Cr;break;case"wheel":e=ii;break;case"copy":case"cut":case"paste":e=Xr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Br;break;default:e=$n}return Ln(t=e.getPooled(i,t,n,r)),t}};if(y)throw Error(a(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x(),h=Pn,m=Tn,g=Mn,S({SimpleEventPlugin:oi,EnterLeaveEventPlugin:Ir,ChangeEventPlugin:kr,SelectEventPlugin:qr,BeforeInputEventPlugin:ur});var ai=[],ui=-1;function li(e){0>ui||(e.current=ai[ui],ai[ui]=null,ui--)}function si(e,t){ui++,ai[ui]=e.current,e.current=t}var ci={},fi={current:ci},di={current:!1},pi=ci;function hi(e,t){var n=e.type.contextTypes;if(!n)return ci;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function mi(e){return null!=(e=e.childContextTypes)}function gi(){li(di),li(fi)}function vi(e,t,n){if(fi.current!==ci)throw Error(a(168));si(fi,t),si(di,n)}function yi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,ge(t)||"Unknown",o));return i({},n,{},r)}function bi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ci,pi=fi.current,si(fi,e),si(di,di.current),!0}function xi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=yi(e,t,pi),r.__reactInternalMemoizedMergedChildContext=e,li(di),li(fi),si(fi,e)):li(di),si(di,n)}var wi=o.unstable_runWithPriority,Ai=o.unstable_scheduleCallback,Ei=o.unstable_cancelCallback,ki=o.unstable_requestPaint,Ci=o.unstable_now,Si=o.unstable_getCurrentPriorityLevel,_i=o.unstable_ImmediatePriority,Ti=o.unstable_UserBlockingPriority,Mi=o.unstable_NormalPriority,Pi=o.unstable_LowPriority,Ni=o.unstable_IdlePriority,Oi={},Ri=o.unstable_shouldYield,Bi=void 0!==ki?ki:function(){},Di=null,Ii=null,Li=!1,ji=Ci(),Fi=1e4>ji?Ci:function(){return Ci()-ji};function zi(){switch(Si()){case _i:return 99;case Ti:return 98;case Mi:return 97;case Pi:return 96;case Ni:return 95;default:throw Error(a(332))}}function Ui(e){switch(e){case 99:return _i;case 98:return Ti;case 97:return Mi;case 96:return Pi;case 95:return Ni;default:throw Error(a(332))}}function Hi(e,t){return e=Ui(e),wi(e,t)}function Wi(e,t,n){return e=Ui(e),Ai(e,t,n)}function $i(e){return null===Di?(Di=[e],Ii=Ai(_i,Yi)):Di.push(e),Oi}function Vi(){if(null!==Ii){var e=Ii;Ii=null,Ei(e)}Yi()}function Yi(){if(!Li&&null!==Di){Li=!0;var e=0;try{var t=Di;Hi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Di=null}catch(t){throw null!==Di&&(Di=Di.slice(e+1)),Ai(_i,Vi),t}finally{Li=!1}}}function qi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Qi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Xi={current:null},Gi=null,Ki=null,Zi=null;function Ji(){Zi=Ki=Gi=null}function eo(e){var t=Xi.current;li(Xi),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){Gi=e,Zi=Ki=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Pa=!0),e.firstContext=null)}function ro(e,t){if(Zi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ki){if(null===Gi)throw Error(a(308));Ki=t,Gi.dependencies={expirationTime:0,firstContext:t,responders:null}}else Ki=Ki.next=t;return e._currentValue}var io=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ao(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function uo(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function lo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function so(e,t){var n=e.alternate;null!==n&&ao(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function co(e,t,n,r){var o=e.updateQueue;io=!1;var a=o.baseQueue,u=o.shared.pending;if(null!==u){if(null!==a){var l=a.next;a.next=u.next,u.next=l}a=u,o.shared.pending=null,null!==(l=e.alternate)&&(null!==(l=l.updateQueue)&&(l.baseQueue=u))}if(null!==a){l=a.next;var s=o.baseState,c=0,f=null,d=null,p=null;if(null!==l)for(var h=l;;){if((u=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=m,f=s):p=p.next=m,u>c&&(c=u)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),ol(u,h.suspenseConfig);e:{var g=e,v=h;switch(u=t,m=n,v.tag){case 1:if("function"==typeof(g=v.payload)){s=g.call(m,s,u);break e}s=g;break e;case 3:g.effectTag=-4097&g.effectTag|64;case 0:if(null==(u="function"==typeof(g=v.payload)?g.call(m,s,u):g))break e;s=i({},s,u);break e;case 2:io=!0}}null!==h.callback&&(e.effectTag|=32,null===(u=o.effects)?o.effects=[h]:u.push(h))}if(null===(h=h.next)||h===l){if(null===(u=o.shared.pending))break;h=a.next=u.next,u.next=l,o.baseQueue=a=u,o.shared.pending=null}}null===p?f=s:p.next=d,o.baseState=f,o.baseQueue=p,al(c),e.expirationTime=c,e.memoizedState=s}}function fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var po=G.ReactCurrentBatchConfig,ho=(new r.Component).refs;function mo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var go={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Yu(),i=po.suspense;(i=uo(r=qu(r,e,i),i)).payload=t,null!=n&&(i.callback=n),lo(e,i),Qu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Yu(),i=po.suspense;(i=uo(r=qu(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),lo(e,i),Qu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Yu(),r=po.suspense;(r=uo(n=qu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),lo(e,r),Qu(e,n)}};function vo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(i,o))}function yo(e,t,n){var r=!1,i=ci,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(i=mi(t)?pi:fi.current,o=(r=null!=(r=t.contextTypes))?hi(e,i):ci),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=go,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function bo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&go.enqueueReplaceState(t,t.state,null)}function xo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=ho,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=ro(o):(o=mi(t)?pi:fi.current,i.context=hi(e,o)),co(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(mo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&go.enqueueReplaceState(i,i.state,null),co(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var wo=Array.isArray;function Ao(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===ho&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Eo(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ko(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Sl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Ml(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Ao(e,t,n),r.return=e,r):((r=_l(n.type,n.key,n.props,null,e.mode,r)).ref=Ao(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Pl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Tl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ml(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=_l(t.type,t.key,t.props,null,e.mode,n)).ref=Ao(e,null,t),n.return=e,n;case te:return(t=Pl(t,e.mode,n)).return=e,t}if(wo(t)||me(t))return(t=Tl(t,e.mode,n,null)).return=e,t;Eo(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):s(e,t,n,r):null;case te:return n.key===i?c(e,t,n,r):null}if(wo(n)||me(n))return null!==i?null:f(e,t,n,r,null);Eo(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):s(t,e,r,i);case te:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(wo(r)||me(r))return f(t,e=e.get(n)||null,r,i,null);Eo(t,r)}return null}function m(i,a,u,l){for(var s=null,c=null,f=a,m=a=0,g=null;null!==f&&m<u.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(i,f,u[m],l);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(i,f),a=o(v,a,m),null===c?s=v:c.sibling=v,c=v,f=g}if(m===u.length)return n(i,f),s;if(null===f){for(;m<u.length;m++)null!==(f=d(i,u[m],l))&&(a=o(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(i,f);m<u.length;m++)null!==(g=h(f,i,m,u[m],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=o(g,a,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(i,e)})),s}function g(i,u,l,s){var c=me(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var f=c=null,m=u,g=u=0,v=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(i,m,y.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(i,m),u=o(b,u,g),null===f?c=b:f.sibling=b,f=b,m=v}if(y.done)return n(i,m),c;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=d(i,y.value,s))&&(u=o(y,u,g),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(i,m);!y.done;g++,y=l.next())null!==(y=h(m,i,g,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),u=o(y,u,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(i,e)})),c}return function(e,r,o,l){var s="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;s&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case ee:e:{for(c=o.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(o.type===ne){n(e,s.sibling),(r=i(s,o.props.children)).return=e,e=r;break e}break;default:if(s.elementType===o.type){n(e,s.sibling),(r=i(s,o.props)).ref=Ao(e,s,o),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}o.type===ne?((r=Tl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=_l(o.type,o.key,o.props,null,e.mode,l)).ref=Ao(e,r,o),l.return=e,e=l)}return u(e);case te:e:{for(s=o.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Pl(o,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Ml(o,e.mode,l)).return=e,e=r),u(e);if(wo(o))return m(e,r,o,l);if(me(o))return g(e,r,o,l);if(c&&Eo(e,o),void 0===o&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Co=ko(!0),So=ko(!1),_o={},To={current:_o},Mo={current:_o},Po={current:_o};function No(e){if(e===_o)throw Error(a(174));return e}function Oo(e,t){switch(si(Po,t),si(Mo,e),si(To,_o),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Le(null,"");break;default:t=Le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}li(To),si(To,t)}function Ro(){li(To),li(Mo),li(Po)}function Bo(e){No(Po.current);var t=No(To.current),n=Le(t,e.type);t!==n&&(si(Mo,e),si(To,n))}function Do(e){Mo.current===e&&(li(To),li(Mo))}var Io={current:0};function Lo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function jo(e,t){return{responder:e,props:t}}var Fo=G.ReactCurrentDispatcher,zo=G.ReactCurrentBatchConfig,Uo=0,Ho=null,Wo=null,$o=null,Vo=!1;function Yo(){throw Error(a(321))}function qo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Lr(e[n],t[n]))return!1;return!0}function Qo(e,t,n,r,i,o){if(Uo=o,Ho=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fo.current=null===e||null===e.memoizedState?va:ya,e=n(r,i),t.expirationTime===Uo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(a(301));o+=1,$o=Wo=null,t.updateQueue=null,Fo.current=ba,e=n(r,i)}while(t.expirationTime===Uo)}if(Fo.current=ga,t=null!==Wo&&null!==Wo.next,Uo=0,$o=Wo=Ho=null,Vo=!1,t)throw Error(a(300));return e}function Xo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===$o?Ho.memoizedState=$o=e:$o=$o.next=e,$o}function Go(){if(null===Wo){var e=Ho.alternate;e=null!==e?e.memoizedState:null}else e=Wo.next;var t=null===$o?Ho.memoizedState:$o.next;if(null!==t)$o=t,Wo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Wo=e).memoizedState,baseState:Wo.baseState,baseQueue:Wo.baseQueue,queue:Wo.queue,next:null},null===$o?Ho.memoizedState=$o=e:$o=$o.next=e}return $o}function Ko(e,t){return"function"==typeof t?t(e):t}function Zo(e){var t=Go(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Wo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var u=i.next;i.next=o.next,o.next=u}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=u=o=null,s=i;do{var c=s.expirationTime;if(c<Uo){var f={expirationTime:s.expirationTime,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===l?(u=l=f,o=r):l=l.next=f,c>Ho.expirationTime&&(Ho.expirationTime=c,al(c))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),ol(c,s.suspenseConfig),r=s.eagerReducer===e?s.eagerState:e(r,s.action);s=s.next}while(null!==s&&s!==i);null===l?o=r:l.next=u,Lr(r,t.memoizedState)||(Pa=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Jo(e){var t=Go(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var u=i=i.next;do{o=e(o,u.action),u=u.next}while(u!==i);Lr(o,t.memoizedState)||(Pa=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ea(e){var t=Xo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ko,lastRenderedState:e}).dispatch=ma.bind(null,Ho,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ho.updateQueue)?(t={lastEffect:null},Ho.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Go().memoizedState}function ra(e,t,n,r){var i=Xo();Ho.effectTag|=e,i.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function ia(e,t,n,r){var i=Go();r=void 0===r?null:r;var o=void 0;if(null!==Wo){var a=Wo.memoizedState;if(o=a.destroy,null!==r&&qo(r,a.deps))return void ta(t,n,o,r)}Ho.effectTag|=e,i.memoizedState=ta(1|t,n,o,r)}function oa(e,t){return ra(516,4,e,t)}function aa(e,t){return ia(516,4,e,t)}function ua(e,t){return ia(4,2,e,t)}function la(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function sa(e,t,n){return n=null!=n?n.concat([e]):null,ia(4,2,la.bind(null,t,e),n)}function ca(){}function fa(e,t){return Xo().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Go();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Go();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ha(e,t,n){var r=zi();Hi(98>r?98:r,(function(){e(!0)})),Hi(97<r?97:r,(function(){var r=zo.suspense;zo.suspense=void 0===t?null:t;try{e(!1),n()}finally{zo.suspense=r}}))}function ma(e,t,n){var r=Yu(),i=po.suspense;i={expirationTime:r=qu(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Ho||null!==o&&o===Ho)Vo=!0,i.expirationTime=Uo,Ho.expirationTime=Uo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=o(a,n);if(i.eagerReducer=o,i.eagerState=u,Lr(u,a))return}catch(e){}Qu(e,r)}}var ga={readContext:ro,useCallback:Yo,useContext:Yo,useEffect:Yo,useImperativeHandle:Yo,useLayoutEffect:Yo,useMemo:Yo,useReducer:Yo,useRef:Yo,useState:Yo,useDebugValue:Yo,useResponder:Yo,useDeferredValue:Yo,useTransition:Yo},va={readContext:ro,useCallback:fa,useContext:ro,useEffect:oa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,la.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Xo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Xo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ma.bind(null,Ho,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Xo().memoizedState=e},useState:ea,useDebugValue:ca,useResponder:jo,useDeferredValue:function(e,t){var n=ea(e),r=n[0],i=n[1];return oa((function(){var n=zo.suspense;zo.suspense=void 0===t?null:t;try{i(e)}finally{zo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},ya={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:ua,useMemo:pa,useReducer:Zo,useRef:na,useState:function(){return Zo(Ko)},useDebugValue:ca,useResponder:jo,useDeferredValue:function(e,t){var n=Zo(Ko),r=n[0],i=n[1];return aa((function(){var n=zo.suspense;zo.suspense=void 0===t?null:t;try{i(e)}finally{zo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zo(Ko),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},ba={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:ua,useMemo:pa,useReducer:Jo,useRef:na,useState:function(){return Jo(Ko)},useDebugValue:ca,useResponder:jo,useDeferredValue:function(e,t){var n=Jo(Ko),r=n[0],i=n[1];return aa((function(){var n=zo.suspense;zo.suspense=void 0===t?null:t;try{i(e)}finally{zo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Jo(Ko),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},xa=null,wa=null,Aa=!1;function Ea(e,t){var n=kl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ka(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ca(e){if(Aa){var t=wa;if(t){var n=t;if(!ka(e,t)){if(!(t=wn(n.nextSibling))||!ka(e,t))return e.effectTag=-1025&e.effectTag|2,Aa=!1,void(xa=e);Ea(xa,n)}xa=e,wa=wn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Aa=!1,xa=e}}function Sa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;xa=e}function _a(e){if(e!==xa)return!1;if(!Aa)return Sa(e),Aa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yn(t,e.memoizedProps))for(t=wa;t;)Ea(e,t),t=wn(t.nextSibling);if(Sa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){wa=wn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}wa=null}}else wa=xa?wn(e.stateNode.nextSibling):null;return!0}function Ta(){wa=xa=null,Aa=!1}var Ma=G.ReactCurrentOwner,Pa=!1;function Na(e,t,n,r){t.child=null===e?So(t,null,n,r):Co(t,e.child,n,r)}function Oa(e,t,n,r,i){n=n.render;var o=t.ref;return no(t,i),r=Qo(e,t,n,r,o,i),null===e||Pa?(t.effectTag|=1,Na(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Qa(e,t,i))}function Ra(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Cl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=_l(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ba(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(i,r)&&e.ref===t.ref)?Qa(e,t,o):(t.effectTag|=1,(e=Sl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ba(e,t,n,r,i,o){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(Pa=!1,i<o)?(t.expirationTime=e.expirationTime,Qa(e,t,o)):Ia(e,t,n,r,o)}function Da(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ia(e,t,n,r,i){var o=mi(n)?pi:fi.current;return o=hi(t,o),no(t,i),n=Qo(e,t,n,r,o,i),null===e||Pa?(t.effectTag|=1,Na(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Qa(e,t,i))}function La(e,t,n,r,i){if(mi(n)){var o=!0;bi(t)}else o=!1;if(no(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yo(t,n,r),xo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=ro(s):s=hi(t,s=mi(n)?pi:fi.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&bo(t,a,r,s),io=!1;var d=t.memoizedState;a.state=d,co(t,r,a,i),l=t.memoizedState,u!==r||d!==l||di.current||io?("function"==typeof c&&(mo(t,n,c,r),l=t.memoizedState),(u=io||vo(t,n,u,r,d,l,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ao(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Qi(t.type,u),l=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=ro(s):s=hi(t,s=mi(n)?pi:fi.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&bo(t,a,r,s),io=!1,l=t.memoizedState,a.state=l,co(t,r,a,i),d=t.memoizedState,u!==r||l!==d||di.current||io?("function"==typeof c&&(mo(t,n,c,r),d=t.memoizedState),(c=io||vo(t,n,u,r,l,d,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return ja(e,t,n,r,o,i)}function ja(e,t,n,r,i,o){Da(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&xi(t,n,!1),Qa(e,t,o);r=t.stateNode,Ma.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Co(t,e.child,null,o),t.child=Co(t,null,u,o)):Na(e,t,u,o),t.memoizedState=r.state,i&&xi(t,n,!0),t.child}function Fa(e){var t=e.stateNode;t.pendingContext?vi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vi(0,t.context,!1),Oo(e,t.containerInfo)}var za,Ua,Ha,Wa={dehydrated:null,retryTime:0};function $a(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Io.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),si(Io,1&a),null===e){if(void 0!==o.fallback&&Ca(t),u){if(u=o.fallback,(o=Tl(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Tl(u,i,n,null)).return=t,o.sibling=n,t.memoizedState=Wa,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=So(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,u){if(o=o.fallback,(n=Sl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(i=Sl(i,o)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Wa,t.child=n,i}return n=Co(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=o.fallback,(o=Tl(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Tl(u,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Wa,t.child=o,n}return t.memoizedState=null,t.child=Co(t,e,o.children,n)}function Va(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function Ya(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function qa(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Na(e,t,r.children,n),0!=(2&(r=Io.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Va(e,n);else if(19===e.tag)Va(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(si(Io,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Lo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ya(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Lo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ya(t,!0,n,null,o,t.lastEffect);break;case"together":Ya(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Qa(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&al(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Sl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Sl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Xa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ga(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return mi(t.type)&&gi(),null;case 3:return Ro(),li(di),li(fi),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!_a(t)||(t.effectTag|=4),null;case 5:Do(t),n=No(Po.current);var o=t.type;if(null!==e&&null!=t.stateNode)Ua(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=No(To.current),_a(t)){r=t.stateNode,o=t.type;var u=t.memoizedProps;switch(r[kn]=t,r[Cn]=u,o){case"iframe":case"object":case"embed":qt("load",r);break;case"video":case"audio":for(e=0;e<Ge.length;e++)qt(Ge[e],r);break;case"source":qt("error",r);break;case"img":case"image":case"link":qt("error",r),qt("load",r);break;case"form":qt("reset",r),qt("submit",r);break;case"details":qt("toggle",r);break;case"input":Ee(r,u),qt("invalid",r),ln(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},qt("invalid",r),ln(n,"onChange");break;case"textarea":Ne(r,u),qt("invalid",r),ln(n,"onChange")}for(var l in on(o,u),e=null,u)if(u.hasOwnProperty(l)){var s=u[l];"children"===l?"string"==typeof s?r.textContent!==s&&(e=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(e=["children",""+s]):k.hasOwnProperty(l)&&null!=s&&ln(n,l)}switch(o){case"input":xe(r),Se(r,u,!0);break;case"textarea":xe(r),Re(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=sn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===un&&(e=Ie(o)),e===un?"script"===o?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(o,{is:r.is}):(e=l.createElement(o),"select"===o&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,o),e[kn]=t,e[Cn]=r,za(e,t),t.stateNode=e,l=an(o,r),o){case"iframe":case"object":case"embed":qt("load",e),s=r;break;case"video":case"audio":for(s=0;s<Ge.length;s++)qt(Ge[s],e);s=r;break;case"source":qt("error",e),s=r;break;case"img":case"image":case"link":qt("error",e),qt("load",e),s=r;break;case"form":qt("reset",e),qt("submit",e),s=r;break;case"details":qt("toggle",e),s=r;break;case"input":Ee(e,r),s=Ae(e,r),qt("invalid",e),ln(n,"onChange");break;case"option":s=Te(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},s=i({},r,{value:void 0}),qt("invalid",e),ln(n,"onChange");break;case"textarea":Ne(e,r),s=Pe(e,r),qt("invalid",e),ln(n,"onChange");break;default:s=r}on(o,s);var c=s;for(u in c)if(c.hasOwnProperty(u)){var f=c[u];"style"===u?nn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Fe(e,f):"children"===u?"string"==typeof f?("textarea"!==o||""!==f)&&ze(e,f):"number"==typeof f&&ze(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(k.hasOwnProperty(u)?null!=f&&ln(n,u):null!=f&&K(e,u,f,l))}switch(o){case"input":xe(e),Se(e,r,!1);break;case"textarea":xe(e),Re(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ye(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Me(e,!!r.multiple,n,!1):null!=r.defaultValue&&Me(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=sn)}vn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=No(Po.current),No(To.current),_a(t)?(n=t.stateNode,r=t.memoizedProps,n[kn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[kn]=t,t.stateNode=n)}return null;case 13:return li(Io),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&_a(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=o,o.nextEffect=u):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?_u===xu&&(_u=wu):(_u!==xu&&_u!==wu||(_u=Au),0!==Ou&&null!==ku&&(Rl(ku,Su),Bl(ku,Ou)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ro(),null;case 10:return eo(t),null;case 17:return mi(t.type)&&gi(),null;case 19:if(li(Io),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(u=r.rendering)){if(o)Xa(r,!1);else if(_u!==xu||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Lo(u))){for(t.effectTag|=64,Xa(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=u,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,u=e.dependencies,o.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return si(Io,1&Io.current|2),t.child}u=u.sibling}}else{if(!o)if(null!==(e=Lo(u))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Xa(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fi()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Xa(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Fi()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fi(),n.sibling=null,t=Io.current,si(Io,o?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Ka(e){switch(e.tag){case 1:mi(e.type)&&gi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ro(),li(di),li(fi),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Do(e),null;case 13:return li(Io),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return li(Io),null;case 4:return Ro(),null;case 10:return eo(e),null;default:return null}}function Za(e,t){return{value:e,source:t,stack:ve(t)}}za=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ua=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u,l,s=t.stateNode;switch(No(To.current),e=null,n){case"input":a=Ae(s,a),r=Ae(s,r),e=[];break;case"option":a=Te(s,a),r=Te(s,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=Pe(s,a),r=Pe(s,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(s.onclick=sn)}for(u in on(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in s=a[u])s.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(k.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var c=r[u];if(s=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&c!==s&&(null!=c||null!=s))if("style"===u)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(e||(e=[]),e.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(u,c)):"children"===u?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(k.hasOwnProperty(u)?(null!=c&&ln(o,u),e||s===c||(e=[])):(e=e||[]).push(u,c))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Ha=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Ja="function"==typeof WeakSet?WeakSet:Set;function eu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&ge(n.type),t=t.value,null!==e&&1===e.tag&&ge(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){yl(e,t)}else t.current=null}function nu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function iu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void iu(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Qi(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&vn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&It(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function au(e,t,n){switch("function"==typeof Al&&Al(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Hi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){yl(i,e)}}e=e.next}while(e!==r)}))}break;case 1:tu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){yl(e,t)}}(t,n);break;case 5:tu(t);break;case 4:cu(e,t,n)}}function uu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&uu(t)}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function su(e){e:{for(var t=e.return;null!==t;){if(lu(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(ze(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||lu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=sn));else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function cu(e,t,n){for(var r,i,o=t,u=!1;;){if(!u){u=o.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}u=u.return}u=!0}if(5===o.tag||6===o.tag){e:for(var l=e,s=o,c=n,f=s;;)if(au(l,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(l=r,s=o.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(au(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(u=!1)}o.sibling.return=o.return,o=o.sibling}}function fu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ru(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Cn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&ke(n,r),an(e,i),t=an(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?nn(n,l):"dangerouslySetInnerHTML"===u?Fe(n,l):"children"===u?ze(n,l):K(n,u,l,t)}switch(e){case"input":Ce(n,r);break;case"textarea":Oe(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Me(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Me(n,!!r.multiple,r.defaultValue,!0):Me(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,It(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Bu=Fi()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=tn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void du(t);case 19:return void du(t);case 17:return}throw Error(a(163))}function du(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ja),t.forEach((function(t){var r=xl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,n){(n=uo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Iu||(Iu=!0,Lu=r),eu(e,t)},n}function mu(e,t,n){(n=uo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return eu(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ju?ju=new Set([this]):ju.add(this),eu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var gu,vu=Math.ceil,yu=G.ReactCurrentDispatcher,bu=G.ReactCurrentOwner,xu=0,wu=3,Au=4,Eu=0,ku=null,Cu=null,Su=0,_u=xu,Tu=null,Mu=1073741823,Pu=1073741823,Nu=null,Ou=0,Ru=!1,Bu=0,Du=null,Iu=!1,Lu=null,ju=null,Fu=!1,zu=null,Uu=90,Hu=null,Wu=0,$u=null,Vu=0;function Yu(){return 0!=(48&Eu)?1073741821-(Fi()/10|0):0!==Vu?Vu:Vu=1073741821-(Fi()/10|0)}function qu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=zi();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Eu))return Su;if(null!==n)e=qi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=qi(e,150,100);break;case 97:case 96:e=qi(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==ku&&e===Su&&--e,e}function Qu(e,t){if(50<Wu)throw Wu=0,$u=null,Error(a(185));if(null!==(e=Xu(e,t))){var n=zi();1073741823===t?0!=(8&Eu)&&0==(48&Eu)?Ju(e):(Ku(e),0===Eu&&Vi()):Ku(e),0==(4&Eu)||98!==n&&99!==n||(null===Hu?Hu=new Map([[e,t]]):(void 0===(n=Hu.get(e))||n>t)&&Hu.set(e,t))}}function Xu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(ku===i&&(al(t),_u===Au&&Rl(i,Su)),Bl(i,t)),i}function Gu(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Ol(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Ku(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=$i(Ju.bind(null,e));else{var t=Gu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Yu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Oi&&Ei(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?$i(Ju.bind(null,e)):Wi(r,Zu.bind(null,e),{timeout:10*(1073741821-t)-Fi()}),e.callbackNode=t}}}function Zu(e,t){if(Vu=0,t)return Dl(e,t=Yu()),Ku(e),null;var n=Gu(e);if(0!==n){if(t=e.callbackNode,0!=(48&Eu))throw Error(a(327));if(ml(),e===ku&&n===Su||nl(e,n),null!==Cu){var r=Eu;Eu|=16;for(var i=il();;)try{ll();break}catch(t){rl(e,t)}if(Ji(),Eu=r,yu.current=i,1===_u)throw t=Tu,nl(e,n),Rl(e,n),Ku(e),t;if(null===Cu)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=_u,ku=null,r){case xu:case 1:throw Error(a(345));case 2:Dl(e,2<n?2:n);break;case wu:if(Rl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),1073741823===Mu&&10<(i=Bu+500-Fi())){if(Ru){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,nl(e,n);break}}if(0!==(o=Gu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(dl.bind(null,e),i);break}dl(e);break;case Au:if(Rl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),Ru&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,nl(e,n);break}if(0!==(i=Gu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Pu?r=10*(1073741821-Pu)-Fi():1073741823===Mu?r=0:(r=10*(1073741821-Mu)-5e3,0>(r=(i=Fi())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*vu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(dl.bind(null,e),r);break}dl(e);break;case 5:if(1073741823!==Mu&&null!==Nu){o=Mu;var u=Nu;if(0>=(r=0|u.busyMinDurationMs)?r=0:(i=0|u.busyDelayMs,r=(o=Fi()-(10*(1073741821-o)-(0|u.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Rl(e,n),e.timeoutHandle=bn(dl.bind(null,e),r);break}}dl(e);break;default:throw Error(a(329))}if(Ku(e),e.callbackNode===t)return Zu.bind(null,e)}}return null}function Ju(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Eu))throw Error(a(327));if(ml(),e===ku&&t===Su||nl(e,t),null!==Cu){var n=Eu;Eu|=16;for(var r=il();;)try{ul();break}catch(t){rl(e,t)}if(Ji(),Eu=n,yu.current=r,1===_u)throw n=Tu,nl(e,t),Rl(e,t),Ku(e),n;if(null!==Cu)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,ku=null,dl(e),Ku(e)}return null}function el(e,t){var n=Eu;Eu|=1;try{return e(t)}finally{0===(Eu=n)&&Vi()}}function tl(e,t){var n=Eu;Eu&=-2,Eu|=8;try{return e(t)}finally{0===(Eu=n)&&Vi()}}function nl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xn(n)),null!==Cu)for(n=Cu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&gi();break;case 3:Ro(),li(di),li(fi);break;case 5:Do(r);break;case 4:Ro();break;case 13:case 19:li(Io);break;case 10:eo(r)}n=n.return}ku=e,Cu=Sl(e.current,null),Su=t,_u=xu,Tu=null,Pu=Mu=1073741823,Nu=null,Ou=0,Ru=!1}function rl(e,t){for(;;){try{if(Ji(),Fo.current=ga,Vo)for(var n=Ho.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Uo=0,$o=Wo=Ho=null,Vo=!1,null===Cu||null===Cu.return)return _u=1,Tu=t,Cu=null;e:{var i=e,o=Cu.return,a=Cu,u=t;if(t=Su,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&a.mode)){var s=a.alternate;s?(a.updateQueue=s.updateQueue,a.memoizedState=s.memoizedState,a.expirationTime=s.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var c=0!=(1&Io.current),f=o;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!c)}}if(d){var m=f.updateQueue;if(null===m){var g=new Set;g.add(l),f.updateQueue=g}else m.add(l);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var v=uo(1073741823,null);v.tag=2,lo(a,v)}a.expirationTime=1073741823;break e}u=void 0,a=t;var y=i.pingCache;if(null===y?(y=i.pingCache=new pu,u=new Set,y.set(l,u)):void 0===(u=y.get(l))&&(u=new Set,y.set(l,u)),!u.has(a)){u.add(a);var b=bl.bind(null,i,l,a);l.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((ge(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(a))}5!==_u&&(_u=2),u=Za(u,a),f=o;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,so(f,hu(f,l,t));break e;case 1:l=u;var x=f.type,w=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof x.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===ju||!ju.has(w)))){f.effectTag|=4096,f.expirationTime=t,so(f,mu(f,l,t));break e}}f=f.return}while(null!==f)}Cu=cl(Cu)}catch(e){t=e;continue}break}}function il(){var e=yu.current;return yu.current=ga,null===e?ga:e}function ol(e,t){e<Mu&&2<e&&(Mu=e),null!==t&&e<Pu&&2<e&&(Pu=e,Nu=t)}function al(e){e>Ou&&(Ou=e)}function ul(){for(;null!==Cu;)Cu=sl(Cu)}function ll(){for(;null!==Cu&&!Ri();)Cu=sl(Cu)}function sl(e){var t=gu(e.alternate,e,Su);return e.memoizedProps=e.pendingProps,null===t&&(t=cl(e)),bu.current=null,t}function cl(e){Cu=e;do{var t=Cu.alternate;if(e=Cu.return,0==(2048&Cu.effectTag)){if(t=Ga(t,Cu,Su),1===Su||1!==Cu.childExpirationTime){for(var n=0,r=Cu.child;null!==r;){var i=r.expirationTime,o=r.childExpirationTime;i>n&&(n=i),o>n&&(n=o),r=r.sibling}Cu.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Cu.firstEffect),null!==Cu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Cu.firstEffect),e.lastEffect=Cu.lastEffect),1<Cu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Cu:e.firstEffect=Cu,e.lastEffect=Cu))}else{if(null!==(t=Ka(Cu)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Cu.sibling))return t;Cu=e}while(null!==Cu);return _u===xu&&(_u=5),null}function fl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dl(e){var t=zi();return Hi(99,pl.bind(null,e,t)),null}function pl(e,t){do{ml()}while(null!==zu);if(0!=(48&Eu))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=fl(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===ku&&(Cu=ku=null,Su=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=Eu;Eu|=32,bu.current=null,mn=Yt;var u=pn();if(hn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var s=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(s&&0!==s.rangeCount){l=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,m=0,g=0,v=u,y=null;t:for(;;){for(var b;v!==l||0!==c&&3!==v.nodeType||(p=d+c),v!==f||0!==s&&3!==v.nodeType||(h=d+s),3===v.nodeType&&(d+=v.nodeValue.length),null!==(b=v.firstChild);)y=v,v=b;for(;;){if(v===u)break t;if(y===l&&++m===c&&(p=d),y===f&&++g===s&&(h=d),null!==(b=v.nextSibling))break;y=(v=y).parentNode}v=b}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;gn={activeElementDetached:null,focusedElem:u,selectionRange:l},Yt=!1,Du=i;do{try{hl()}catch(e){if(null===Du)throw Error(a(330));yl(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=i;do{try{for(u=e,l=t;null!==Du;){var x=Du.effectTag;if(16&x&&ze(Du.stateNode,""),128&x){var w=Du.alternate;if(null!==w){var A=w.ref;null!==A&&("function"==typeof A?A(null):A.current=null)}}switch(1038&x){case 2:su(Du),Du.effectTag&=-3;break;case 6:su(Du),Du.effectTag&=-3,fu(Du.alternate,Du);break;case 1024:Du.effectTag&=-1025;break;case 1028:Du.effectTag&=-1025,fu(Du.alternate,Du);break;case 4:fu(Du.alternate,Du);break;case 8:cu(u,c=Du,l),uu(c)}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));yl(Du,e),Du=Du.nextEffect}}while(null!==Du);if(A=gn,w=pn(),x=A.focusedElem,l=A.selectionRange,w!==x&&x&&x.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(x.ownerDocument.documentElement,x)){null!==l&&hn(x)&&(w=l.start,void 0===(A=l.end)&&(A=w),"selectionStart"in x?(x.selectionStart=w,x.selectionEnd=Math.min(A,x.value.length)):(A=(w=x.ownerDocument||document)&&w.defaultView||window).getSelection&&(A=A.getSelection(),c=x.textContent.length,u=Math.min(l.start,c),l=void 0===l.end?u:Math.min(l.end,c),!A.extend&&u>l&&(c=l,l=u,u=c),c=dn(x,u),f=dn(x,l),c&&f&&(1!==A.rangeCount||A.anchorNode!==c.node||A.anchorOffset!==c.offset||A.focusNode!==f.node||A.focusOffset!==f.offset)&&((w=w.createRange()).setStart(c.node,c.offset),A.removeAllRanges(),u>l?(A.addRange(w),A.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),A.addRange(w))))),w=[];for(A=x;A=A.parentNode;)1===A.nodeType&&w.push({element:A,left:A.scrollLeft,top:A.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<w.length;x++)(A=w[x]).element.scrollLeft=A.left,A.element.scrollTop=A.top}Yt=!!mn,gn=mn=null,e.current=n,Du=i;do{try{for(x=e;null!==Du;){var E=Du.effectTag;if(36&E&&ou(x,Du.alternate,Du),128&E){w=void 0;var k=Du.ref;if(null!==k){var C=Du.stateNode;switch(Du.tag){case 5:w=C;break;default:w=C}"function"==typeof k?k(w):k.current=w}}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));yl(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=null,Bi(),Eu=o}else e.current=n;if(Fu)Fu=!1,zu=e,Uu=t;else for(Du=i;null!==Du;)t=Du.nextEffect,Du.nextEffect=null,Du=t;if(0===(t=e.firstPendingTime)&&(ju=null),1073741823===t?e===$u?Wu++:(Wu=0,$u=e):Wu=0,"function"==typeof wl&&wl(n.stateNode,r),Ku(e),Iu)throw Iu=!1,e=Lu,Lu=null,e;return 0!=(8&Eu)||Vi(),null}function hl(){for(;null!==Du;){var e=Du.effectTag;0!=(256&e)&&nu(Du.alternate,Du),0==(512&e)||Fu||(Fu=!0,Wi(97,(function(){return ml(),null}))),Du=Du.nextEffect}}function ml(){if(90!==Uu){var e=97<Uu?97:Uu;return Uu=90,Hi(e,gl)}}function gl(){if(null===zu)return!1;var e=zu;if(zu=null,0!=(48&Eu))throw Error(a(331));var t=Eu;for(Eu|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ru(5,n),iu(5,n)}}catch(t){if(null===e)throw Error(a(330));yl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Eu=t,Vi(),!0}function vl(e,t,n){lo(e,t=hu(e,t=Za(n,t),1073741823)),null!==(e=Xu(e,1073741823))&&Ku(e)}function yl(e,t){if(3===e.tag)vl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){vl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ju||!ju.has(r))){lo(n,e=mu(n,e=Za(t,e),1073741823)),null!==(n=Xu(n,1073741823))&&Ku(n);break}}n=n.return}}function bl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),ku===e&&Su===n?_u===Au||_u===wu&&1073741823===Mu&&Fi()-Bu<500?nl(e,Su):Ru=!0:Ol(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Ku(e)))}function xl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=qu(t=Yu(),e,null)),null!==(e=Xu(e,t))&&Ku(e)}gu=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||di.current)Pa=!0;else{if(r<n){switch(Pa=!1,t.tag){case 3:Fa(t),Ta();break;case 5:if(Bo(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:mi(t.type)&&bi(t);break;case 4:Oo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,si(Xi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?$a(e,t,n):(si(Io,1&Io.current),null!==(t=Qa(e,t,n))?t.sibling:null);si(Io,1&Io.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return qa(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),si(Io,Io.current),!r)return null}return Qa(e,t,n)}Pa=!1}}else Pa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=hi(t,fi.current),no(t,n),i=Qo(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mi(r)){var o=!0;bi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,oo(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&mo(t,r,u,e),i.updater=go,t.stateNode=i,i._reactInternalFiber=t,xo(t,r,e,n),t=ja(null,t,r,!0,o,n)}else t.tag=0,Na(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Cl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(i),e=Qi(i,e),o){case 0:t=Ia(null,t,i,e,n);break e;case 1:t=La(null,t,i,e,n);break e;case 11:t=Oa(null,t,i,e,n);break e;case 14:t=Ra(null,t,i,Qi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ia(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 1:return r=t.type,i=t.pendingProps,La(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 3:if(Fa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,ao(e,t),co(t,r,null,n),(r=t.memoizedState.element)===i)Ta(),t=Qa(e,t,n);else{if((i=t.stateNode.hydrate)&&(wa=wn(t.stateNode.containerInfo.firstChild),xa=t,i=Aa=!0),i)for(n=So(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Na(e,t,r,n),Ta();t=t.child}return t;case 5:return Bo(t),null===e&&Ca(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,yn(r,i)?u=null:null!==o&&yn(r,o)&&(t.effectTag|=16),Da(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Na(e,t,u,n),t=t.child),t;case 6:return null===e&&Ca(t),null;case 13:return $a(e,t,n);case 4:return Oo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Co(t,null,r,n):Na(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Oa(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 7:return Na(e,t,t.pendingProps,n),t.child;case 8:case 12:return Na(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,u=t.memoizedProps,o=i.value;var l=t.type._context;if(si(Xi,l._currentValue),l._currentValue=o,null!==u)if(l=u.value,0===(o=Lr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!di.current){t=Qa(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){u=l.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===l.tag&&((c=uo(n,null)).tag=2,lo(l,c)),l.expirationTime<n&&(l.expirationTime=n),null!==(c=l.alternate)&&c.expirationTime<n&&(c.expirationTime=n),to(l.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Na(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(i=ro(i,o.unstable_observedBits)),t.effectTag|=1,Na(e,t,r,n),t.child;case 14:return o=Qi(i=t.type,t.pendingProps),Ra(e,t,i,o=Qi(i.type,o),r,n);case 15:return Ba(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Qi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,mi(r)?(e=!0,bi(t)):e=!1,no(t,n),yo(t,r,i),xo(t,r,i,n),ja(null,t,r,!0,e,n);case 19:return qa(e,t,n)}throw Error(a(156,t.tag))};var wl=null,Al=null;function El(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function kl(e,t,n,r){return new El(e,t,n,r)}function Cl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Sl(e,t){var n=e.alternate;return null===n?((n=kl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function _l(e,t,n,r,i,o){var u=2;if(r=e,"function"==typeof e)Cl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Tl(n.children,i,o,t);case ue:u=8,i|=7;break;case re:u=8,i|=1;break;case ie:return(e=kl(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=o,e;case se:return(e=kl(13,n,t,i)).type=se,e.elementType=se,e.expirationTime=o,e;case ce:return(e=kl(19,n,t,i)).elementType=ce,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:u=10;break e;case ae:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case de:u=16,r=null;break e;case pe:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=kl(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Tl(e,t,n,r){return(e=kl(7,e,r,t)).expirationTime=n,e}function Ml(e,t,n){return(e=kl(6,e,null,t)).expirationTime=n,e}function Pl(e,t,n){return(t=kl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Nl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Ol(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Rl(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Bl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Dl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Il(e,t,n,r){var i=t.current,o=Yu(),u=po.suspense;o=qu(o,i,u);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(mi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var s=n.type;if(mi(s)){n=yi(n,s,l);break e}}n=l}else n=ci;return null===t.context?t.context=n:t.pendingContext=n,(t=uo(o,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),lo(i,t),Qu(i,o),o}function Ll(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function jl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fl(e,t){jl(e,t),(e=e.alternate)&&jl(e,t)}function zl(e,t,n){var r=new Nl(e,t,n=null!=n&&!0===n.hydrate),i=kl(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,oo(i),e[Sn]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);St.forEach((function(e){ht(e,t,n)})),_t.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Ul(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Hl(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var u=i;i=function(){var e=Ll(a);u.call(e)}}Il(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new zl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Ll(a);l.call(e)}}tl((function(){Il(t,a,e,i)}))}return Ll(a)}function Wl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function $l(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ul(t))throw Error(a(200));return Wl(e,t,null,n)}zl.prototype.render=function(e){Il(e,this._internalRoot,null,null)},zl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Il(null,e,null,(function(){t[Sn]=null}))},mt=function(e){if(13===e.tag){var t=qi(Yu(),150,100);Qu(e,t),Fl(e,t)}},gt=function(e){13===e.tag&&(Qu(e,3),Fl(e,3))},vt=function(e){if(13===e.tag){var t=Yu();Qu(e,t=qu(t,e,null)),Fl(e,t)}},T=function(e,t,n){switch(t){case"input":if(Ce(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Pn(r);if(!i)throw Error(a(90));we(r),Ce(r,i)}}}break;case"textarea":Oe(e,n);break;case"select":null!=(t=n.value)&&Me(e,!!n.multiple,t,!1)}},B=el,D=function(e,t,n,r,i){var o=Eu;Eu|=4;try{return Hi(98,e.bind(null,t,n,r,i))}finally{0===(Eu=o)&&Vi()}},I=function(){0==(49&Eu)&&(function(){if(null!==Hu){var e=Hu;Hu=null,e.forEach((function(e,t){Dl(t,e),Ku(t)})),Vi()}}(),ml())},L=function(e,t){var n=Eu;Eu|=2;try{return e(t)}finally{0===(Eu=n)&&Vi()}};var Vl,Yl,ql={Events:[Tn,Mn,Pn,S,E,Ln,function(e){it(e,In)},O,R,Kt,ut,ml,{current:!1}]};Yl=(Vl={findFiberByHostInstance:_n,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);wl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Al=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Vl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:G.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Yl?Yl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ql,t.createPortal=$l,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Eu))throw Error(a(187));var n=Eu;Eu|=1;try{return Hi(99,e.bind(null,t))}finally{Eu=n,Vi()}},t.hydrate=function(e,t,n){if(!Ul(t))throw Error(a(200));return Hl(null,e,t,!0,n)},t.render=function(e,t,n){if(!Ul(t))throw Error(a(200));return Hl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ul(e))throw Error(a(40));return!!e._reactRootContainer&&(tl((function(){Hl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Sn]=null}))})),!0)},t.unstable_batchedUpdates=el,t.unstable_createPortal=function(e,t){return $l(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ul(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Hl(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(91)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,u;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,s=null,c=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(c,0))},i=function(e,t){s=setTimeout(e,t)},o=function(){clearTimeout(s)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var g=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var v=p.now();t.unstable_now=function(){return p.now()-v}}var y=!1,b=null,x=-1,w=5,A=0;a=function(){return t.unstable_now()>=A},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,k=E.port2;E.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();A=e+w;try{b(!0,e)?k.postMessage(null):(y=!1,b=null)}catch(e){throw k.postMessage(null),e}}else y=!1},r=function(e){b=e,y||(y=!0,k.postMessage(null))},i=function(e,n){x=h((function(){e(t.unstable_now())}),n)},o=function(){m(x),x=-1}}function C(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<T(i,t)))break e;e[r]=t,e[n]=i,n=r}}function S(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],u=o+1,l=e[u];if(void 0!==a&&0>T(a,n))void 0!==l&&0>T(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>T(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function T(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var M=[],P=[],N=1,O=null,R=3,B=!1,D=!1,I=!1;function L(e){for(var t=S(P);null!==t;){if(null===t.callback)_(P);else{if(!(t.startTime<=e))break;_(P),t.sortIndex=t.expirationTime,C(M,t)}t=S(P)}}function j(e){if(I=!1,L(e),!D)if(null!==S(M))D=!0,r(F);else{var t=S(P);null!==t&&i(j,t.startTime-e)}}function F(e,n){D=!1,I&&(I=!1,o()),B=!0;var r=R;try{for(L(n),O=S(M);null!==O&&(!(O.expirationTime>n)||e&&!a());){var u=O.callback;if(null!==u){O.callback=null,R=O.priorityLevel;var l=u(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?O.callback=l:O===S(M)&&_(M),L(n)}else _(M);O=S(M)}if(null!==O)var s=!0;else{var c=S(P);null!==c&&i(j,c.startTime-n),s=!1}return s}finally{O=null,R=r,B=!1}}function z(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var U=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){D||B||(D=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return S(M)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:z(e)}else a=z(e),l=u;return e={id:N++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,C(P,e),null===S(M)&&e===S(P)&&(I?o():I=!0,i(j,l-u))):(e.sortIndex=a,C(M,e),D||B||(D=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=S(M);return n!==O&&null!==O&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<O.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(94);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(7),i=n(22);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var u=i.locals;e.hot.accept(22,(function(){"string"==typeof(i=(i=n(22)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(u,i.locals)?(u=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){var r=n(7),i=n(23);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var u=i.locals;e.hot.accept(23,(function(){"string"==typeof(i=(i=n(23)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(u,i.locals)?(u=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(99)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,g=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,x=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function A(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case v:case g:case s:return e;default:return t}}case o:return t}}}function E(e){return A(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Lazy=v,t.Memo=g,t.Portal=o,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||A(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return A(e)===c},t.isContextProvider=function(e){return A(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return A(e)===p},t.isFragment=function(e){return A(e)===a},t.isLazy=function(e){return A(e)===v},t.isMemo=function(e){return A(e)===g},t.isPortal=function(e){return A(e)===o},t.isProfiler=function(e){return A(e)===l},t.isStrictMode=function(e){return A(e)===u},t.isSuspense=function(e){return A(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===g||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===x||e.$$typeof===w||e.$$typeof===y)},t.typeOf=A},function(e,t,n){var r=n(7),i=n(24);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var u=i.locals;e.hot.accept(24,(function(){"string"==typeof(i=(i=n(24)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(u,i.locals)?(u=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){var r=n(7),i=n(25);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var u=i.locals;e.hot.accept(25,(function(){"string"==typeof(i=(i=n(25)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(u,i.locals)?(u=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){var r=n(7),i=n(26);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var u=i.locals;e.hot.accept(26,(function(){"string"==typeof(i=(i=n(26)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(u,i.locals)?(u=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){var r=n(7),i=n(27);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var u=i.locals;e.hot.accept(27,(function(){"string"==typeof(i=(i=n(27)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(u,i.locals)?(u=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){var r=n(7),i=n(28);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var u=i.locals;e.hot.accept(28,(function(){"string"==typeof(i=(i=n(28)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(u,i.locals)?(u=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=(r=n(0))&&"object"==typeof r&&"default"in r?r.default:r;function o(e){return o.warnAboutHMRDisabled&&(o.warnAboutHMRDisabled=!0,console.error("React-Hot-Loader: misconfiguration detected, using production version in non-production environment."),console.error("React-Hot-Loader: Hot Module Replacement is not enabled.")),i.Children.only(e.children)}o.warnAboutHMRDisabled=!1;var a=function e(){return e.shouldWrapWithAppContainer?function(e){return function(t){return i.createElement(o,null,i.createElement(e,t))}}:function(e){return e}};a.shouldWrapWithAppContainer=!1;t.AppContainer=o,t.hot=a,t.areComponentsEqual=function(e,t){return e===t},t.setConfig=function(){},t.cold=function(e){return e},t.configureComponent=function(){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,