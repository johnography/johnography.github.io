!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===y&&k()}(e,n),t&&t(e,n)};var n,r=!0,i="bf4fef6849423229a363",o={},a=[],l=[];function u(e){var t=M[e];if(!t)return P;var r=function(r){return t.hot.active?(M[r]?-1===M[r].parents.indexOf(e)&&M[r].parents.push(e):(a=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),a=[]),P(r)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return P[e]},set:function(t){P[e]=t}}};for(var o in P)Object.prototype.hasOwnProperty.call(P,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(e){return"ready"===f&&d("prepare"),y++,P.e(e).then(t,(function(e){throw t(),e}));function t(){y--,"prepare"===f&&(b[e]||C(e),0===y&&0===g&&k())}},r.t=function(e,t){return 1&t&&(e=r(e)),P.t(e,-2&t)},r}function s(t){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(e,t){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._acceptedDependencies[e[n]]=t||function(){};else r._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._declinedDependencies[e[t]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=r._disposeHandlers.indexOf(e);t>=0&&r._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,f){case"idle":(h={})[t]=e[t],d("ready");break;case"ready":T(t);break;case"prepare":case"check":case"dispose":case"apply":(v=v||[]).push(t)}},check:E,apply:S,status:function(e){if(!e)return f;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:o[t]};return n=void 0,r}var c=[],f="idle";function d(e){f=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}var p,h,m,v,g=0,y=0,b={},w={},x={};function A(e){return+e+""===e?+e:e}function E(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,d("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=P.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return d(_()?"ready":"idle"),null;w={},b={},x=e.c,m=e.h,d("prepare");var t=new Promise((function(e,t){p={resolve:e,reject:t}}));h={};return C(0),"prepare"===f&&0===y&&0===g&&k(),t}));var t}function C(e){x[e]?(w[e]=!0,g++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=P.p+""+e+"."+i+".hot-update.js",document.head.appendChild(t)}(e)):b[e]=!0}function k(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then((function(){return S(r)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(A(n));e.resolve(t)}}function S(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");return function t(r){var l,u,s,c,f;function p(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((c=M[o])&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var l=0;l<c.parents.length;l++){var u=c.parents[l],s=M[u];if(s){if(s.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(s.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),g(n[u],[o])):(delete n[u],t.push(u),r.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}_();var y={},b=[],w={},E=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var C in h)if(Object.prototype.hasOwnProperty.call(h,C)){var k;f=A(C),k=h[C]?p(f):{type:"disposed",moduleId:C};var S=!1,T=!1,N=!1,O="";switch(k.chain&&(O="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":r.onDeclined&&r.onDeclined(k),r.ignoreDeclined||(S=new Error("Aborted because of self decline: "+k.moduleId+O));break;case"declined":r.onDeclined&&r.onDeclined(k),r.ignoreDeclined||(S=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+O));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(k),r.ignoreUnaccepted||(S=new Error("Aborted because "+f+" is not accepted"+O));break;case"accepted":r.onAccepted&&r.onAccepted(k),T=!0;break;case"disposed":r.onDisposed&&r.onDisposed(k),N=!0;break;default:throw new Error("Unexception type "+k.type)}if(S)return d("abort"),Promise.reject(S);if(T)for(f in w[f]=h[f],g(b,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,f)&&(y[f]||(y[f]=[]),g(y[f],k.outdatedDependencies[f]));N&&(g(b,[k.moduleId]),w[f]=E)}var R,I=[];for(u=0;u<b.length;u++)f=b[u],M[f]&&M[f].hot._selfAccepted&&w[f]!==E&&!M[f].hot._selfInvalidated&&I.push({module:f,parents:M[f].parents.slice(),errorHandler:M[f].hot._selfAccepted});d("dispose"),Object.keys(x).forEach((function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)}));var D,L,j=b.slice();for(;j.length>0;)if(f=j.pop(),c=M[f]){var z={},U=c.hot._disposeHandlers;for(s=0;s<U.length;s++)(l=U[s])(z);for(o[f]=z,c.hot.active=!1,delete M[f],delete y[f],s=0;s<c.children.length;s++){var B=M[c.children[s]];B&&((R=B.parents.indexOf(f))>=0&&B.parents.splice(R,1))}}for(f in y)if(Object.prototype.hasOwnProperty.call(y,f)&&(c=M[f]))for(L=y[f],s=0;s<L.length;s++)D=L[s],(R=c.children.indexOf(D))>=0&&c.children.splice(R,1);d("apply"),void 0!==m&&(i=m,m=void 0);for(f in h=void 0,w)Object.prototype.hasOwnProperty.call(w,f)&&(e[f]=w[f]);var F=null;for(f in y)if(Object.prototype.hasOwnProperty.call(y,f)&&(c=M[f])){L=y[f];var H=[];for(u=0;u<L.length;u++)if(D=L[u],l=c.hot._acceptedDependencies[D]){if(-1!==H.indexOf(l))continue;H.push(l)}for(u=0;u<H.length;u++){l=H[u];try{l(L)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:f,dependencyId:L[u],error:e}),r.ignoreErrored||F||(F=e)}}}for(u=0;u<I.length;u++){var W=I[u];f=W.module,a=W.parents,n=f;try{P(f)}catch(e){if("function"==typeof W.errorHandler)try{W.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:f,error:t,originalError:e}),r.ignoreErrored||F||(F=t),F||(F=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:f,error:e}),r.ignoreErrored||F||(F=e)}}if(F)return d("fail"),Promise.reject(F);if(v)return t(r).then((function(e){return b.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return d("idle"),new Promise((function(e){e(b)}))}(t=t||{})}function _(){if(v)return h||(h={}),v.forEach(T),v=void 0,!0}function T(t){Object.prototype.hasOwnProperty.call(h,t)||(h[t]=e[t])}var M={};function P(t){if(M[t])return M[t].exports;var n=M[t]={i:t,l:!1,exports:{},hot:s(t),parents:(l=a,a=[],l),children:[]};return e[t].call(n.exports,n,n.exports,u(t)),n.l=!0,n.exports}P.m=e,P.c=M,P.d=function(e,t,n){P.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},P.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},P.t=function(e,t){if(1&t&&(e=P(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(P.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)P.d(n,r,function(t){return e[t]}.bind(null,r));return n},P.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return P.d(t,"a",t),t},P.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},P.p="/dist/",P.h=function(){return i},u(54)(P.s=54)}([function(e,t,n){"use strict";e.exports=n(96)},,,function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(97)},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var a,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){e.exports=n(101)()},,,function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function l(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],u=t.base?o[0]+t.base:o[0],s=n[u]||0,c="".concat(u," ").concat(s);n[u]=s+1;var f=l(c),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:c,updater:v(d,t),references:1}),r.push(c)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,t){var n,r,i;if(t.singleton){var o=m++;n=h||(h=s(t)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=s(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=l(n[r]);a[i].references--}for(var o=u(e,t),s=0;s<n.length;s++){var c=l(n[s]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=o}}}},function(e,t,n){"use strict";t.a=function(e,t){}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(4),i=n.n(r)()(!0);i.push([e.i,".container {\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-template-columns: 12px auto 12px;\n  grid-template-rows: 12px auto auto auto auto auto 12px;\n  grid-template-areas: '. . .' '. header .' '. leftmenu .' '. main .' '. rightmenu .' '.footer .' '. . .';\n  gap: 1rem;\n  place-items: start;\n}\n\n@media only screen and (min-width: 500px) {\n  .container {\n    display: grid;\n    width: 100vw;\n    height: 100vh;\n    grid-template-columns: 12px 20% auto 20% 12px;\n    grid-template-rows: 12px 12.5% auto 12.5% 12px;\n    grid-template-areas: '. . . . .' '. header header header .' '. leftmenu main rightmenu .' '. leftmenu footer footer .' '. . . . .';\n    gap: 1rem;\n    place-items: start;\n  }\n}\n\n.container > div {\n  background-color: #f39c12;\n  border-radius: 1rem;\n}\n\n.header {\n  grid-area: header;\n}\n\n.leftmenu {\n  grid-area: leftmenu;\n}\n\n.main {\n  grid-area: main;\n}\n\n.rightmenu {\n  grid-area: rightmenu;\n}\n\n.footer {\n  grid-area: footer;\n}\n","",{version:3,sources:["App.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,qCAAqC;EACrC,sDAAsD;EACtD,uGAAuG;EACvG,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE;IACE,aAAa;IACb,YAAY;IACZ,aAAa;IACb,6CAA6C;IAC7C,8CAA8C;IAC9C,kIAAkI;IAClI,SAAS;IACT,kBAAkB;EACpB;AACF;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;AACnB",file:"App.css",sourcesContent:[".container {\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-template-columns: 12px auto 12px;\n  grid-template-rows: 12px auto auto auto auto auto 12px;\n  grid-template-areas: '. . .' '. header .' '. leftmenu .' '. main .' '. rightmenu .' '.footer .' '. . .';\n  gap: 1rem;\n  place-items: start;\n}\n\n@media only screen and (min-width: 500px) {\n  .container {\n    display: grid;\n    width: 100vw;\n    height: 100vh;\n    grid-template-columns: 12px 20% auto 20% 12px;\n    grid-template-rows: 12px 12.5% auto 12.5% 12px;\n    grid-template-areas: '. . . . .' '. header header header .' '. leftmenu main rightmenu .' '. leftmenu footer footer .' '. . . . .';\n    gap: 1rem;\n    place-items: start;\n  }\n}\n\n.container > div {\n  background-color: #f39c12;\n  border-radius: 1rem;\n}\n\n.header {\n  grid-area: header;\n}\n\n.leftmenu {\n  grid-area: leftmenu;\n}\n\n.main {\n  grid-area: main;\n}\n\n.rightmenu {\n  grid-area: rightmenu;\n}\n\n.footer {\n  grid-area: footer;\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(4),i=n.n(r)()(!0);i.push([e.i,"body {\n  font-family: 'Open Sans', 'Courier New', Courier, monospace;\n  background-color: #f39c12;\n  color: #2c3e50;\n  padding: 0;\n  margin: 0;\n}\n\nh1 {\n  font-size: 44px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em;\n}\n\nh2 {\n  font-size: 33px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em 0em;\n  color: #34495e;\n}\n\nh3 {\n  font-size: 22px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em 0em;\n  color: #34495e;\n}\n\np {\n  font-family: 'Roboto', 'Courier New', Courier, monospace;\n  font-size: 18px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em;\n  color: #34495e;\n}\n\n.sidep {\n  font-family: 'Roboto', 'Courier New', Courier, monospace;\n  font-size: 18px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em;\n  color: #34495e;\n}\n\n.code {\n  font-family: 'Source Code Pro', 'Courier New', Courier, monospace;\n  font-size: 18px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em;\n  color: #34495e;\n}\n\na {\n  color: #34495e;\n}\n\na:hover {\n  color: #34495e;\n}\n\na:active {\n  color: #2c3e50;\n}\n\na:visited {\n  color: #34495e;\n}\n\n.fa-js-square {\n  color: #f7df1e;\n}\n\n.fa-react {\n  color: rgb(129, 216, 247);\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n","",{version:3,sources:["johnography.css"],names:[],mappings:"AAAA;EACE,2DAA2D;EAC3D,yBAAyB;EACzB,cAAc;EACd,UAAU;EACV,SAAS;AACX;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,SAAS;EACT,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,SAAS;EACT,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,SAAS;EACT,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,wDAAwD;EACxD,eAAe;EACf,kBAAkB;EAClB,SAAS;EACT,cAAc;EACd,cAAc;AAChB;;AAEA;EACE,wDAAwD;EACxD,eAAe;EACf,kBAAkB;EAClB,SAAS;EACT,cAAc;EACd,cAAc;AAChB;;AAEA;EACE,iEAAiE;EACjE,eAAe;EACf,kBAAkB;EAClB,SAAS;EACT,cAAc;EACd,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,eAAe;EACf,YAAY;AACd",file:"johnography.css",sourcesContent:["body {\n  font-family: 'Open Sans', 'Courier New', Courier, monospace;\n  background-color: #f39c12;\n  color: #2c3e50;\n  padding: 0;\n  margin: 0;\n}\n\nh1 {\n  font-size: 44px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em;\n}\n\nh2 {\n  font-size: 33px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em 0em;\n  color: #34495e;\n}\n\nh3 {\n  font-size: 22px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em 0em;\n  color: #34495e;\n}\n\np {\n  font-family: 'Roboto', 'Courier New', Courier, monospace;\n  font-size: 18px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em;\n  color: #34495e;\n}\n\n.sidep {\n  font-family: 'Roboto', 'Courier New', Courier, monospace;\n  font-size: 18px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em;\n  color: #34495e;\n}\n\n.code {\n  font-family: 'Source Code Pro', 'Courier New', Courier, monospace;\n  font-size: 18px;\n  line-height: 1.5em;\n  margin: 0;\n  padding: 0.5em;\n  color: #34495e;\n}\n\na {\n  color: #34495e;\n}\n\na:hover {\n  color: #34495e;\n}\n\na:active {\n  color: #2c3e50;\n}\n\na:visited {\n  color: #34495e;\n}\n\n.fa-js-square {\n  color: #f7df1e;\n}\n\n.fa-react {\n  color: rgb(129, 216, 247);\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(4),i=n.n(r)()(!0);i.push([e.i,"* {\n  box-sizing: border-box;\n}\n[class*='col-'] {\n  float: left;\n  padding: 15px;\n  /* border: 1px solid red; */\n}\n.row::after {\n  content: '';\n  clear: both;\n  display: table;\n}\n\n/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 600px) {\n  .col-xs-1 {\n    width: 8.33%;\n  }\n  .col-xs-2 {\n    width: 16.66%;\n  }\n  .col-xs-3 {\n    width: 25%;\n  }\n  .col-xs-4 {\n    width: 33.33%;\n  }\n  .col-xs-5 {\n    width: 41.66%;\n  }\n  .col-xs-6 {\n    width: 50%;\n  }\n  .col-xs-7 {\n    width: 58.33%;\n  }\n  .col-xs-8 {\n    width: 66.66%;\n  }\n  .col-xs-9 {\n    width: 75%;\n  }\n  .col-xs-10 {\n    width: 83.33%;\n  }\n  .col-xs-11 {\n    width: 91.66%;\n  }\n  .col-xs-12 {\n    width: 100%;\n  }\n}\n\n/* Small devices (portrait tablets and large phones, 600px and up) */\n@media only screen and (min-width: 600px) {\n  .col-s-1 {\n    width: 8.33%;\n  }\n  .col-s-2 {\n    width: 16.66%;\n  }\n  .col-s-3 {\n    width: 25%;\n  }\n  .col-s-4 {\n    width: 33.33%;\n  }\n  .col-s-5 {\n    width: 41.66%;\n  }\n  .col-s-6 {\n    width: 50%;\n  }\n  .col-s-7 {\n    width: 58.33%;\n  }\n  .col-s-8 {\n    width: 66.66%;\n  }\n  .col-s-9 {\n    width: 75%;\n  }\n  .col-s-10 {\n    width: 83.33%;\n  }\n  .col-s-11 {\n    width: 91.66%;\n  }\n  .col-s-12 {\n    width: 100%;\n  }\n}\n\n/* Medium devices (landscape tablets, 768px and up) */\n@media only screen and (min-width: 768px) {\n  .col-m-1 {\n    width: 8.33%;\n  }\n  .col-m-2 {\n    width: 16.66%;\n  }\n  .col-m-3 {\n    width: 25%;\n  }\n  .col-m-4 {\n    width: 33.33%;\n  }\n  .col-m-5 {\n    width: 41.66%;\n  }\n  .col-m-6 {\n    width: 50%;\n  }\n  .col-m-7 {\n    width: 58.33%;\n  }\n  .col-m-8 {\n    width: 66.66%;\n  }\n  .col-m-9 {\n    width: 75%;\n  }\n  .col-m-10 {\n    width: 83.33%;\n  }\n  .col-m-11 {\n    width: 91.66%;\n  }\n  .col-m-12 {\n    width: 100%;\n  }\n}\n\n/* Large devices (laptops/desktops, 992px and up) */\n@media only screen and (min-width: 992px) {\n  .col-l-1 {\n    width: 8.33%;\n  }\n  .col-l-2 {\n    width: 16.66%;\n  }\n  .col-l-3 {\n    width: 25%;\n  }\n  .col-l-4 {\n    width: 33.33%;\n  }\n  .col-l-5 {\n    width: 41.66%;\n  }\n  .col-l-6 {\n    width: 50%;\n  }\n  .col-l-7 {\n    width: 58.33%;\n  }\n  .col-l-8 {\n    width: 66.66%;\n  }\n  .col-l-9 {\n    width: 75%;\n  }\n  .col-l-10 {\n    width: 83.33%;\n  }\n  .col-l-11 {\n    width: 91.66%;\n  }\n  .col-l-12 {\n    width: 100%;\n  }\n}\n\n/* Extra large devices (large laptops and desktops, 1200px and up) */\n@media only screen and (min-width: 768px) {\n  /* For desktop: */\n  .col-1 {\n    width: 8.33%;\n  }\n  .col-2 {\n    width: 16.66%;\n  }\n  .col-3 {\n    width: 25%;\n  }\n  .col-4 {\n    width: 33.33%;\n  }\n  .col-5 {\n    width: 41.66%;\n  }\n  .col-6 {\n    width: 50%;\n  }\n  .col-7 {\n    width: 58.33%;\n  }\n  .col-8 {\n    width: 66.66%;\n  }\n  .col-9 {\n    width: 75%;\n  }\n  .col-10 {\n    width: 83.33%;\n  }\n  .col-11 {\n    width: 91.66%;\n  }\n  .col-12 {\n    width: 100%;\n  }\n}\n","",{version:3,sources:["responsive.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;AACA;EACE,WAAW;EACX,aAAa;EACb,2BAA2B;AAC7B;AACA;EACE,WAAW;EACX,WAAW;EACX,cAAc;AAChB;;AAEA,iDAAiD;AACjD;EACE;IACE,YAAY;EACd;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,WAAW;EACb;AACF;;AAEA,oEAAoE;AACpE;EACE;IACE,YAAY;EACd;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,WAAW;EACb;AACF;;AAEA,qDAAqD;AACrD;EACE;IACE,YAAY;EACd;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,WAAW;EACb;AACF;;AAEA,mDAAmD;AACnD;EACE;IACE,YAAY;EACd;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,WAAW;EACb;AACF;;AAEA,oEAAoE;AACpE;EACE,iBAAiB;EACjB;IACE,YAAY;EACd;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;EACA;IACE,aAAa;EACf;EACA;IACE,aAAa;EACf;EACA;IACE,WAAW;EACb;AACF",file:"responsive.css",sourcesContent:["* {\n  box-sizing: border-box;\n}\n[class*='col-'] {\n  float: left;\n  padding: 15px;\n  /* border: 1px solid red; */\n}\n.row::after {\n  content: '';\n  clear: both;\n  display: table;\n}\n\n/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 600px) {\n  .col-xs-1 {\n    width: 8.33%;\n  }\n  .col-xs-2 {\n    width: 16.66%;\n  }\n  .col-xs-3 {\n    width: 25%;\n  }\n  .col-xs-4 {\n    width: 33.33%;\n  }\n  .col-xs-5 {\n    width: 41.66%;\n  }\n  .col-xs-6 {\n    width: 50%;\n  }\n  .col-xs-7 {\n    width: 58.33%;\n  }\n  .col-xs-8 {\n    width: 66.66%;\n  }\n  .col-xs-9 {\n    width: 75%;\n  }\n  .col-xs-10 {\n    width: 83.33%;\n  }\n  .col-xs-11 {\n    width: 91.66%;\n  }\n  .col-xs-12 {\n    width: 100%;\n  }\n}\n\n/* Small devices (portrait tablets and large phones, 600px and up) */\n@media only screen and (min-width: 600px) {\n  .col-s-1 {\n    width: 8.33%;\n  }\n  .col-s-2 {\n    width: 16.66%;\n  }\n  .col-s-3 {\n    width: 25%;\n  }\n  .col-s-4 {\n    width: 33.33%;\n  }\n  .col-s-5 {\n    width: 41.66%;\n  }\n  .col-s-6 {\n    width: 50%;\n  }\n  .col-s-7 {\n    width: 58.33%;\n  }\n  .col-s-8 {\n    width: 66.66%;\n  }\n  .col-s-9 {\n    width: 75%;\n  }\n  .col-s-10 {\n    width: 83.33%;\n  }\n  .col-s-11 {\n    width: 91.66%;\n  }\n  .col-s-12 {\n    width: 100%;\n  }\n}\n\n/* Medium devices (landscape tablets, 768px and up) */\n@media only screen and (min-width: 768px) {\n  .col-m-1 {\n    width: 8.33%;\n  }\n  .col-m-2 {\n    width: 16.66%;\n  }\n  .col-m-3 {\n    width: 25%;\n  }\n  .col-m-4 {\n    width: 33.33%;\n  }\n  .col-m-5 {\n    width: 41.66%;\n  }\n  .col-m-6 {\n    width: 50%;\n  }\n  .col-m-7 {\n    width: 58.33%;\n  }\n  .col-m-8 {\n    width: 66.66%;\n  }\n  .col-m-9 {\n    width: 75%;\n  }\n  .col-m-10 {\n    width: 83.33%;\n  }\n  .col-m-11 {\n    width: 91.66%;\n  }\n  .col-m-12 {\n    width: 100%;\n  }\n}\n\n/* Large devices (laptops/desktops, 992px and up) */\n@media only screen and (min-width: 992px) {\n  .col-l-1 {\n    width: 8.33%;\n  }\n  .col-l-2 {\n    width: 16.66%;\n  }\n  .col-l-3 {\n    width: 25%;\n  }\n  .col-l-4 {\n    width: 33.33%;\n  }\n  .col-l-5 {\n    width: 41.66%;\n  }\n  .col-l-6 {\n    width: 50%;\n  }\n  .col-l-7 {\n    width: 58.33%;\n  }\n  .col-l-8 {\n    width: 66.66%;\n  }\n  .col-l-9 {\n    width: 75%;\n  }\n  .col-l-10 {\n    width: 83.33%;\n  }\n  .col-l-11 {\n    width: 91.66%;\n  }\n  .col-l-12 {\n    width: 100%;\n  }\n}\n\n/* Extra large devices (large laptops and desktops, 1200px and up) */\n@media only screen and (min-width: 768px) {\n  /* For desktop: */\n  .col-1 {\n    width: 8.33%;\n  }\n  .col-2 {\n    width: 16.66%;\n  }\n  .col-3 {\n    width: 25%;\n  }\n  .col-4 {\n    width: 33.33%;\n  }\n  .col-5 {\n    width: 41.66%;\n  }\n  .col-6 {\n    width: 50%;\n  }\n  .col-7 {\n    width: 58.33%;\n  }\n  .col-8 {\n    width: 66.66%;\n  }\n  .col-9 {\n    width: 75%;\n  }\n  .col-10 {\n    width: 83.33%;\n  }\n  .col-11 {\n    width: 91.66%;\n  }\n  .col-12 {\n    width: 100%;\n  }\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(4),i=n.n(r)()(!0);i.push([e.i,".contact-card {\n  background-color: #f39c12;\n  border: 1px solid #f39c12;\n  border-radius: 0.5em;\n  box-shadow: 4px 4px 6px #e67e22, -4px -4px 6px #f1c40f;\n}\n\n.contact-card > img {\n  display: block;\n  float: left;\n  margin: 0.5em;\n  height: 64px;\n  width: 64px;\n  border: 1px solid #313131;\n  border-radius: 0.5em;\n}\n\n.contact-card > div > p {\n  font-size: 0.82em;\n  line-height: 1em;\n}\n","",{version:3,sources:["Contact.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB,yBAAyB;EACzB,oBAAoB;EACpB,sDAAsD;AACxD;;AAEA;EACE,cAAc;EACd,WAAW;EACX,aAAa;EACb,YAAY;EACZ,WAAW;EACX,yBAAyB;EACzB,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB",file:"Contact.css",sourcesContent:[".contact-card {\n  background-color: #f39c12;\n  border: 1px solid #f39c12;\n  border-radius: 0.5em;\n  box-shadow: 4px 4px 6px #e67e22, -4px -4px 6px #f1c40f;\n}\n\n.contact-card > img {\n  display: block;\n  float: left;\n  margin: 0.5em;\n  height: 64px;\n  width: 64px;\n  border: 1px solid #313131;\n  border-radius: 0.5em;\n}\n\n.contact-card > div > p {\n  font-size: 0.82em;\n  line-height: 1em;\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(4),i=n.n(r)()(!0);i.push([e.i,".menu ul {\n  display: block;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\n.menu li {\n  margin-bottom: 0.5em;\n  border-radius: 0.25em;\n  border: 0.5em solid #ececec;\n  -webkit-box-shadow: 3px 3px 6px #b8b9be, -3px -3px 6px #fff;\n  box-shadow: 3px 3px 6px #b8b9be, -3px -3px 6px #fff;\n}\n\n.menu li a {\n  display: block;\n  text-decoration: none;\n  padding: 8px;\n  color: rgba(0, 0, 0, 0.67);\n}\n\n.menu li:hover {\n  box-shadow: none;\n  /* -webkit-box-shadow: inset 2px 2px 3px #b8b9be, inset -3px -3px 3px #fff; */\n  /* box-shadow: inset 3px 3px 6px #b8b9be, inset -3px -3px 6px #fff; */\n}\n\na {\n  font-size: 18px;\n  line-height: 1.5em;\n  /* margin: 0.5em 0em; */\n  color: rgba(0, 0, 0, 0.67);\n}\n\na:hover {\n  color: rgba(0, 0, 0, 0.67);\n}\n\na:active {\n  color: rgba(0, 0, 0, 0.25);\n}\n\na:visited {\n  color: rgba(0, 0, 0, 0.67);\n}\n","",{version:3,sources:["SideMenu.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,qBAAqB;EACrB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,oBAAoB;EACpB,qBAAqB;EACrB,2BAA2B;EAC3B,2DAA2D;EAC3D,mDAAmD;AACrD;;AAEA;EACE,cAAc;EACd,qBAAqB;EACrB,YAAY;EACZ,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;EAChB,6EAA6E;EAC7E,qEAAqE;AACvE;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,uBAAuB;EACvB,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B",file:"SideMenu.css",sourcesContent:[".menu ul {\n  display: block;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\n.menu li {\n  margin-bottom: 0.5em;\n  border-radius: 0.25em;\n  border: 0.5em solid #ececec;\n  -webkit-box-shadow: 3px 3px 6px #b8b9be, -3px -3px 6px #fff;\n  box-shadow: 3px 3px 6px #b8b9be, -3px -3px 6px #fff;\n}\n\n.menu li a {\n  display: block;\n  text-decoration: none;\n  padding: 8px;\n  color: rgba(0, 0, 0, 0.67);\n}\n\n.menu li:hover {\n  box-shadow: none;\n  /* -webkit-box-shadow: inset 2px 2px 3px #b8b9be, inset -3px -3px 3px #fff; */\n  /* box-shadow: inset 3px 3px 6px #b8b9be, inset -3px -3px 6px #fff; */\n}\n\na {\n  font-size: 18px;\n  line-height: 1.5em;\n  /* margin: 0.5em 0em; */\n  color: rgba(0, 0, 0, 0.67);\n}\n\na:hover {\n  color: rgba(0, 0, 0, 0.67);\n}\n\na:active {\n  color: rgba(0, 0, 0, 0.25);\n}\n\na:visited {\n  color: rgba(0, 0, 0, 0.67);\n}\n"]}]),t.default=i},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var r=n(0),i=n.n(r),o=(n(106),n.p+"8e172b863bd747e5e556639017427aec.jpg");function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function u(){var e=a(Object(r.useState)(!1),2),t=e[0],n=e[1];return i.a.createElement("div",{onClick:function(){return n(!t)}},i.a.createElement("p",null,"John Sullivan"),i.a.createElement("p",null,"johnography@outlook.com"),i.a.createElement("p",null,t?"415-879-2257":"Click to reveal phone number."))}function s(){return i.a.createElement("div",{className:"contact-card"},i.a.createElement("img",{src:o}),i.a.createElement(u,null))}},,,,,,,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))i.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)o.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";(function(e){var r=n(0),i=n.n(r),o=(n(5),n(103),n(104),n(105),n(35)),a=n(36),l=n(37),u=n(38),s=n(39),c=n(26),f=n(40),d=n(41),p=n(51),h=n(42),m=n(43),v=n(44),g=n(52),y=n(47),b=n(48),w=n(49),x=n(50);function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return E(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function C(e){var t=A(Object(r.useState)(null),2),n=t[0],p=t[1],E=[{name:"Home",link:"/",color:"rgba(140,70,70,0.25)",component:i.a.createElement(u.a,null)},{name:"HTML5, CSS3, & Web Standards",link:"/html",color:"rgba(70,140,70,0.25)",component:i.a.createElement(s.a,null)},{name:"JavaScript",link:"/javascript",color:"rgba(70,70,140,0.25)",component:i.a.createElement(h.a,null)},{name:"TypeScript",link:"/typescript",color:"rgba(70,140,140,0.25)",component:i.a.createElement(m.a,null)},{name:"ReactJS & Web Components",link:"/react",color:"rgba(140,70,140,0.25)",component:i.a.createElement(v.a,null)},{name:"D3 & Data Visualization",link:"/deethree",color:"rgba(140,140,70,0.25)",component:i.a.createElement(g.a,null)},{name:"ESLint & Code Readability",link:"/eslint",color:"rgba(140,140,140,0.25)",component:i.a.createElement(b.a,null)},{name:"Babel",link:"/babel",color:"rgba(210,140,140,0.25)",component:i.a.createElement(y.a,null)},{name:"Webpack",link:"/webpack",color:"rgba(140,210,140,0.25)",component:i.a.createElement(w.a,null)},{name:"Jest & Testing",link:"/jest",color:"rgba(140,140,210,0.25)",component:i.a.createElement(x.a,null)}];return Object(r.useEffect)((function(){p(0)}),[]),i.a.createElement("div",{className:"App"},i.a.createElement("div",{className:"container"},i.a.createElement("div",{className:"header"},i.a.createElement(o.a,null)),i.a.createElement("div",{className:"leftmenu"},i.a.createElement(a.a,{menuItems:E,menuSelection:n,setMenuSelection:p})),i.a.createElement("div",{className:"main"},i.a.createElement(l.a,{menuItems:E,menuSelection:n})),i.a.createElement("div",{className:"rightmenu"},i.a.createElement(c.a,null),i.a.createElement(f.a,null)),i.a.createElement("div",{className:"footer"},i.a.createElement(d.a,null))))}C.propTypes={},t.a=Object(p.hot)(e)(C)}).call(this,n(100)(e))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);n(26);function o(){return i.a.createElement("div",null,i.a.createElement("h1",null,"Technical Portfolio"))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);n(107);function o(e){var t=e.menuItems,n=(e.menuSelection,e.setMenuSelection);return t&&i.a.createElement("div",{className:"menu"},i.a.createElement("ul",null,t.map((function(e,t){return i.a.createElement("li",{key:t,style:{backgroundColor:e.color},onClick:function(){return n(t)}},e.name)}))))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n(0);function r(e){var t=e.menuItems,n=e.menuSelection;return t&&null!=n&&t[n].component}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement(i.a.Fragment,null,i.a.createElement("h2",null,"Site As An Example"),i.a.createElement("p",null,"This site was created as way to showcase my work as a software engineer. Most of my professional experience has been for corporate intranets, which are not accessible by the public. Please take a look around!"),i.a.createElement("h3",null,"Heading 3"),i.a.createElement("p",null,"Here is a showcase of my current projects and coding examples. Enjoy!"),i.a.createElement("p",null,"Sincerely,",i.a.createElement("br",null),"John Sullivan"))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("h1",null,"HTML5, CSS3, & Web Standards"),i.a.createElement("div",{className:"row"},i.a.createElement("div",{className:"col-6"},i.a.createElement("i",{className:"fab fa-html5 fa-10x"})),i.a.createElement("div",{className:"col-6"},i.a.createElement("i",{className:"fab fa-css3 fa-10x"}))))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",{className:"neumorphic-shadows"},i.a.createElement("h3",null,"About Me"),i.a.createElement("p",{className:"sidep"},"I have had an interest in technology from a young age."))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("h3",null,"About This Site"),i.a.createElement("p",null,"All elements and components used for this website have been hand-coded and can be viewed on my"," ",i.a.createElement("a",{href:"https://github.com/johnography",target:"_blank"},"GitHub"),"."))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("i",{className:"fab fa-js-square fa-10x"}),i.a.createElement("h1",null,"JavaScript"),i.a.createElement("p",null,"Here is a new paragraph"),i.a.createElement("p",{className:"code"},"let love = personA + personB"),i.a.createElement("i",{className:"fab fa-npm fa-10x"}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("h1",null,"TypeScript"))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("i",{className:"fab fa-react fa-10x"}),i.a.createElement("h2",null,"ReactJS & Web Components"),i.a.createElement("p",null,"This website has been setup as a SPA (Single Page Application) using a custom installation of ReactJS. The visual components that make up the site have been all written from scratch."))}},function(e,t,n){"use strict";(function(e){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1-lts
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}();var i=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),r))}};function o(e){return e&&"[object Function]"==={}.toString.call(e)}function a(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function l(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function u(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=a(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:u(l(e))}function s(e){return e&&e.referenceNode?e.referenceNode:e}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function d(e){return 11===e?c:10===e?f:c||f}function p(e){if(!e)return document.documentElement;for(var t=d(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===a(n,"position")?p(n):n:e?e.ownerDocument.documentElement:document.documentElement}function h(e){return null!==e.parentNode?h(e.parentNode):e}function m(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,l,u=o.commonAncestorContainer;if(e!==u&&t!==u||r.contains(i))return"BODY"===(l=(a=u).nodeName)||"HTML"!==l&&p(a.firstElementChild)!==a?p(u):u;var s=h(e);return s.host?m(s.host,t):m(e,h(t).host)}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",r=e.nodeName;if("BODY"===r||"HTML"===r){var i=e.ownerDocument.documentElement,o=e.ownerDocument.scrollingElement||i;return o[n]}return e[n]}function g(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=v(t,"top"),i=v(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}function y(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"])+parseFloat(e["border"+r+"Width"])}function b(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],d(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,r=d(10)&&getComputedStyle(n);return{height:b("Height",t,n,r),width:b("Width",t,n,r)}}var x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},A=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function k(e){return C({},e,{right:e.left+e.width,bottom:e.top+e.height})}function S(e){var t={};try{if(d(10)){t=e.getBoundingClientRect();var n=v(e,"top"),r=v(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?w(e.ownerDocument):{},l=o.width||e.clientWidth||i.width,u=o.height||e.clientHeight||i.height,s=e.offsetWidth-l,c=e.offsetHeight-u;if(s||c){var f=a(e);s-=y(f,"x"),c-=y(f,"y"),i.width-=s,i.height-=c}return k(i)}function _(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=d(10),i="HTML"===t.nodeName,o=S(e),l=S(t),s=u(e),c=a(t),f=parseFloat(c.borderTopWidth),p=parseFloat(c.borderLeftWidth);n&&i&&(l.top=Math.max(l.top,0),l.left=Math.max(l.left,0));var h=k({top:o.top-l.top-f,left:o.left-l.left-p,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!r&&i){var m=parseFloat(c.marginTop),v=parseFloat(c.marginLeft);h.top-=f-m,h.bottom-=f-m,h.left-=p-v,h.right-=p-v,h.marginTop=m,h.marginLeft=v}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(h=g(h,t)),h}function T(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=_(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:v(n),l=t?0:v(n,"left"),u={top:a-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:i,height:o};return k(u)}function M(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===a(e,"position"))return!0;var n=l(e);return!!n&&M(n)}function P(e){if(!e||!e.parentElement||d())return document.documentElement;for(var t=e.parentElement;t&&"none"===a(t,"transform");)t=t.parentElement;return t||document.documentElement}function N(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?P(e):m(e,s(t));if("viewport"===r)o=T(a,i);else{var c=void 0;"scrollParent"===r?"BODY"===(c=u(l(t))).nodeName&&(c=e.ownerDocument.documentElement):c="window"===r?e.ownerDocument.documentElement:r;var f=_(c,a,i);if("HTML"!==c.nodeName||M(a))o=f;else{var d=w(e.ownerDocument),p=d.height,h=d.width;o.top+=f.top-f.marginTop,o.bottom=p+f.top,o.left+=f.left-f.marginLeft,o.right=h+f.left}}var v="number"==typeof(n=n||0);return o.left+=v?n:n.left||0,o.top+=v?n:n.top||0,o.right-=v?n:n.right||0,o.bottom-=v?n:n.bottom||0,o}function O(e){return e.width*e.height}function R(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=N(n,r,o,i),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},u=Object.keys(l).map((function(e){return C({key:e},l[e],{area:O(l[e])})})).sort((function(e,t){return t.area-e.area})),s=u.filter((function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight})),c=s.length>0?s[0].key:u[0].key,f=e.split("-")[1];return c+(f?"-"+f:"")}function I(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=r?P(t):m(t,s(n));return _(n,i,r)}function D(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function L(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function j(e,t,n){n=n.split("-")[0];var r=D(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",l=o?"left":"top",u=o?"height":"width",s=o?"width":"height";return i[a]=t[a]+t[u]/2-r[u]/2,i[l]=n===l?t[l]-r[s]:t[L(l)],i}function z(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function U(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===n}));var r=z(e,(function(e){return e[t]===n}));return e.indexOf(r)}(e,"name",n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&o(n)&&(t.offsets.popper=k(t.offsets.popper),t.offsets.reference=k(t.offsets.reference),t=n(t,e))})),t}function B(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=I(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=R(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=j(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=U(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function F(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function W(){return this.state.isDestroyed=!0,F(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function $(e){var t=e.ownerDocument;return t?t.defaultView:window}function V(e,t,n,r){n.updateBound=r,$(e).addEventListener("resize",n.updateBound,{passive:!0});var i=u(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(u(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function Y(){this.state.eventsEnabled||(this.state=V(this.reference,this.options,this.state,this.scheduleUpdate))}function q(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,$(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function Q(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function X(e,t){Object.keys(t).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Q(t[n])&&(r="px"),e.style[n]=t[n]+r}))}var K=n&&/Firefox/i.test(navigator.userAgent);function Z(e,t,n){var r=z(e,(function(e){return e.name===t})),i=!!r&&e.some((function(e){return e.name===n&&e.enabled&&e.order<r.order}));if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var G=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],J=G.slice(3);function ee(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=J.indexOf(e),r=J.slice(n+1).concat(J.slice(0,n));return t?r.reverse():r}var te="flip",ne="clockwise",re="counterclockwise";function ie(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map((function(e){return e.trim()})),l=a.indexOf(z(a,(function(e){return-1!==e.search(/,|\s/)})));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,s=-1!==l?[a.slice(0,l).concat([a[l].split(u)[0]]),[a[l].split(u)[1]].concat(a.slice(l+1))]:[a];return(s=s.map((function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var l=void 0;switch(a){case"%p":l=n;break;case"%":case"%r":default:l=r}return k(l)[t]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(e,i,t,n)}))}))).forEach((function(e,t){e.forEach((function(n,r){Q(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))}))})),i}var oe={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,l=-1!==["bottom","top"].indexOf(n),u=l?"left":"top",s=l?"width":"height",c={start:E({},u,o[u]),end:E({},u,o[u]+o[s]-a[s])};e.offsets.popper=C({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,l=r.split("-")[0],u=void 0;return u=Q(+n)?[+n,0]:ie(n,o,a,l),"left"===l?(o.top+=u[0],o.left-=u[1]):"right"===l?(o.top+=u[0],o.left+=u[1]):"top"===l?(o.left+=u[0],o.top-=u[1]):"bottom"===l&&(o.left+=u[0],o.top+=u[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||p(e.instance.popper);e.instance.reference===n&&(n=p(n));var r=H("transform"),i=e.instance.popper.style,o=i.top,a=i.left,l=i[r];i.top="",i.left="",i[r]="";var u=N(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=o,i.left=a,i[r]=l,t.boundaries=u;var s=t.priority,c=e.offsets.popper,f={primary:function(e){var n=c[e];return c[e]<u[e]&&!t.escapeWithReference&&(n=Math.max(c[e],u[e])),E({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>u[e]&&!t.escapeWithReference&&(r=Math.min(c[n],u[e]-("right"===e?c.width:c.height))),E({},n,r)}};return s.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=C({},c,f[t](e))})),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),l=a?"right":"bottom",u=a?"left":"top",s=a?"width":"height";return n[l]<o(r[u])&&(e.offsets.popper[u]=o(r[u])-n[s]),n[u]>o(r[l])&&(e.offsets.popper[u]=o(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Z(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,l=o.popper,u=o.reference,s=-1!==["left","right"].indexOf(i),c=s?"height":"width",f=s?"Top":"Left",d=f.toLowerCase(),p=s?"left":"top",h=s?"bottom":"right",m=D(r)[c];u[h]-m<l[d]&&(e.offsets.popper[d]-=l[d]-(u[h]-m)),u[d]+m>l[h]&&(e.offsets.popper[d]+=u[d]+m-l[h]),e.offsets.popper=k(e.offsets.popper);var v=u[d]+u[c]/2-m/2,g=a(e.instance.popper),y=parseFloat(g["margin"+f]),b=parseFloat(g["border"+f+"Width"]),w=v-e.offsets.popper[d]-y-b;return w=Math.max(Math.min(l[c]-m,w),0),e.arrowElement=r,e.offsets.arrow=(E(n={},d,Math.round(w)),E(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(F(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=N(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=L(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case te:a=[r,i];break;case ne:a=ee(r);break;case re:a=ee(r,!0);break;default:a=t.behavior}return a.forEach((function(l,u){if(r!==l||a.length===u+1)return e;r=e.placement.split("-")[0],i=L(r);var s=e.offsets.popper,c=e.offsets.reference,f=Math.floor,d="left"===r&&f(s.right)>f(c.left)||"right"===r&&f(s.left)<f(c.right)||"top"===r&&f(s.bottom)>f(c.top)||"bottom"===r&&f(s.top)<f(c.bottom),p=f(s.left)<f(n.left),h=f(s.right)>f(n.right),m=f(s.top)<f(n.top),v=f(s.bottom)>f(n.bottom),g="left"===r&&p||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,y=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&h||!y&&"start"===o&&m||!y&&"end"===o&&v),w=!!t.flipVariationsByContent&&(y&&"start"===o&&h||y&&"end"===o&&p||!y&&"start"===o&&v||!y&&"end"===o&&m),x=b||w;(d||g||x)&&(e.flipped=!0,(d||g)&&(r=a[u+1]),x&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=C({},e.offsets.popper,j(e.instance.popper,e.offsets.reference,e.placement)),e=U(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(l?i[a?"width":"height"]:0),e.placement=L(t),e.offsets.popper=k(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Z(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=z(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=z(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,l=p(e.instance.popper),u=S(l),s={position:i.position},c=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,l=function(e){return e},u=o(i.width),s=o(r.width),c=-1!==["left","right"].indexOf(e.placement),f=-1!==e.placement.indexOf("-"),d=t?c||f||u%2==s%2?o:a:l,p=t?o:l;return{left:d(u%2==1&&s%2==1&&!f&&t?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:d(r.right)}}(e,window.devicePixelRatio<2||!K),f="bottom"===n?"top":"bottom",d="right"===r?"left":"right",h=H("transform"),m=void 0,v=void 0;if(v="bottom"===f?"HTML"===l.nodeName?-l.clientHeight+c.bottom:-u.height+c.bottom:c.top,m="right"===d?"HTML"===l.nodeName?-l.clientWidth+c.right:-u.width+c.right:c.left,a&&h)s[h]="translate3d("+m+"px, "+v+"px, 0)",s[f]=0,s[d]=0,s.willChange="transform";else{var g="bottom"===f?-1:1,y="right"===d?-1:1;s[f]=v*g,s[d]=m*y,s.willChange=f+", "+d}var b={"x-placement":e.placement};return e.attributes=C({},b,e.attributes),e.styles=C({},s,e.styles),e.arrowStyles=C({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return X(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&X(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=I(i,t,e,n.positionFixed),a=R(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),X(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},ae=function(){function e(t,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=C({},e.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(C({},e.Defaults.modifiers,a.modifiers)).forEach((function(t){r.options.modifiers[t]=C({},e.Defaults.modifiers[t]||{},a.modifiers?a.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return C({name:e},r.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&o(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)})),this.update();var l=this.options.eventsEnabled;l&&this.enableEventListeners(),this.state.eventsEnabled=l}return A(e,[{key:"update",value:function(){return B.call(this)}},{key:"destroy",value:function(){return W.call(this)}},{key:"enableEventListeners",value:function(){return Y.call(this)}},{key:"disableEventListeners",value:function(){return q.call(this)}}]),e}();ae.Utils=("undefined"!=typeof window?window:e).PopperUtils,ae.placements=G,ae.Defaults=oe,t.a=ae}).call(this,n(108))},function(e,t,n){"use strict";var r=n(109),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||i}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=p(n);i&&i!==h&&e(t,i,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<a.length;++v){var g=a[v];if(!(o[g]||r&&r[g]||m&&m[g]||l&&l[g])){var y=d(n,g);try{s(t,g,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("h1",null,"Babel & Transpiling"))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("h1",null,"ESLint & Code Readability"),i.a.createElement("i",{className:"fas fa-code fa-10x"}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("h1",null,"Webpack"))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0),i=n.n(r);function o(){return i.a.createElement("div",null,i.a.createElement("h1",null,"Jest & Testing"),i.a.createElement("i",{class:"fas fa-vial fa-10x"}))}},function(e,t,n){"use strict";e.exports=n(111)},function(e,t,n){"use strict";n.d(t,"a",(function(){return Wf}));var r=n(0),i=n.n(r),o=function(e){return e?{width:e.offsetWidth,height:e.offsetHeight}:{width:0,height:0}};var a=function(e){var t=Object(r.useState)(o(e&&e.current||{})),n=t[0],i=t[1],a=Object(r.useCallback)((function(){e.current&&i(o(e.current))}),[e,i]);return Object(r.useLayoutEffect)((function(){if(!e||e.current){var t=e&&e.current||{};if(a(),"function"==typeof ResizeObserver){var n=new ResizeObserver((function(){a()}));return n.observe(e.current),function(){n.disconnect(t),n=null}}return window.addEventListener("resize",a),function(){window.removeEventListener("resize",a)}}}),[e,a]),n};function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){if(e){if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?u(e,t):void 0}}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return n}}(e,t)||s(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}function d(e,t){if(null==e)return{};var n,r,i=f(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=n(3),m=n.n(h);n(5);function v(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=v(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var g=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=v(e))&&(r&&(r+=" "),r+=t);return r};function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e){return e&&"object"===y(e)&&e.constructor===Object}function w(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},r=n.clone?l({},e):e;return b(e)&&b(t)&&Object.keys(t).forEach((function(i){"__proto__"!==i&&(b(t[i])&&i in e?r[i]=w(e[i],t[i],n):r[i]=t[i])})),r}function x(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}function A(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function E(e){if(e.type)return e;if("#"===e.charAt(0))return E(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(x(3,e));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function C(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function k(e){var t="hsl"===(e=E(e)).type?E(function(e){var t=(e=E(e)).values,n=t[0],r=t[1]/100,i=t[2]/100,o=r*Math.min(i,1-i),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return i-o*Math.max(Math.min(t-3,9-t,1),-1)},l="rgb",u=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),C({type:l,values:u})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function S(e,t){return e=E(e),t=A(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,C(e)}function _(e,t){if(e=E(e),t=A(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return C(e)}function T(e,t){if(e=E(e),t=A(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return C(e)}var M=n(46),P=n.n(M),N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O="object"===("undefined"==typeof window?"undefined":N(window))&&"object"===("undefined"==typeof document?"undefined":N(document))&&9===document.nodeType;n(9);function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t,n){return t&&R(e.prototype,t),n&&R(e,n),e}var D=n(10);function L(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var j={}.constructor;function z(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(z);if(e.constructor!==j)return e;var t={};for(var n in e)t[n]=z(e[n]);return t}function U(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,i=z(t),o=r.plugins.onCreateRule(e,i,n);return o||(e[0],null)}var B=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function F(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=B(e[r]," ");else n=B(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function H(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function W(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var i=n.indent,o=void 0===i?0:i,a=t.fallbacks;if(e&&o++,a)if(Array.isArray(a))for(var l=0;l<a.length;l++){var u=a[l];for(var s in u){var c=u[s];null!=c&&(r&&(r+="\n"),r+=""+H(s+": "+F(c)+";",o))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=""+H(f+": "+F(d)+";",o))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+H(p+": "+F(h)+";",o))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),H(e+" {"+r,--o)+H("}",o)):r}var $=/([[\].#*$><+~=|^:(),"'`\s])/g,V="undefined"!=typeof CSS&&CSS.escape,Y=function(e){return V?V(e):e.replace($,"\\$1")},q=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,i=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:i&&(this.renderer=new i)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var i=t;n&&!1===n.process||(i=this.options.jss.plugins.onChangeValue(t,e,this));var o=null==i||!1===i,a=e in this.style;if(o&&!a&&!r)return this;var l=o&&a;if(l?delete this.style[e]:this.style[e]=i,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,i),this;var u=this.options.sheet;return u&&u.attached,this},e}(),Q=function(e){function t(t,n,r){var i;(i=e.call(this,t,n,r)||this).selectorText=void 0,i.id=void 0,i.renderable=void 0;var o=r.selector,a=r.scoped,l=r.sheet,u=r.generateId;return o?i.selectorText=o:!1!==a&&(i.id=u(L(L(i)),l),i.selectorText="."+Y(i.id)),i}Object(D.a)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=F(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?l({},e,{allowEmpty:!0}):e;return W(this.selectorText,this.style,n)},I(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(q),X={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new Q(e,t,n)}},K={indent:1,children:!0},Z=/@([\w-]+)/,G=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.query=n.name;var r=e.match(Z);for(var i in this.at=r?r[1]:"unknown",this.options=n,this.rules=new xe(l({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=K),null==e.indent&&(e.indent=K.indent),null==e.children&&(e.children=K.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),J=/@media|@supports\s+/,ee={onCreateRule:function(e,t,n){return J.test(e)?new G(e,t,n):null}},te={indent:1,children:!0},ne=/@keyframes\s+([\w-]+)/,re=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(ne);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,o=n.sheet,a=n.generateId;for(var u in this.id=!1===i?this.name:Y(a(this,o)),this.rules=new xe(l({},n,{parent:this})),t)this.rules.add(u,t[u],l({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=te),null==e.indent&&(e.indent=te.indent),null==e.children&&(e.children=te.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),ie=/@keyframes\s+/,oe=/\$([\w-]+)/g,ae=function(e,t){return"string"==typeof e?e.replace(oe,(function(e,n){return n in t?t[n]:e})):e},le=function(e,t,n){var r=e[t],i=ae(r,n);i!==r&&(e[t]=i)},ue={onCreateRule:function(e,t,n){return"string"==typeof e&&ie.test(e)?new re(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&le(e,"animation-name",n.keyframes),"animation"in e&&le(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return ae(e,r.keyframes);default:return e}}},se=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return Object(D.a)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?l({},e,{allowEmpty:!0}):e;return W(this.key,this.style,n)},t}(q),ce={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new se(e,t,n):null}},fe=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=W(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return W(this.at,this.style,e)},e}(),de=/@font-face/,pe={onCreateRule:function(e,t,n){return de.test(e)?new fe(e,t,n):null}},he=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return W(this.key,this.style,e)},e}(),me={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new he(e,t,n):null}},ve=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),ge={"@charset":!0,"@import":!0,"@namespace":!0},ye=[X,ee,ue,ce,pe,me,{onCreateRule:function(e,t,n){return e in ge?new ve(e,t,n):null}}],be={process:!0},we={force:!0,process:!0},xe=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,i=r.parent,o=r.sheet,a=r.jss,u=r.Renderer,s=r.generateId,c=r.scoped,f=l({classes:this.classes,parent:i,sheet:o,jss:a,Renderer:u,generateId:s,scoped:c,name:e},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(f.selector="."+Y(this.classes[d]));var p=U(d,t,f);if(!p)return null;this.register(p);var h=void 0===f.index?this.index.length:f.index;return this.index.splice(h,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof Q?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof re&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof Q?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof re&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=be);var i=this.options,o=i.jss.plugins,a=i.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,u=l.style;if(o.onUpdate(n,t,a,r),r.process&&u&&u!==l.style){for(var s in o.onProcessStyle(l.style,l,a),l.style){var c=l.style[s];c!==u[s]&&l.prop(s,c,we)}for(var f in u){var d=l.style[f],p=u[f];null==d&&d!==p&&l.prop(f,null,we)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,i=0;i<this.index.length;i++){var o=this.index[i].toString(e);(o||r)&&(t&&(t+="\n"),t+=o)}return t},e}(),Ae=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=l({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new xe(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var i=this.rules.add(e,t,n);return i?(this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(r?r.push(i):(this.insertRule(i),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),i):i:(this.deployed=!1,i)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var i=this.addRule(r,e[r],t);i&&n.push(i)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),Ee=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var i=this.registry.onCreateRule[r](e,t,n);if(i)return i}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var i=0;i<this.registry.onUpdate.length;i++)this.registry.onUpdate[i](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,i=0;i<this.registry.onChangeValue.length;i++)r=this.registry.onChangeValue[i](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),Ce=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=f(t,["attached"]),i="",o=0;o<this.registry.length;o++){var a=this.registry[o];null!=n&&a.attached!==n||(i&&(i+="\n"),i+=a.toString(r))}return i},I(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),ke="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),Se="2f1acc6c3a606b082e5eef5e54414ffb";null==ke[Se]&&(ke[Se]=0);var _e=ke[Se]++,Te=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var i="",o="";return r&&(r.options.classNamePrefix&&(o=r.options.classNamePrefix),null!=r.options.jss.id&&(i=String(r.options.jss.id))),e.minify?""+(o||"c")+_e+i+t:o+n.key+"-"+_e+(i?"-"+i:"")+"-"+t}},Me=function(e){var t;return function(){return t||(t=e()),t}};function Pe(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function Ne(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=F(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function Oe(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function Re(e,t){return e.selectorText=t,e.selectorText===t}var Ie=Me((function(){return document.querySelector("head")}));function De(e){var t=Ce.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var i=function(e){for(var t=Ie(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(i)return{parent:i.parentNode,node:i.nextSibling}}return!1}var Le=Me((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),je=function(e,t,n){var r=e.cssRules.length;(void 0===n||n>r)&&(n=r);try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},ze=function(){function e(e){this.getPropertyValue=Pe,this.setProperty=Ne,this.removeProperty=Oe,this.setSelector=Re,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&Ce.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,i=t.element;this.element=i||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var o=Le();o&&this.element.setAttribute("nonce",o)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=De(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var i=n,o=i.parentNode;o&&o.insertBefore(e,i.nextSibling)}else Ie().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){var e=this.element.parentNode;e&&e.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,i=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(i=je(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,i),i)}if(e.renderable&&e.renderable.parentStyleSheet===this.element.sheet)return e.renderable;var o=e.toString();if(!o)return!1;var a=je(n,o,t);return!1!==a&&(this.hasInsertedRules=!0,e.renderable=a,a)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),Ue=0,Be=function(){function e(e){this.id=Ue++,this.version="10.3.0",this.plugins=new Ee,this.options={id:{minify:!1},createGenerateId:Te,Renderer:O?ze:null,plugins:[]},this.generateId=Te({minify:!1});for(var t=0;t<ye.length;t++)this.plugins.use(ye[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=l({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===Ce.index?0:Ce.index+1);var r=new Ae(e,l({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),Ce.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=l({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var i=U(e,t,r);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();var Fe="undefined"!=typeof CSS&&CSS&&"number"in CSS,He=function(e){return new Be(e)};
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */He();function We(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;e.Component;if(!n)return t;var r=l({},t);return Object.keys(n).forEach((function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))})),r}var $e={set:function(e,t,n,r){var i=e.get(t);i||(i=new Map,e.set(t,i)),i.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};var Ve=i.a.createContext(null);function Ye(){return i.a.useContext(Ve)}var qe="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__",Qe=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var Xe=Date.now(),Ke="fnValues"+Xe,Ze="fnStyle"+ ++Xe;var Ge=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=U(e,{},n);return r[Ze]=t,r},onProcessStyle:function(e,t){if(Ke in t||Ze in t)return e;var n={};for(var r in e){var i=e[r];"function"==typeof i&&(delete e[r],n[r]=i)}return t[Ke]=n,e},onUpdate:function(e,t,n,r){var i=t,o=i[Ze];o&&(i.style=o(e)||{});var a=i[Ke];if(a)for(var l in a)i.prop(l,a[l](e),r)}}},Je="@global",et=function(){function e(e,t,n){for(var r in this.type="global",this.at=Je,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new xe(l({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),tt=function(){function e(e,t,n){this.type="global",this.at=Je,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr("@global ".length);this.rule=n.jss.createRule(r,t,l({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),nt=/\s*,\s*/g;function rt(e,t){for(var n=e.split(nt),r="",i=0;i<n.length;i++)r+=t+" "+n[i].trim(),n[i+1]&&(r+=", ");return r}var it=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Je)return new et(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,"@global ".length))return new tt(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,r=n?n[Je]:null;if(r){for(var i in r)t.sheet.addRule(i,r[i],l({},t,{selector:rt(i,e.selector)}));delete n[Je]}}(e),function(e){var t=e.options,n=e.style;for(var r in n)if("@"===r[0]&&r.substr(0,Je.length)===Je){var i=rt(r.substr(Je.length),e.selector);t.sheet.addRule(i,n[r],l({},t,{selector:i})),delete n[r]}}(e))}}},ot=/\s*,\s*/g,at=/&/g,lt=/\$([\w-]+)/g;var ut=function(){function e(e,t){return function(n,r){var i=e.getRule(r)||t&&t.getRule(r);return i?(i=i).selector:r}}function t(e,t){for(var n=t.split(ot),r=e.split(ot),i="",o=0;o<n.length;o++)for(var a=n[o],l=0;l<r.length;l++){var u=r[l];i&&(i+=", "),i+=-1!==u.indexOf("&")?u.replace(at,a):a+" "+u}return i}function n(e,t,n){if(n)return l({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var i=l({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(r,i,o){if("style"!==i.type)return r;var a,u,s=i,c=s.options.parent;for(var f in r){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(a=n(s,c,a),d){var h=t(f,s.selector);u||(u=e(c,o)),h=h.replace(lt,u),c.addRule(h,r[f],l({},a,{selector:h}))}else p&&c.addRule(f,{},a).addRule(s.key,r[f],{selector:s.selector});delete r[f]}}return r}}},st=/[A-Z]/g,ct=/^ms-/,ft={};function dt(e){return"-"+e.toLowerCase()}var pt=function(e){if(ft.hasOwnProperty(e))return ft[e];var t=e.replace(st,dt);return ft[e]=ct.test(t)?"-"+t:t};function ht(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:pt(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(ht):t.fallbacks=ht(e.fallbacks)),t}var mt=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=ht(e[t]);return e}return ht(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=pt(t);return t===r?e:(n.prop(r,e),null)}}},vt=Fe&&CSS?CSS.px:"px",gt=Fe&&CSS?CSS.ms:"ms",yt=Fe&&CSS?CSS.percent:"%";function bt(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var i in e)r[i]=e[i],r[i.replace(t,n)]=e[i];return r}var wt=bt({"animation-delay":gt,"animation-duration":gt,"background-position":vt,"background-position-x":vt,"background-position-y":vt,"background-size":vt,border:vt,"border-bottom":vt,"border-bottom-left-radius":vt,"border-bottom-right-radius":vt,"border-bottom-width":vt,"border-left":vt,"border-left-width":vt,"border-radius":vt,"border-right":vt,"border-right-width":vt,"border-top":vt,"border-top-left-radius":vt,"border-top-right-radius":vt,"border-top-width":vt,"border-width":vt,margin:vt,"margin-bottom":vt,"margin-left":vt,"margin-right":vt,"margin-top":vt,padding:vt,"padding-bottom":vt,"padding-left":vt,"padding-right":vt,"padding-top":vt,"mask-position-x":vt,"mask-position-y":vt,"mask-size":vt,height:vt,width:vt,"min-height":vt,"max-height":vt,"min-width":vt,"max-width":vt,bottom:vt,left:vt,top:vt,right:vt,"box-shadow":vt,"text-shadow":vt,"column-gap":vt,"column-rule":vt,"column-rule-width":vt,"column-width":vt,"font-size":vt,"font-size-delta":vt,"letter-spacing":vt,"text-indent":vt,"text-stroke":vt,"text-stroke-width":vt,"word-spacing":vt,motion:vt,"motion-offset":vt,outline:vt,"outline-offset":vt,"outline-width":vt,perspective:vt,"perspective-origin-x":yt,"perspective-origin-y":yt,"transform-origin":yt,"transform-origin-x":yt,"transform-origin-y":yt,"transform-origin-z":yt,"transition-delay":gt,"transition-duration":gt,"vertical-align":vt,"flex-basis":vt,"shape-margin":vt,size:vt,grid:vt,"grid-gap":vt,"grid-row-gap":vt,"grid-column-gap":vt,"grid-template-rows":vt,"grid-template-columns":vt,"grid-auto-rows":vt,"grid-auto-columns":vt,"box-shadow-x":vt,"box-shadow-y":vt,"box-shadow-blur":vt,"box-shadow-spread":vt,"font-line-height":vt,"text-shadow-x":vt,"text-shadow-y":vt,"text-shadow-blur":vt});function xt(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=xt(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var i in t)t[i]=xt(i,t[i],n);else for(var o in t)t[o]=xt(e+"-"+o,t[o],n);else if("number"==typeof t){var a=n[e]||wt[e];return a?"function"==typeof a?a(t).toString():""+t+a:t.toString()}return t}var At=function(e){void 0===e&&(e={});var t=bt(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=xt(r,e[r],t);return e},onChangeValue:function(e,n){return xt(n,e,t)}}};function Et(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||s(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Ct="",kt="",St="",_t="",Tt=O&&"ontouchstart"in document.documentElement;if(O){var Mt={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},Pt=document.createElement("p").style;for(var Nt in Mt)if(Nt+"Transform"in Pt){Ct=Nt,kt=Mt[Nt];break}"Webkit"===Ct&&"msHyphens"in Pt&&(Ct="ms",kt=Mt.ms,_t="edge"),"Webkit"===Ct&&"-apple-trailing-word"in Pt&&(St="apple")}var Ot=Ct,Rt=kt,It=St,Dt=_t,Lt=Tt;var jt={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===Ot?"-webkit-"+e:Rt+e)}},zt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===Ot?Rt+"print-"+e:e)}},Ut=/[-\s]+(.)?/g;function Bt(e,t){return t?t.toUpperCase():""}function Ft(e){return e.replace(Ut,Bt)}function Ht(e){return Ft("-"+e)}var Wt,$t={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===Ot){if(Ft("mask-image")in t)return e;if(Ot+Ht("mask-image")in t)return Rt+e}return e}},Vt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==It||Lt?e:Rt+e)}},Yt={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:Rt+e)}},qt={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:Rt+e)}},Qt={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===Ot||"ms"===Ot&&"edge"!==Dt?Rt+e:e)}},Xt={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===Ot||"ms"===Ot||"apple"===It?Rt+e:e)}},Kt={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===Ot?"WebkitColumn"+Ht(e)in t&&Rt+"column-"+e:"Moz"===Ot&&("page"+Ht(e)in t&&"page-"+e))}},Zt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===Ot)return e;var n=e.replace("-inline","");return Ot+Ht(n)in t&&Rt+n}},Gt={supportedProperty:function(e,t){return Ft(e)in t&&e}},Jt={supportedProperty:function(e,t){var n=Ht(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:Ot+n in t?Rt+e:"Webkit"!==Ot&&"Webkit"+n in t&&"-webkit-"+e}},en={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===Ot?""+Rt+e:e)}},tn={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===Ot?Rt+"scroll-chaining":e)}},nn={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},rn={supportedProperty:function(e,t){var n=nn[e];return!!n&&(Ot+Ht(n)in t&&Rt+n)}},on={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},an=Object.keys(on),ln=function(e){return Rt+e},un=[jt,zt,$t,Vt,Yt,qt,Qt,Xt,Kt,Zt,Gt,Jt,en,tn,rn,{supportedProperty:function(e,t,n){var r=n.multiple;if(an.indexOf(e)>-1){var i=on[e];if(!Array.isArray(i))return Ot+Ht(i)in t&&Rt+i;if(!r)return!1;for(var o=0;o<i.length;o++)if(!(Ot+Ht(i[0])in t))return!1;return i.map(ln)}return!1}}],sn=un.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),cn=un.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,Et(t.noPrefill)),e}),[]),fn={};if(O){Wt=document.createElement("p");var dn=window.getComputedStyle(document.documentElement,"");for(var pn in dn)isNaN(pn)||(fn[dn[pn]]=dn[pn]);cn.forEach((function(e){return delete fn[e]}))}function hn(e,t){if(void 0===t&&(t={}),!Wt)return e;if(null!=fn[e])return fn[e];"transition"!==e&&"transform"!==e||(t[e]=e in Wt.style);for(var n=0;n<sn.length&&(fn[e]=sn[n](e,Wt.style,t),!fn[e]);n++);try{Wt.style[e]=""}catch(e){return!1}return fn[e]}var mn,vn={},gn={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},yn=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function bn(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?hn(t):", "+hn(n);return r||(t||n)}function wn(e,t){var n=t;if(!mn||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=vn[r])return vn[r];try{mn.style[e]=n}catch(e){return vn[r]=!1,!1}if(gn[e])n=n.replace(yn,bn);else if(""===mn.style[e]&&("-ms-flex"===(n=Rt+n)&&(mn.style[e]="-ms-flexbox"),mn.style[e]=n,""===mn.style[e]))return vn[r]=!1,!1;return mn.style[e]="",vn[r]=n,vn[r]}O&&(mn=document.createElement("p"));var xn=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var i=!1,o=hn(n);o&&o!==n&&(i=!0);var a=!1,l=wn(o,F(r));l&&l!==r&&(a=!0),(i||a)&&(i&&delete t[n],t[o||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]||"ms"===Ot?n:"@"+Rt+"keyframes"+n.substr(10)}var n},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return wn(t,F(e))||e}}};var An=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},i=Object.keys(t).sort(e),o=0;o<i.length;o++)r[i[o]]=t[i[o]];return r}}};function En(){return{plugins:[Ge(),it(),ut(),mt(),At(),"undefined"==typeof window?null:xn(),An()]}}var Cn=He(En()),kn={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,i=void 0===r?"jss":r,o=e.seed,a=void 0===o?"":o,l=""===a?"":"".concat(a,"-"),u=0,s=function(){return u+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Qe.indexOf(e.key))return"Mui-".concat(e.key);var o="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[qe]&&""===a?"".concat(o,"-").concat(s()):o}return"".concat(l).concat(i).concat(s())}}(),jss:Cn,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},Sn=i.a.createContext(kn);var _n=-1e9;function Tn(){return _n+=1}function Mn(e){var t="function"==typeof e;return{create:function(n,r){var i;try{i=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return i;var o=n.overrides[r],a=l({},i);return Object.keys(o).forEach((function(e){a[e]=w(a[e],o[e])})),a},options:{}}}var Pn={};function Nn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var i=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,i=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,i=!0),i&&(r.cacheClasses.value=We({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function On(e,t){var n=e.state,r=e.theme,i=e.stylesOptions,o=e.stylesCreator,a=e.name;if(!i.disableGeneration){var u=$e.get(i.sheetsManager,o,r);u||(u={refs:0,staticSheet:null,dynamicStyles:null},$e.set(i.sheetsManager,o,r,u));var s=l(l(l({},o.options),i),{},{theme:r,flip:"boolean"==typeof i.flip?i.flip:"rtl"===r.direction});s.generateId=s.serverGenerateClassName||s.generateClassName;var c=i.sheetsRegistry;if(0===u.refs){var f;i.sheetsCache&&(f=$e.get(i.sheetsCache,o,r));var d=o.create(r,a);f||((f=i.jss.createStyleSheet(d,l({link:!1},s))).attach(),i.sheetsCache&&$e.set(i.sheetsCache,o,r,f)),c&&c.add(f),u.staticSheet=f,u.dynamicStyles=function e(t){var n=null;for(var r in t){var i=t[r],o=typeof i;if("function"===o)n||(n={}),n[r]=i;else if("object"===o&&null!==i&&!Array.isArray(i)){var a=e(i);a&&(n||(n={}),n[r]=a)}}return n}(d)}if(u.dynamicStyles){var p=i.jss.createStyleSheet(u.dynamicStyles,l({link:!0},s));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=We({baseClasses:u.staticSheet.classes,newClasses:p.classes}),c&&c.add(p)}else n.classes=u.staticSheet.classes;u.refs+=1}}function Rn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function In(e){var t=e.state,n=e.theme,r=e.stylesOptions,i=e.stylesCreator;if(!r.disableGeneration){var o=$e.get(r.sheetsManager,i,n);o.refs-=1;var a=r.sheetsRegistry;0===o.refs&&($e.delete(r.sheetsManager,i,n),r.jss.removeStyleSheet(o.staticSheet),a&&a.remove(o.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function Dn(e,t){var n,r=i.a.useRef([]),o=i.a.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),i.a.useEffect((function(){return function(){n&&n()}}),[o])}function Ln(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,r=t.classNamePrefix,o=t.Component,a=t.defaultTheme,u=void 0===a?Pn:a,s=d(t,["name","classNamePrefix","Component","defaultTheme"]),c=Mn(e),f=n||r||"makeStyles";c.options={index:Tn(),name:n,meta:f,classNamePrefix:f};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Ye()||u,r=l(l({},i.a.useContext(Sn)),s),a=i.a.useRef(),f=i.a.useRef();Dn((function(){var i={name:n,state:{},stylesCreator:c,stylesOptions:r,theme:t};return On(i,e),f.current=!1,a.current=i,function(){In(i)}}),[t,c]),i.a.useEffect((function(){f.current&&Rn(a.current,e),f.current=!0}));var d=Nn(a.current,e.classes,o);return d};return p}function jn(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var i,o=t.props[n];for(i in o)void 0===r[i]&&(r[i]=o[i]);return r}var zn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r=t.defaultTheme,o=t.withTheme,a=void 0!==o&&o,u=t.name,s=d(t,["defaultTheme","withTheme","name"]);var c=u,f=Ln(e,l({defaultTheme:r,Component:n,name:u||n.displayName,classNamePrefix:c},s)),p=i.a.forwardRef((function(e,t){e.classes;var o,s=e.innerRef,c=d(e,["classes","innerRef"]),p=f(l(l({},n.defaultProps),e)),h=c;return("string"==typeof u||a)&&(o=Ye()||r,u&&(h=jn({theme:o,name:u,props:c})),a&&!h.theme&&(h.theme=o)),i.a.createElement(n,l({ref:s||t,classes:p},h))}));return P()(p,n),p}},Un=["xs","sm","md","lg","xl"];function Bn(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,i=void 0===r?"px":r,o=e.step,a=void 0===o?5:o,u=d(e,["values","unit","step"]);function s(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(i,")")}function c(e,t){var r=Un.indexOf(t);return r===Un.length-1?s(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(i,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[Un[r+1]]?n[Un[r+1]]:t)-a/100).concat(i,")")}return l({keys:Un,values:n,up:s,down:function(e){var t=Un.indexOf(e)+1,r=n[Un[t]];return t===Un.length?s("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-a/100).concat(i,")")},between:c,only:function(e){return c(e,e)},width:function(e){return n[e]}},u)}function Fn(e,t,n){var r;return l({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return l({paddingLeft:t(2),paddingRight:t(2)},n,p({},e.up("sm"),l({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},p(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),p(r,e.up("sm"),{minHeight:64}),r)},n)}var Hn={black:"#000",white:"#fff"},Wn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},$n={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},Vn={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},Yn={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},qn={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},Qn={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},Xn={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},Kn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Hn.white,default:Wn[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Zn={text:{primary:Hn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:Wn[800],default:"#303030"},action:{active:Hn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Gn(e,t,n,r){var i=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=T(e.main,i):"dark"===t&&(e.dark=_(e.main,o)))}function Jn(e){var t=e.primary,n=void 0===t?{light:$n[300],main:$n[500],dark:$n[700]}:t,r=e.secondary,i=void 0===r?{light:Vn.A200,main:Vn.A400,dark:Vn.A700}:r,o=e.error,a=void 0===o?{light:Yn[300],main:Yn[500],dark:Yn[700]}:o,u=e.warning,s=void 0===u?{light:qn[300],main:qn[500],dark:qn[700]}:u,c=e.info,f=void 0===c?{light:Qn[300],main:Qn[500],dark:Qn[700]}:c,p=e.success,h=void 0===p?{light:Xn[300],main:Xn[500],dark:Xn[700]}:p,m=e.type,v=void 0===m?"light":m,g=e.contrastThreshold,y=void 0===g?3:g,b=e.tonalOffset,A=void 0===b?.2:b,E=d(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function C(e){return function(e,t){var n=k(e),r=k(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Zn.text.primary)>=y?Zn.text.primary:Kn.text.primary}var S=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=l({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(x(4,t));if("string"!=typeof e.main)throw new Error(x(5,JSON.stringify(e.main)));return Gn(e,"light",n,A),Gn(e,"dark",r,A),e.contrastText||(e.contrastText=C(e.main)),e},_={dark:Zn,light:Kn};return w(l({common:Hn,type:v,primary:S(n),secondary:S(i,"A400","A200","A700"),error:S(a),warning:S(s),info:S(f),success:S(h),grey:Wn,contrastThreshold:y,getContrastText:C,augmentColor:S,tonalOffset:A},_[v]),E)}function er(e){return Math.round(1e5*e)/1e5}var tr={textTransform:"uppercase"};function nr(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,i=void 0===r?'"Roboto", "Helvetica", "Arial", sans-serif':r,o=n.fontSize,a=void 0===o?14:o,u=n.fontWeightLight,s=void 0===u?300:u,c=n.fontWeightRegular,f=void 0===c?400:c,p=n.fontWeightMedium,h=void 0===p?500:p,m=n.fontWeightBold,v=void 0===m?700:m,g=n.htmlFontSize,y=void 0===g?16:g,b=n.allVariants,x=n.pxToRem,A=d(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var E=a/14,C=x||function(e){return"".concat(e/y*E,"rem")},k=function(e,t,n,r,o){return l({fontFamily:i,fontWeight:e,fontSize:C(t),lineHeight:n},'"Roboto", "Helvetica", "Arial", sans-serif'===i?{letterSpacing:"".concat(er(r/t),"em")}:{},o,b)},S={h1:k(s,96,1.167,-1.5),h2:k(s,60,1.2,-.5),h3:k(f,48,1.167,0),h4:k(f,34,1.235,.25),h5:k(f,24,1.334,0),h6:k(h,20,1.6,.15),subtitle1:k(f,16,1.75,.15),subtitle2:k(h,14,1.57,.1),body1:k(f,16,1.5,.15),body2:k(f,14,1.43,.15),button:k(h,14,1.75,.4,tr),caption:k(f,12,1.66,.4),overline:k(f,12,2.66,1,tr)};return w(l({htmlFontSize:y,pxToRem:C,round:er,fontFamily:i,fontSize:a,fontWeightLight:s,fontWeightRegular:f,fontWeightMedium:h,fontWeightBold:v},S),A,{clone:!1})}function rr(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var ir=["none",rr(0,2,1,-1,0,1,1,0,0,1,3,0),rr(0,3,1,-2,0,2,2,0,0,1,5,0),rr(0,3,3,-2,0,3,4,0,0,1,8,0),rr(0,2,4,-1,0,4,5,0,0,1,10,0),rr(0,3,5,-1,0,5,8,0,0,1,14,0),rr(0,3,5,-1,0,6,10,0,0,1,18,0),rr(0,4,5,-2,0,7,10,1,0,2,16,1),rr(0,5,5,-3,0,8,10,1,0,3,14,2),rr(0,5,6,-3,0,9,12,1,0,3,16,2),rr(0,6,6,-3,0,10,14,1,0,4,18,3),rr(0,6,7,-4,0,11,15,1,0,4,20,3),rr(0,7,8,-4,0,12,17,2,0,5,22,4),rr(0,7,8,-4,0,13,19,2,0,5,24,4),rr(0,7,9,-4,0,14,21,2,0,5,26,4),rr(0,8,9,-5,0,15,22,2,0,6,28,5),rr(0,8,10,-5,0,16,24,2,0,6,30,5),rr(0,8,11,-5,0,17,26,2,0,6,32,5),rr(0,9,11,-5,0,18,28,2,0,7,34,6),rr(0,9,12,-6,0,19,29,2,0,7,36,6),rr(0,10,13,-6,0,20,31,3,0,8,38,7),rr(0,10,13,-6,0,21,33,3,0,8,40,7),rr(0,10,14,-6,0,22,35,3,0,8,42,7),rr(0,11,14,-7,0,23,36,3,0,9,44,8),rr(0,11,15,-7,0,24,38,3,0,9,46,8)],or={borderRadius:4};var ar=function(e,t){return t?w(e,t,{clone:!1}):e},lr={xs:0,sm:600,md:960,lg:1280,xl:1920},ur={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(lr[e],"px)")}};var sr={m:"margin",p:"padding"},cr={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},fr={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},dr=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){if(e.length>2){if(!fr[e])return[e];e=fr[e]}var t=c(e.split(""),2),n=t[0],r=t[1],i=sr[n],o=cr[r]||"";return Array.isArray(o)?o.map((function(e){return i+e})):[i+o]})),pr=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function hr(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function mr(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function vr(e){var t=hr(e.theme);return Object.keys(e).map((function(n){if(-1===pr.indexOf(n))return null;var r=mr(dr(n),t),i=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||ur;return t.reduce((function(e,i,o){return e[r.up(r.keys[o])]=n(t[o]),e}),{})}if("object"===y(t)){var i=e.theme.breakpoints||ur;return Object.keys(t).reduce((function(e,r){return e[i.up(r)]=n(t[r]),e}),{})}return n(t)}(e,i,r)})).reduce(ar,{})}vr.propTypes={},vr.filterProps=pr;function gr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=hr({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var yr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},br={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function wr(e){return"".concat(Math.round(e),"ms")}var xr={easing:yr,duration:br,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?br.standard:n,i=t.easing,o=void 0===i?yr.easeInOut:i,a=t.delay,l=void 0===a?0:a;d(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:wr(r)," ").concat(o," ").concat("string"==typeof l?l:wr(l))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},Ar={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};var Er=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,i=void 0===r?{}:r,o=e.palette,a=void 0===o?{}:o,l=e.spacing,u=e.typography,s=void 0===u?{}:u,c=d(e,["breakpoints","mixins","palette","spacing","typography"]),f=Jn(a),p=Bn(n),h=gr(l),m=w({breakpoints:p,direction:"ltr",mixins:Fn(p,h,i),overrides:{},palette:f,props:{},shadows:ir,typography:nr(f,s),spacing:h,shape:or,transitions:xr,zIndex:Ar},c),v=arguments.length,g=new Array(v>1?v-1:0),y=1;y<v;y++)g[y-1]=arguments[y];return m=g.reduce((function(e,t){return w(e,t)}),m)}();var Cr=function(e,t){return zn(e,l({defaultTheme:Er},t))};function kr(e){if("string"!=typeof e)throw new Error(x(7));return e.charAt(0).toUpperCase()+e.slice(1)}var Sr=!1,_r=i.a.createContext(null),Tr=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var i,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(i="exited",r.appearStatus="entering"):i="entered":i=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:i},r.nextCallback=null,r}Object(D.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,i=this.props.nodeRef?[r]:[m.a.findDOMNode(this),r],o=i[0],a=i[1],l=this.getTimeouts(),u=r?l.appear:l.enter;!e&&!n||Sr?this.safeSetState({status:"entered"},(function(){t.props.onEntered(o)})):(this.props.onEnter(o,a),this.safeSetState({status:"entering"},(function(){t.props.onEntering(o,a),t.onTransitionEnd(u,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(o,a)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:m.a.findDOMNode(this);t&&!Sr?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:m.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=i[0],a=i[1];this.props.addEndListener(o,a)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,f(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return i.a.createElement(_r.Provider,{value:null},"function"==typeof n?n(e,r):i.a.cloneElement(i.a.Children.only(n),r))},t}(i.a.Component);function Mr(){}Tr.contextType=_r,Tr.propTypes={},Tr.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Mr,onEntering:Mr,onEntered:Mr,onExit:Mr,onExiting:Mr,onExited:Mr},Tr.UNMOUNTED="unmounted",Tr.EXITED="exited",Tr.ENTERING="entering",Tr.ENTERED="entered",Tr.EXITING="exiting";var Pr=Tr;function Nr(){return Ye()||Er}function Or(e,t){var n=e.timeout,r=e.style,i=void 0===r?{}:r;return{duration:i.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:i.transitionDelay}}function Rr(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function Ir(e,t){return r.useMemo((function(){return null==e&&null==t?null:function(n){Rr(e,n),Rr(t,n)}}),[e,t])}function Dr(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var Lr={entering:{opacity:1,transform:Dr(1)},entered:{opacity:1,transform:"none"}},jr=r.forwardRef((function(e,t){var n=e.children,i=e.disableStrictModeCompat,o=void 0!==i&&i,a=e.in,u=e.onEnter,s=e.onEntered,f=e.onEntering,p=e.onExit,h=e.onExited,m=e.onExiting,v=e.style,g=e.timeout,y=void 0===g?"auto":g,b=e.TransitionComponent,w=void 0===b?Pr:b,x=d(e,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),A=r.useRef(),E=r.useRef(),C=Nr(),k=C.unstable_strictMode&&!o,S=r.useRef(null),_=Ir(n.ref,t),T=Ir(k?S:void 0,_),M=function(e){return function(t,n){if(e){var r=c(k?[S.current,t]:[t,n],2),i=r[0],o=r[1];void 0===o?e(i):e(i,o)}}},P=M(f),N=M((function(e,t){!function(e){e.scrollTop}(e);var n,r=Or({style:v,timeout:y},{mode:"enter"}),i=r.duration,o=r.delay;"auto"===y?(n=C.transitions.getAutoHeightDuration(e.clientHeight),E.current=n):n=i,e.style.transition=[C.transitions.create("opacity",{duration:n,delay:o}),C.transitions.create("transform",{duration:.666*n,delay:o})].join(","),u&&u(e,t)})),O=M(s),R=M(m),I=M((function(e){var t,n=Or({style:v,timeout:y},{mode:"exit"}),r=n.duration,i=n.delay;"auto"===y?(t=C.transitions.getAutoHeightDuration(e.clientHeight),E.current=t):t=r,e.style.transition=[C.transitions.create("opacity",{duration:t,delay:i}),C.transitions.create("transform",{duration:.666*t,delay:i||.333*t})].join(","),e.style.opacity="0",e.style.transform=Dr(.75),p&&p(e)})),D=M(h);return r.useEffect((function(){return function(){clearTimeout(A.current)}}),[]),r.createElement(w,l({appear:!0,in:a,nodeRef:k?S:void 0,onEnter:N,onEntered:O,onEntering:P,onExit:I,onExited:D,onExiting:R,addEndListener:function(e,t){var n=k?e:t;"auto"===y&&(A.current=setTimeout(n,E.current||0))},timeout:"auto"===y?null:y},x),(function(e,t){return r.cloneElement(n,l({style:l({opacity:0,transform:Dr(.75),visibility:"exited"!==e||a?void 0:"hidden"},Lr[e],v,n.props.style),ref:T},t))}))}));jr.muiSupportAuto=!0;var zr=jr,Ur=n(45);var Br="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;var Fr=r.forwardRef((function(e,t){var n=e.children,i=e.container,o=e.disablePortal,a=void 0!==o&&o,l=e.onRendered,u=r.useState(null),s=u[0],c=u[1],f=Ir(r.isValidElement(n)?n.ref:null,t);return Br((function(){a||c(function(e){return e="function"==typeof e?e():e,h.findDOMNode(e)}(i)||document.body)}),[i,a]),Br((function(){if(s&&!a)return Rr(t,s),function(){Rr(t,null)}}),[t,s,a]),Br((function(){l&&(s||a)&&l()}),[l,s,a]),a?r.isValidElement(n)?r.cloneElement(n,{ref:f}):n:s?h.createPortal(n,s):s}));function Hr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];e.apply(this,r),t.apply(this,r)}}),(function(){}))}function Wr(e){return"function"==typeof e?e():e}var $r="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,Vr={},Yr=r.forwardRef((function(e,t){var n=e.anchorEl,i=e.children,o=e.container,a=e.disablePortal,u=void 0!==a&&a,s=e.keepMounted,c=void 0!==s&&s,f=e.modifiers,p=e.open,h=e.placement,m=void 0===h?"bottom":h,v=e.popperOptions,g=void 0===v?Vr:v,y=e.popperRef,b=e.style,w=e.transition,x=void 0!==w&&w,A=d(e,["anchorEl","children","container","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","style","transition"]),E=r.useRef(null),C=Ir(E,t),k=r.useRef(null),S=Ir(k,y),_=r.useRef(S);$r((function(){_.current=S}),[S]),r.useImperativeHandle(y,(function(){return k.current}),[]);var T=r.useState(!0),M=T[0],P=T[1],N=function(e,t){if("ltr"===(t&&t.direction||"ltr"))return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(m,Ye()),O=r.useState(N),R=O[0],I=O[1];r.useEffect((function(){k.current&&k.current.update()}));var D=r.useCallback((function(){if(E.current&&n&&p){k.current&&(k.current.destroy(),_.current(null));var e=function(e){I(e.placement)},t=(Wr(n),new Ur.a(Wr(n),E.current,l({placement:N},g,{modifiers:l({},u?{}:{preventOverflow:{boundariesElement:"window"}},f,g.modifiers),onCreate:Hr(e,g.onCreate),onUpdate:Hr(e,g.onUpdate)})));_.current(t)}}),[n,u,f,p,N,g]),L=r.useCallback((function(e){Rr(C,e),D()}),[C,D]),j=function(){k.current&&(k.current.destroy(),_.current(null))};if(r.useEffect((function(){return function(){j()}}),[]),r.useEffect((function(){p||x||j()}),[p,x]),!c&&!p&&(!x||M))return null;var z={placement:R};return x&&(z.TransitionProps={in:p,onEnter:function(){P(!1)},onExited:function(){P(!0),j()}}),r.createElement(Fr,{disablePortal:u,container:o},r.createElement("div",l({ref:L,role:"tooltip"},A,{style:l({position:"fixed",top:0,left:0,display:p||!c||x?null:"none"},b)}),"function"==typeof i?i(z):i))}));var qr=!0,Qr=!1,Xr=null,Kr={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Zr(e){e.metaKey||e.altKey||e.ctrlKey||(qr=!0)}function Gr(){qr=!1}function Jr(){"hidden"===this.visibilityState&&Qr&&(qr=!0)}function ei(e){var t,n,r,i=e.target;try{return i.matches(":focus-visible")}catch(e){}return qr||(n=(t=i).type,!("INPUT"!==(r=t.tagName)||!Kr[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function ti(){Qr=!0,window.clearTimeout(Xr),Xr=window.setTimeout((function(){Qr=!1}),100)}function ni(){return{isFocusVisible:ei,onBlurVisible:ti,ref:r.useCallback((function(e){var t,n=h.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",Zr,!0),t.addEventListener("mousedown",Gr,!0),t.addEventListener("pointerdown",Gr,!0),t.addEventListener("touchstart",Gr,!0),t.addEventListener("visibilitychange",Jr,!0))}),[])}}function ri(e){return Math.round(1e5*e)/1e5}var ii=!1,oi=null;var ai=r.forwardRef((function(e,t){var n=e.arrow,i=void 0!==n&&n,o=e.children,a=e.classes,u=e.disableFocusListener,s=void 0!==u&&u,f=e.disableHoverListener,p=void 0!==f&&f,m=e.disableTouchListener,v=void 0!==m&&m,y=e.enterDelay,b=void 0===y?100:y,x=e.enterNextDelay,A=void 0===x?0:x,E=e.enterTouchDelay,C=void 0===E?700:E,k=e.id,S=e.interactive,_=void 0!==S&&S,T=e.leaveDelay,M=void 0===T?0:T,P=e.leaveTouchDelay,N=void 0===P?1500:P,O=e.onClose,R=e.onOpen,I=e.open,D=e.placement,L=void 0===D?"bottom":D,j=e.PopperComponent,z=void 0===j?Yr:j,U=e.PopperProps,B=e.title,F=e.TransitionComponent,H=void 0===F?zr:F,W=e.TransitionProps,$=d(e,["arrow","children","classes","disableFocusListener","disableHoverListener","disableTouchListener","enterDelay","enterNextDelay","enterTouchDelay","id","interactive","leaveDelay","leaveTouchDelay","onClose","onOpen","open","placement","PopperComponent","PopperProps","title","TransitionComponent","TransitionProps"]),V=Nr(),Y=r.useState(),q=Y[0],Q=Y[1],X=r.useState(null),K=X[0],Z=X[1],G=r.useRef(!1),J=r.useRef(),ee=r.useRef(),te=r.useRef(),ne=r.useRef(),re=c(function(e){var t=e.controlled,n=e.default,i=(e.name,e.state,r.useRef(void 0!==t).current),o=r.useState(n),a=o[0],l=o[1];return[i?t:a,r.useCallback((function(e){i||l(e)}),[])]}({controlled:I,default:!1,name:"Tooltip",state:"open"}),2),ie=re[0],oe=re[1],ae=ie,le=function(e){var t=r.useState(e),n=t[0],i=t[1],o=e||n;return r.useEffect((function(){null==n&&i("mui-".concat(Math.round(1e5*Math.random())))}),[n]),o}(k);r.useEffect((function(){return function(){clearTimeout(J.current),clearTimeout(ee.current),clearTimeout(te.current),clearTimeout(ne.current)}}),[]);var ue=function(e){clearTimeout(oi),ii=!0,oe(!0),R&&R(e)},se=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(t){var n=o.props;"mouseover"===t.type&&n.onMouseOver&&e&&n.onMouseOver(t),G.current&&"touchstart"!==t.type||(q&&q.removeAttribute("title"),clearTimeout(ee.current),clearTimeout(te.current),b||ii&&A?(t.persist(),ee.current=setTimeout((function(){ue(t)}),ii?A:b)):ue(t))}},ce=ni(),fe=ce.isFocusVisible,de=ce.onBlurVisible,pe=ce.ref,he=r.useState(!1),me=he[0],ve=he[1],ge=function(){me&&(ve(!1),de())},ye=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(t){q||Q(t.currentTarget),fe(t)&&(ve(!0),se()(t));var n=o.props;n.onFocus&&e&&n.onFocus(t)}},be=function(e){clearTimeout(oi),oi=setTimeout((function(){ii=!1}),800+M),oe(!1),O&&O(e),clearTimeout(J.current),J.current=setTimeout((function(){G.current=!1}),V.transitions.duration.shortest)},we=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(t){var n=o.props;"blur"===t.type&&(n.onBlur&&e&&n.onBlur(t),ge()),"mouseleave"===t.type&&n.onMouseLeave&&t.currentTarget===q&&n.onMouseLeave(t),clearTimeout(ee.current),clearTimeout(te.current),t.persist(),te.current=setTimeout((function(){be(t)}),M)}},xe=function(e){G.current=!0;var t=o.props;t.onTouchStart&&t.onTouchStart(e)},Ae=Ir(Q,t),Ee=Ir(pe,Ae),Ce=r.useCallback((function(e){Rr(Ee,h.findDOMNode(e))}),[Ee]),ke=Ir(o.ref,Ce);""===B&&(ae=!1);var Se=l({"aria-describedby":ae?le:null,title:!ae&&!p&&"string"==typeof B?B:null},$,o.props,{className:g($.className,o.props.className),onTouchStart:xe,ref:ke}),_e={};v||(Se.onTouchStart=function(e){xe(e),clearTimeout(te.current),clearTimeout(J.current),clearTimeout(ne.current),e.persist(),ne.current=setTimeout((function(){se()(e)}),C)},Se.onTouchEnd=function(e){o.props.onTouchEnd&&o.props.onTouchEnd(e),clearTimeout(ne.current),clearTimeout(te.current),e.persist(),te.current=setTimeout((function(){be(e)}),N)}),p||(Se.onMouseOver=se(),Se.onMouseLeave=we(),_&&(_e.onMouseOver=se(!1),_e.onMouseLeave=we(!1))),s||(Se.onFocus=ye(),Se.onBlur=we(),_&&(_e.onFocus=ye(!1),_e.onBlur=we(!1)));var Te=r.useMemo((function(){return w({popperOptions:{modifiers:{arrow:{enabled:Boolean(K),element:K}}}},U)}),[K,U]);return r.createElement(r.Fragment,null,r.cloneElement(o,Se),r.createElement(z,l({className:g(a.popper,_&&a.popperInteractive,i&&a.popperArrow),placement:L,anchorEl:q,open:!!q&&ae,id:Se["aria-describedby"],transition:!0},_e,Te),(function(e){var t=e.placement,n=e.TransitionProps;return r.createElement(H,l({timeout:V.transitions.duration.shorter},n,W),r.createElement("div",{className:g(a.tooltip,a["tooltipPlacement".concat(kr(t.split("-")[0]))],G.current&&a.touch,i&&a.tooltipArrow)},B,i?r.createElement("span",{className:a.arrow,ref:Z}):null))})))})),li=Cr((function(e){return{popper:{zIndex:e.zIndex.tooltip,pointerEvents:"none"},popperInteractive:{pointerEvents:"auto"},popperArrow:{'&[x-placement*="bottom"] $arrow':{top:0,left:0,marginTop:"-0.71em",marginLeft:4,marginRight:4,"&::before":{transformOrigin:"0 100%"}},'&[x-placement*="top"] $arrow':{bottom:0,left:0,marginBottom:"-0.71em",marginLeft:4,marginRight:4,"&::before":{transformOrigin:"100% 0"}},'&[x-placement*="right"] $arrow':{left:0,marginLeft:"-0.71em",height:"1em",width:"0.71em",marginTop:4,marginBottom:4,"&::before":{transformOrigin:"100% 100%"}},'&[x-placement*="left"] $arrow':{right:0,marginRight:"-0.71em",height:"1em",width:"0.71em",marginTop:4,marginBottom:4,"&::before":{transformOrigin:"0 0"}}},tooltip:{backgroundColor:S(e.palette.grey[700],.9),borderRadius:e.shape.borderRadius,color:e.palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(10),lineHeight:"".concat(ri(1.4),"em"),maxWidth:300,wordWrap:"break-word",fontWeight:e.typography.fontWeightMedium},tooltipArrow:{position:"relative",margin:"0"},arrow:{overflow:"hidden",position:"absolute",width:"1em",height:"0.71em",boxSizing:"border-box",color:S(e.palette.grey[700],.9),"&::before":{content:'""',margin:"auto",display:"block",width:"100%",height:"100%",backgroundColor:"currentColor",transform:"rotate(45deg)"}},touch:{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:"".concat(ri(16/14),"em"),fontWeight:e.typography.fontWeightRegular},tooltipPlacementLeft:p({transformOrigin:"right center",margin:"0 24px "},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementRight:p({transformOrigin:"left center",margin:"0 24px"},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementTop:p({transformOrigin:"center bottom",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"}),tooltipPlacementBottom:p({transformOrigin:"center top",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"})}}),{name:"MuiTooltip",flip:!1})(ai),ui=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN},si=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return ui(t(e),n)}),{left:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;e(t[o],n)<0?r=o+1:i=o}return r},right:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;e(t[o],n)>0?i=o:r=o+1}return r}}};var ci=si(ui),fi=ci.right,di=(ci.left,fi);var pi=Array.prototype,hi=(pi.slice,pi.map,function(e,t,n){e=+e,t=+t,n=(i=arguments.length)<2?(t=e,e=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((t-e)/n)),o=new Array(i);++r<i;)o[r]=e+r*n;return o}),mi=Math.sqrt(50),vi=Math.sqrt(10),gi=Math.sqrt(2),yi=function(e,t,n){var r,i,o,a,l=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(i=e,e=t,t=i),0===(a=bi(e,t,n))||!isFinite(a))return[];if(a>0)for(e=Math.ceil(e/a),t=Math.floor(t/a),o=new Array(i=Math.ceil(t-e+1));++l<i;)o[l]=(e+l)*a;else for(e=Math.floor(e*a),t=Math.ceil(t*a),o=new Array(i=Math.ceil(e-t+1));++l<i;)o[l]=(e-l)/a;return r&&o.reverse(),o};function bi(e,t,n){var r=(t-e)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=mi?10:o>=vi?5:o>=gi?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=mi?10:o>=vi?5:o>=gi?2:1)}function wi(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=mi?i*=10:o>=vi?i*=5:o>=gi&&(i*=2),t<e?-i:i}var xi=function(e,t){var n,r,i=e.length,o=-1;if(null==t){for(;++o<i;)if(null!=(n=e[o])&&n>=n)for(r=n;++o<i;)null!=(n=e[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=t(e[o],o,e))&&n>=n)for(r=n;++o<i;)null!=(n=t(e[o],o,e))&&n>r&&(r=n);return r};Array.prototype.slice;var Ai={value:function(){}};function Ei(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new Ci(r)}function Ci(e){this._=e}function ki(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function Si(e,t){for(var n,r=0,i=e.length;r<i;++r)if((n=e[r]).name===t)return n.value}function _i(e,t,n){for(var r=0,i=e.length;r<i;++r)if(e[r].name===t){e[r]=Ai,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}Ci.prototype=Ei.prototype={constructor:Ci,on:function(e,t){var n,r=this._,i=ki(e+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++o<a;)if(n=(e=i[o]).type)r[n]=_i(r[n],e.name,t);else if(null==t)for(n in r)r[n]=_i(r[n],e.name,null);return this}for(;++o<a;)if((n=(e=i[o]).type)&&(n=Si(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new Ci(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(o=0,n=(r=this._[e]).length;o<n;++o)r[o].value.apply(t,i)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],i=0,o=r.length;i<o;++i)r[i].value.apply(t,n)}};var Ti=Ei;function Mi(){}var Pi=function(e){return null==e?Mi:function(){return this.querySelector(e)}};function Ni(){return[]}var Oi=function(e){return null==e?Ni:function(){return this.querySelectorAll(e)}},Ri=function(e){return function(){return this.matches(e)}},Ii=function(e){return new Array(e.length)};function Di(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}Di.prototype={constructor:Di,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};function Li(e,t,n,r,i,o){for(var a,l=0,u=t.length,s=o.length;l<s;++l)(a=t[l])?(a.__data__=o[l],r[l]=a):n[l]=new Di(e,o[l]);for(;l<u;++l)(a=t[l])&&(i[l]=a)}function ji(e,t,n,r,i,o,a){var l,u,s,c={},f=t.length,d=o.length,p=new Array(f);for(l=0;l<f;++l)(u=t[l])&&(p[l]=s="$"+a.call(u,u.__data__,l,t),s in c?i[l]=u:c[s]=u);for(l=0;l<d;++l)(u=c[s="$"+a.call(e,o[l],l,o)])?(r[l]=u,u.__data__=o[l],c[s]=null):n[l]=new Di(e,o[l]);for(l=0;l<f;++l)(u=t[l])&&c[p[l]]===u&&(i[l]=u)}function zi(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}var Ui="http://www.w3.org/1999/xhtml",Bi={svg:"http://www.w3.org/2000/svg",xhtml:Ui,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Fi=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),Bi.hasOwnProperty(t)?{space:Bi[t],local:e}:e};function Hi(e){return function(){this.removeAttribute(e)}}function Wi(e){return function(){this.removeAttributeNS(e.space,e.local)}}function $i(e,t){return function(){this.setAttribute(e,t)}}function Vi(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function Yi(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function qi(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}var Qi=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function Xi(e){return function(){this.style.removeProperty(e)}}function Ki(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Zi(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function Gi(e,t){return e.style.getPropertyValue(t)||Qi(e).getComputedStyle(e,null).getPropertyValue(t)}function Ji(e){return function(){delete this[e]}}function eo(e,t){return function(){this[e]=t}}function to(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function no(e){return e.trim().split(/^|\s+/)}function ro(e){return e.classList||new io(e)}function io(e){this._node=e,this._names=no(e.getAttribute("class")||"")}function oo(e,t){for(var n=ro(e),r=-1,i=t.length;++r<i;)n.add(t[r])}function ao(e,t){for(var n=ro(e),r=-1,i=t.length;++r<i;)n.remove(t[r])}function lo(e){return function(){oo(this,e)}}function uo(e){return function(){ao(this,e)}}function so(e,t){return function(){(t.apply(this,arguments)?oo:ao)(this,e)}}io.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function co(){this.textContent=""}function fo(e){return function(){this.textContent=e}}function po(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function ho(){this.innerHTML=""}function mo(e){return function(){this.innerHTML=e}}function vo(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function go(){this.nextSibling&&this.parentNode.appendChild(this)}function yo(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function bo(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===Ui&&t.documentElement.namespaceURI===Ui?t.createElement(e):t.createElementNS(n,e)}}function wo(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}var xo=function(e){var t=Fi(e);return(t.local?wo:bo)(t)};function Ao(){return null}function Eo(){var e=this.parentNode;e&&e.removeChild(this)}function Co(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function ko(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}var So={},_o=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(So={mouseenter:"mouseover",mouseleave:"mouseout"}));function To(e,t,n){return e=Mo(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function Mo(e,t,n){return function(r){var i=_o;_o=r;try{e.call(this,this.__data__,t,n)}finally{_o=i}}}function Po(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function No(e){return function(){var t=this.__on;if(t){for(var n,r=0,i=-1,o=t.length;r<o;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?t.length=i:delete this.__on}}}function Oo(e,t,n){var r=So.hasOwnProperty(e.type)?To:Mo;return function(i,o,a){var l,u=this.__on,s=r(t,o,a);if(u)for(var c=0,f=u.length;c<f;++c)if((l=u[c]).type===e.type&&l.name===e.name)return this.removeEventListener(l.type,l.listener,l.capture),this.addEventListener(l.type,l.listener=s,l.capture=n),void(l.value=t);this.addEventListener(e.type,s,n),l={type:e.type,name:e.name,value:t,listener:s,capture:n},u?u.push(l):this.__on=[l]}}function Ro(e,t,n){var r=Qi(e),i=r.CustomEvent;"function"==typeof i?i=new i(t,n):(i=r.document.createEvent("Event"),n?(i.initEvent(t,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(t,!1,!1)),e.dispatchEvent(i)}function Io(e,t){return function(){return Ro(this,e,t)}}function Do(e,t){return function(){return Ro(this,e,t.apply(this,arguments))}}var Lo=[null];function jo(e,t){this._groups=e,this._parents=t}function zo(){return new jo([[document.documentElement]],Lo)}jo.prototype=zo.prototype={constructor:jo,select:function(e){"function"!=typeof e&&(e=Pi(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a,l=t[i],u=l.length,s=r[i]=new Array(u),c=0;c<u;++c)(o=l[c])&&(a=e.call(o,o.__data__,c,l))&&("__data__"in o&&(a.__data__=o.__data__),s[c]=a);return new jo(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=Oi(e));for(var t=this._groups,n=t.length,r=[],i=[],o=0;o<n;++o)for(var a,l=t[o],u=l.length,s=0;s<u;++s)(a=l[s])&&(r.push(e.call(a,a.__data__,s,l)),i.push(a));return new jo(r,i)},filter:function(e){"function"!=typeof e&&(e=Ri(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],l=a.length,u=r[i]=[],s=0;s<l;++s)(o=a[s])&&e.call(o,o.__data__,s,a)&&u.push(o);return new jo(r,this._parents)},data:function(e,t){if(!e)return h=new Array(this.size()),c=-1,this.each((function(e){h[++c]=e})),h;var n,r=t?ji:Li,i=this._parents,o=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var a=o.length,l=new Array(a),u=new Array(a),s=new Array(a),c=0;c<a;++c){var f=i[c],d=o[c],p=d.length,h=e.call(f,f&&f.__data__,c,i),m=h.length,v=u[c]=new Array(m),g=l[c]=new Array(m);r(f,d,v,g,s[c]=new Array(p),h,t);for(var y,b,w=0,x=0;w<m;++w)if(y=v[w]){for(w>=x&&(x=w+1);!(b=g[x])&&++x<m;);y._next=b||null}}return(l=new jo(l,i))._enter=u,l._exit=s,l},enter:function(){return new jo(this._enter||this._groups.map(Ii),this._parents)},exit:function(){return new jo(this._exit||this._groups.map(Ii),this._parents)},join:function(e,t,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(i=t(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),l=0;l<o;++l)for(var u,s=t[l],c=n[l],f=s.length,d=a[l]=new Array(f),p=0;p<f;++p)(u=s[p]||c[p])&&(d[p]=u);for(;l<r;++l)a[l]=t[l];return new jo(a,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,i=e[t],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=zi);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,l=n[o],u=l.length,s=i[o]=new Array(u),c=0;c<u;++c)(a=l[c])&&(s[c]=a);s.sort(t)}return new jo(i,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each((function(){e[++t]=this})),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var e=0;return this.each((function(){++e})),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var i,o=t[n],a=0,l=o.length;a<l;++a)(i=o[a])&&e.call(i,i.__data__,a,o);return this},attr:function(e,t){var n=Fi(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Wi:Hi:"function"==typeof t?n.local?qi:Yi:n.local?Vi:$i)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?Xi:"function"==typeof t?Zi:Ki)(e,t,null==n?"":n)):Gi(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?Ji:"function"==typeof t?to:eo)(e,t)):this.node()[e]},classed:function(e,t){var n=no(e+"");if(arguments.length<2){for(var r=ro(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof t?so:t?lo:uo)(n,t))},text:function(e){return arguments.length?this.each(null==e?co:("function"==typeof e?po:fo)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?ho:("function"==typeof e?vo:mo)(e)):this.node().innerHTML},raise:function(){return this.each(go)},lower:function(){return this.each(yo)},append:function(e){var t="function"==typeof e?e:xo(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:xo(e),r=null==t?Ao:"function"==typeof t?t:Pi(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Eo)},clone:function(e){return this.select(e?ko:Co)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,i,o=Po(e+""),a=o.length;if(!(arguments.length<2)){for(l=t?Oo:No,null==n&&(n=!1),r=0;r<a;++r)this.each(l(o[r],t,n));return this}var l=this.node().__on;if(l)for(var u,s=0,c=l.length;s<c;++s)for(r=0,u=l[s];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(e,t){return this.each(("function"==typeof t?Do:Io)(e,t))}};var Uo=zo;var Bo=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function Fo(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Ho(){}var Wo="\\s*([+-]?\\d+)\\s*",$o="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Vo="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Yo=/^#([0-9a-f]{3,8})$/,qo=new RegExp("^rgb\\("+[Wo,Wo,Wo]+"\\)$"),Qo=new RegExp("^rgb\\("+[Vo,Vo,Vo]+"\\)$"),Xo=new RegExp("^rgba\\("+[Wo,Wo,Wo,$o]+"\\)$"),Ko=new RegExp("^rgba\\("+[Vo,Vo,Vo,$o]+"\\)$"),Zo=new RegExp("^hsl\\("+[$o,Vo,Vo]+"\\)$"),Go=new RegExp("^hsla\\("+[$o,Vo,Vo,$o]+"\\)$"),Jo={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ea(){return this.rgb().formatHex()}function ta(){return this.rgb().formatRgb()}function na(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=Yo.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?ra(t):3===n?new la(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?ia(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?ia(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=qo.exec(e))?new la(t[1],t[2],t[3],1):(t=Qo.exec(e))?new la(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=Xo.exec(e))?ia(t[1],t[2],t[3],t[4]):(t=Ko.exec(e))?ia(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Zo.exec(e))?fa(t[1],t[2]/100,t[3]/100,1):(t=Go.exec(e))?fa(t[1],t[2]/100,t[3]/100,t[4]):Jo.hasOwnProperty(e)?ra(Jo[e]):"transparent"===e?new la(NaN,NaN,NaN,0):null}function ra(e){return new la(e>>16&255,e>>8&255,255&e,1)}function ia(e,t,n,r){return r<=0&&(e=t=n=NaN),new la(e,t,n,r)}function oa(e){return e instanceof Ho||(e=na(e)),e?new la((e=e.rgb()).r,e.g,e.b,e.opacity):new la}function aa(e,t,n,r){return 1===arguments.length?oa(e):new la(e,t,n,null==r?1:r)}function la(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function ua(){return"#"+ca(this.r)+ca(this.g)+ca(this.b)}function sa(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function ca(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function fa(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new pa(e,t,n,r)}function da(e){if(e instanceof pa)return new pa(e.h,e.s,e.l,e.opacity);if(e instanceof Ho||(e=na(e)),!e)return new pa;if(e instanceof pa)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,i=Math.min(t,n,r),o=Math.max(t,n,r),a=NaN,l=o-i,u=(o+i)/2;return l?(a=t===o?(n-r)/l+6*(n<r):n===o?(r-t)/l+2:(t-n)/l+4,l/=u<.5?o+i:2-o-i,a*=60):l=u>0&&u<1?0:a,new pa(a,l,u,e.opacity)}function pa(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function ha(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function ma(e,t,n,r,i){var o=e*e,a=o*e;return((1-3*e+3*o-a)*t+(4-6*o+3*a)*n+(1+3*e+3*o-3*a)*r+a*i)/6}Bo(Ho,na,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:ea,formatHex:ea,formatHsl:function(){return da(this).formatHsl()},formatRgb:ta,toString:ta}),Bo(la,aa,Fo(Ho,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new la(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new la(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:ua,formatHex:ua,formatRgb:sa,toString:sa})),Bo(pa,(function(e,t,n,r){return 1===arguments.length?da(e):new pa(e,t,n,null==r?1:r)}),Fo(Ho,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new pa(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new pa(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,i=2*n-r;return new la(ha(e>=240?e-240:e+120,i,r),ha(e,i,r),ha(e<120?e+240:e-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));var va=function(e){return function(){return e}};function ga(e,t){return function(n){return e+n*t}}function ya(e){return 1==(e=+e)?ba:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):va(isNaN(t)?n:t)}}function ba(e,t){var n=t-e;return n?ga(e,n):va(isNaN(e)?t:e)}var wa=function e(t){var n=ya(t);function r(e,t){var r=n((e=aa(e)).r,(t=aa(t)).r),i=n(e.g,t.g),o=n(e.b,t.b),a=ba(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=i(t),e.b=o(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function xa(e){return function(t){var n,r,i=t.length,o=new Array(i),a=new Array(i),l=new Array(i);for(n=0;n<i;++n)r=aa(t[n]),o[n]=r.r||0,a[n]=r.g||0,l[n]=r.b||0;return o=e(o),a=e(a),l=e(l),r.opacity=1,function(e){return r.r=o(e),r.g=a(e),r.b=l(e),r+""}}}xa((function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),i=e[r],o=e[r+1],a=r>0?e[r-1]:2*i-o,l=r<t-1?e[r+2]:2*o-i;return ma((n-r/t)*t,a,i,o,l)}})),xa((function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),i=e[(r+t-1)%t],o=e[r%t],a=e[(r+1)%t],l=e[(r+2)%t];return ma((n-r/t)*t,i,o,a,l)}}));var Aa=function(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,i=t.slice();return function(o){for(n=0;n<r;++n)i[n]=e[n]*(1-o)+t[n]*o;return i}};function Ea(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function Ca(e,t){var n,r=t?t.length:0,i=e?Math.min(r,e.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Ra(e[n],t[n]);for(;n<r;++n)a[n]=t[n];return function(e){for(n=0;n<i;++n)a[n]=o[n](e);return a}}var ka=function(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}},Sa=function(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}},_a=function(e,t){var n,r={},i={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=Ra(e[n],t[n]):i[n]=t[n];return function(e){for(n in r)i[n]=r[n](e);return i}},Ta=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ma=new RegExp(Ta.source,"g");var Pa,Na,Oa=function(e,t){var n,r,i,o=Ta.lastIndex=Ma.lastIndex=0,a=-1,l=[],u=[];for(e+="",t+="";(n=Ta.exec(e))&&(r=Ma.exec(t));)(i=r.index)>o&&(i=t.slice(o,i),l[a]?l[a]+=i:l[++a]=i),(n=n[0])===(r=r[0])?l[a]?l[a]+=r:l[++a]=r:(l[++a]=null,u.push({i:a,x:Sa(n,r)})),o=Ma.lastIndex;return o<t.length&&(i=t.slice(o),l[a]?l[a]+=i:l[++a]=i),l.length<2?u[0]?function(e){return function(t){return e(t)+""}}(u[0].x):function(e){return function(){return e}}(t):(t=u.length,function(e){for(var n,r=0;r<t;++r)l[(n=u[r]).i]=n.x(e);return l.join("")})},Ra=function(e,t){var n,r=typeof t;return null==t||"boolean"===r?va(t):("number"===r?Sa:"string"===r?(n=na(t))?(t=n,wa):Oa:t instanceof na?wa:t instanceof Date?ka:Ea(t)?Aa:Array.isArray(t)?Ca:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?_a:Sa)(e,t)},Ia=0,Da=0,La=0,ja=0,za=0,Ua=0,Ba="object"==typeof performance&&performance.now?performance:Date,Fa="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function Ha(){return za||(Fa(Wa),za=Ba.now()+Ua)}function Wa(){za=0}function $a(){this._call=this._time=this._next=null}function Va(e,t,n){var r=new $a;return r.restart(e,t,n),r}function Ya(){za=(ja=Ba.now())+Ua,Ia=Da=0;try{!function(){Ha(),++Ia;for(var e,t=Pa;t;)(e=za-t._time)>=0&&t._call.call(null,e),t=t._next;--Ia}()}finally{Ia=0,function(){var e,t,n=Pa,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:Pa=t);Na=e,Qa(r)}(),za=0}}function qa(){var e=Ba.now(),t=e-ja;t>1e3&&(Ua-=t,ja=e)}function Qa(e){Ia||(Da&&(Da=clearTimeout(Da)),e-za>24?(e<1/0&&(Da=setTimeout(Ya,e-Ba.now()-Ua)),La&&(La=clearInterval(La))):(La||(ja=Ba.now(),La=setInterval(qa,1e3)),Ia=1,Fa(Ya)))}$a.prototype=Va.prototype={constructor:$a,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?Ha():+n)+(null==t?0:+t),this._next||Na===this||(Na?Na._next=this:Pa=this,Na=this),this._call=e,this._time=n,Qa()},stop:function(){this._call&&(this._call=null,this._time=1/0,Qa())}};var Xa=function(e,t,n){var r=new $a;return t=null==t?0:+t,r.restart((function(n){r.stop(),e(n+t)}),t,n),r},Ka=Ti("start","end","cancel","interrupt"),Za=[],Ga=function(e,t,n,r,i,o){var a=e.__transition;if(a){if(n in a)return}else e.__transition={};!function(e,t,n){var r,i=e.__transition;function o(u){var s,c,f,d;if(1!==n.state)return l();for(s in i)if((d=i[s]).name===n.name){if(3===d.state)return Xa(o);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete i[s]):+s<t&&(d.state=6,d.timer.stop(),d.on.call("cancel",e,e.__data__,d.index,d.group),delete i[s])}if(Xa((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(u))})),n.state=2,n.on.call("start",e,e.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),s=0,c=-1;s<f;++s)(d=n.tween[s].value.call(e,e.__data__,n.index,n.group))&&(r[++c]=d);r.length=c+1}}function a(t){for(var i=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(l),n.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(e,i);5===n.state&&(n.on.call("end",e,e.__data__,n.index,n.group),l())}function l(){for(var r in n.state=6,n.timer.stop(),delete i[t],i)return;delete e.__transition}i[t]=n,n.timer=Va((function(e){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=e&&o(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:i,on:Ka,tween:Za,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function Ja(e,t){var n=tl(e,t);if(n.state>0)throw new Error("too late; already scheduled");return n}function el(e,t){var n=tl(e,t);if(n.state>3)throw new Error("too late; already running");return n}function tl(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}var nl,rl,il,ol,al=function(e,t){var n,r,i,o=e.__transition,a=!0;if(o){for(i in t=null==t?null:t+"",o)(n=o[i]).name===t?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete e.__transition}},ll=180/Math.PI,ul={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},sl=function(e,t,n,r,i,o){var a,l,u;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(u=e*n+t*r)&&(n-=e*u,r-=t*u),(l=Math.sqrt(n*n+r*r))&&(n/=l,r/=l,u/=l),e*r<t*n&&(e=-e,t=-t,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(t,e)*ll,skewX:Math.atan(u)*ll,scaleX:a,scaleY:l}};function cl(e,t,n,r){function i(e){return e.length?e.pop()+" ":""}return function(o,a){var l=[],u=[];return o=e(o),a=e(a),function(e,r,i,o,a,l){if(e!==i||r!==o){var u=a.push("translate(",null,t,null,n);l.push({i:u-4,x:Sa(e,i)},{i:u-2,x:Sa(r,o)})}else(i||o)&&a.push("translate("+i+t+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,l,u),function(e,t,n,o){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Sa(e,t)})):t&&n.push(i(n)+"rotate("+t+r)}(o.rotate,a.rotate,l,u),function(e,t,n,o){e!==t?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Sa(e,t)}):t&&n.push(i(n)+"skewX("+t+r)}(o.skewX,a.skewX,l,u),function(e,t,n,r,o,a){if(e!==n||t!==r){var l=o.push(i(o)+"scale(",null,",",null,")");a.push({i:l-4,x:Sa(e,n)},{i:l-2,x:Sa(t,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,l,u),o=a=null,function(e){for(var t,n=-1,r=u.length;++n<r;)l[(t=u[n]).i]=t.x(e);return l.join("")}}}var fl=cl((function(e){return"none"===e?ul:(nl||(nl=document.createElement("DIV"),rl=document.documentElement,il=document.defaultView),nl.style.transform=e,e=il.getComputedStyle(rl.appendChild(nl),null).getPropertyValue("transform"),rl.removeChild(nl),e=e.slice(7,-1).split(","),sl(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))}),"px, ","px)","deg)"),dl=cl((function(e){return null==e?ul:(ol||(ol=document.createElementNS("http://www.w3.org/2000/svg","g")),ol.setAttribute("transform",e),(e=ol.transform.baseVal.consolidate())?(e=e.matrix,sl(e.a,e.b,e.c,e.d,e.e,e.f)):ul)}),", ",")",")");function pl(e,t){var n,r;return function(){var i=el(this,e),o=i.tween;if(o!==n)for(var a=0,l=(r=n=o).length;a<l;++a)if(r[a].name===t){(r=r.slice()).splice(a,1);break}i.tween=r}}function hl(e,t,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=el(this,e),a=o.tween;if(a!==r){i=(r=a).slice();for(var l={name:t,value:n},u=0,s=i.length;u<s;++u)if(i[u].name===t){i[u]=l;break}u===s&&i.push(l)}o.tween=i}}function ml(e,t,n){var r=e._id;return e.each((function(){var e=el(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return tl(e,r).value[t]}}var vl=function(e,t){var n;return("number"==typeof t?Sa:t instanceof na?wa:(n=na(t))?(t=n,wa):Oa)(e,t)};function gl(e){return function(){this.removeAttribute(e)}}function yl(e){return function(){this.removeAttributeNS(e.space,e.local)}}function bl(e,t,n){var r,i,o=n+"";return function(){var a=this.getAttribute(e);return a===o?null:a===r?i:i=t(r=a,n)}}function wl(e,t,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(e.space,e.local);return a===o?null:a===r?i:i=t(r=a,n)}}function xl(e,t,n){var r,i,o;return function(){var a,l,u=n(this);if(null!=u)return(a=this.getAttribute(e))===(l=u+"")?null:a===r&&l===i?o:(i=l,o=t(r=a,u));this.removeAttribute(e)}}function Al(e,t,n){var r,i,o;return function(){var a,l,u=n(this);if(null!=u)return(a=this.getAttributeNS(e.space,e.local))===(l=u+"")?null:a===r&&l===i?o:(i=l,o=t(r=a,u));this.removeAttributeNS(e.space,e.local)}}function El(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function Cl(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function kl(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&Cl(e,i)),n}return i._value=t,i}function Sl(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&El(e,i)),n}return i._value=t,i}function _l(e,t){return function(){Ja(this,e).delay=+t.apply(this,arguments)}}function Tl(e,t){return t=+t,function(){Ja(this,e).delay=t}}function Ml(e,t){return function(){el(this,e).duration=+t.apply(this,arguments)}}function Pl(e,t){return t=+t,function(){el(this,e).duration=t}}function Nl(e,t){if("function"!=typeof t)throw new Error;return function(){el(this,e).ease=t}}function Ol(e,t,n){var r,i,o=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?Ja:el;return function(){var a=o(this,e),l=a.on;l!==r&&(i=(r=l).copy()).on(t,n),a.on=i}}var Rl=Uo.prototype.constructor;function Il(e){return function(){this.style.removeProperty(e)}}function Dl(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function Ll(e,t,n){var r,i;function o(){var o=t.apply(this,arguments);return o!==i&&(r=(i=o)&&Dl(e,o,n)),r}return o._value=t,o}function jl(e){return function(t){this.textContent=e.call(this,t)}}function zl(e){var t,n;function r(){var r=e.apply(this,arguments);return r!==n&&(t=(n=r)&&jl(r)),t}return r._value=e,r}var Ul=0;function Bl(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function Fl(){return++Ul}var Hl=Uo.prototype;Bl.prototype=function(e){return Uo().transition(e)}.prototype={constructor:Bl,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Pi(e));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var l,u,s=r[a],c=s.length,f=o[a]=new Array(c),d=0;d<c;++d)(l=s[d])&&(u=e.call(l,l.__data__,d,s))&&("__data__"in l&&(u.__data__=l.__data__),f[d]=u,Ga(f[d],t,n,d,f,tl(l,n)));return new Bl(o,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Oi(e));for(var r=this._groups,i=r.length,o=[],a=[],l=0;l<i;++l)for(var u,s=r[l],c=s.length,f=0;f<c;++f)if(u=s[f]){for(var d,p=e.call(u,u.__data__,f,s),h=tl(u,n),m=0,v=p.length;m<v;++m)(d=p[m])&&Ga(d,t,n,m,p,h);o.push(p),a.push(u)}return new Bl(o,a,t,n)},filter:function(e){"function"!=typeof e&&(e=Ri(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],l=a.length,u=r[i]=[],s=0;s<l;++s)(o=a[s])&&e.call(o,o.__data__,s,a)&&u.push(o);return new Bl(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),l=0;l<o;++l)for(var u,s=t[l],c=n[l],f=s.length,d=a[l]=new Array(f),p=0;p<f;++p)(u=s[p]||c[p])&&(d[p]=u);for(;l<r;++l)a[l]=t[l];return new Bl(a,this._parents,this._name,this._id)},selection:function(){return new Rl(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=Fl(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,l=r[o],u=l.length,s=0;s<u;++s)if(a=l[s]){var c=tl(a,t);Ga(a,e,n,s,l,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Bl(r,this._parents,e,n)},call:Hl.call,nodes:Hl.nodes,node:Hl.node,size:Hl.size,empty:Hl.empty,each:Hl.each,on:function(e,t){var n=this._id;return arguments.length<2?tl(this.node(),n).on.on(e):this.each(Ol(n,e,t))},attr:function(e,t){var n=Fi(e),r="transform"===n?dl:vl;return this.attrTween(e,"function"==typeof t?(n.local?Al:xl)(n,r,ml(this,"attr."+e,t)):null==t?(n.local?yl:gl)(n):(n.local?wl:bl)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=Fi(e);return this.tween(n,(r.local?kl:Sl)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?fl:vl;return null==t?this.styleTween(e,function(e,t){var n,r,i;return function(){var o=Gi(this,e),a=(this.style.removeProperty(e),Gi(this,e));return o===a?null:o===n&&a===r?i:i=t(n=o,r=a)}}(e,r)).on("end.style."+e,Il(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,i,o;return function(){var a=Gi(this,e),l=n(this),u=l+"";return null==l&&(this.style.removeProperty(e),u=l=Gi(this,e)),a===u?null:a===r&&u===i?o:(i=u,o=t(r=a,l))}}(e,r,ml(this,"style."+e,t))).each(function(e,t){var n,r,i,o,a="style."+t,l="end."+a;return function(){var u=el(this,e),s=u.on,c=null==u.value[a]?o||(o=Il(t)):void 0;s===n&&i===c||(r=(n=s).copy()).on(l,i=c),u.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,i,o=n+"";return function(){var a=Gi(this,e);return a===o?null:a===r?i:i=t(r=a,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,Ll(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(ml(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,zl(e))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,i=tl(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===e)return r.value;return null}return this.each((null==t?pl:hl)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?_l:Tl)(t,e)):tl(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Ml:Pl)(t,e)):tl(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(Nl(t,e)):tl(this.node(),t).ease},end:function(){var e,t,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var l={value:a},u={value:function(){0==--i&&o()}};n.each((function(){var n=el(this,r),i=n.on;i!==e&&((t=(e=i).copy())._.cancel.push(l),t._.interrupt.push(l),t._.end.push(u)),n.on=t}))}))}};var Wl={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function $l(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Wl.time=Ha(),Wl;return n}Uo.prototype.interrupt=function(e){return this.each((function(){al(this,e)}))},Uo.prototype.transition=function(e){var t,n;e instanceof Bl?(t=e._id,e=e._name):(t=Fl(),(n=Wl).time=Ha(),e=null==e?null:e+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,l=r[o],u=l.length,s=0;s<u;++s)(a=l[s])&&Ga(a,e,t,s,l,n||$l(a,t));return new Bl(r,this._parents,e,t)};function Vl(e){return[+e[0],+e[1]]}function Yl(e){return[Vl(e[0]),Vl(e[1])]}["w","e"].map(ql),["n","s"].map(ql),["n","w","e","s","nw","ne","sw","se"].map(ql);function ql(e){return{type:e}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Ql=Math.PI,Xl=2*Ql,Kl=Xl-1e-6;function Zl(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Gl(){return new Zl}Zl.prototype=Gl.prototype={constructor:Zl,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,i,o){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(e,t,n,r,i){e=+e,t=+t,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,l=n-e,u=r-t,s=o-e,c=a-t,f=s*s+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(f>1e-6)if(Math.abs(c*l-u*s)>1e-6&&i){var d=n-o,p=r-a,h=l*l+u*u,m=d*d+p*p,v=Math.sqrt(h),g=Math.sqrt(f),y=i*Math.tan((Ql-Math.acos((h+f-m)/(2*v*g)))/2),b=y/g,w=y/v;Math.abs(b-1)>1e-6&&(this._+="L"+(e+b*s)+","+(t+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*d>s*p)+","+(this._x1=e+w*l)+","+(this._y1=t+w*u)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,i,o){e=+e,t=+t,o=!!o;var a=(n=+n)*Math.cos(r),l=n*Math.sin(r),u=e+a,s=t+l,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+s:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+u+","+s),n&&(f<0&&(f=f%Xl+Xl),f>Kl?this._+="A"+n+","+n+",0,1,"+c+","+(e-a)+","+(t-l)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=s):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Ql)+","+c+","+(this._x1=e+n*Math.cos(i))+","+(this._y1=t+n*Math.sin(i))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Jl=Gl;function eu(){}function tu(e,t){var n=new eu;if(e instanceof eu)e.each((function(e,t){n.set(t,e)}));else if(Array.isArray(e)){var r,i=-1,o=e.length;if(null==t)for(;++i<o;)n.set(i,e[i]);else for(;++i<o;)n.set(t(r=e[i],i,e),r)}else if(e)for(var a in e)n.set(a,e[a]);return n}eu.prototype=tu.prototype={constructor:eu,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var nu=tu;function ru(){}var iu=nu.prototype;function ou(e,t){var n=new ru;if(e instanceof ru)e.each((function(e){n.add(e)}));else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}ru.prototype=ou.prototype={constructor:ru,has:iu.has,add:function(e){return this["$"+(e+="")]=e,this},remove:iu.remove,clear:iu.clear,values:iu.keys,size:iu.size,empty:iu.empty,each:iu.each};Array.prototype.slice;function au(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var i,o,a,l,u,s,c,f,d,p=e._root,h={data:r},m=e._x0,v=e._y0,g=e._x1,y=e._y1;if(!p)return e._root=h,e;for(;p.length;)if((s=t>=(o=(m+g)/2))?m=o:g=o,(c=n>=(a=(v+y)/2))?v=a:y=a,i=p,!(p=p[f=c<<1|s]))return i[f]=h,e;if(l=+e._x.call(null,p.data),u=+e._y.call(null,p.data),t===l&&n===u)return h.next=p,i?i[f]=h:e._root=h,e;do{i=i?i[f]=new Array(4):e._root=new Array(4),(s=t>=(o=(m+g)/2))?m=o:g=o,(c=n>=(a=(v+y)/2))?v=a:y=a}while((f=c<<1|s)==(d=(u>=a)<<1|l>=o));return i[d]=p,i[f]=h,e}var lu=function(e,t,n,r,i){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=i};function uu(e){return e[0]}function su(e){return e[1]}function cu(e,t,n){var r=new fu(null==t?uu:t,null==n?su:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function fu(e,t,n,r,i,o){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function du(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var pu=cu.prototype=fu.prototype;pu.copy=function(){var e,t,n=new fu(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=du(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var i=0;i<4;++i)(t=r.source[i])&&(t.length?e.push({source:t,target:r.target[i]=new Array(4)}):r.target[i]=du(t));return n},pu.add=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return au(this.cover(t,n),t,n,e)},pu.addAll=function(e){var t,n,r,i,o=e.length,a=new Array(o),l=new Array(o),u=1/0,s=1/0,c=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,t=e[n]))||isNaN(i=+this._y.call(null,t))||(a[n]=r,l[n]=i,r<u&&(u=r),r>c&&(c=r),i<s&&(s=i),i>f&&(f=i));if(u>c||s>f)return this;for(this.cover(u,s).cover(c,f),n=0;n<o;++n)au(this,a[n],l[n],e[n]);return this},pu.cover=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(e))+1,o=(r=Math.floor(t))+1;else{for(var a,l,u=i-n,s=this._root;n>e||e>=i||r>t||t>=o;)switch(l=(t<r)<<1|e<n,(a=new Array(4))[l]=s,s=a,u*=2,l){case 0:i=n+u,o=r+u;break;case 1:n=i-u,o=r+u;break;case 2:i=n+u,r=o-u;break;case 3:n=i-u,r=o-u}this._root&&this._root.length&&(this._root=s)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},pu.data=function(){var e=[];return this.visit((function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)})),e},pu.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},pu.find=function(e,t,n){var r,i,o,a,l,u,s,c=this._x0,f=this._y0,d=this._x1,p=this._y1,h=[],m=this._root;for(m&&h.push(new lu(m,c,f,d,p)),null==n?n=1/0:(c=e-n,f=t-n,d=e+n,p=t+n,n*=n);u=h.pop();)if(!(!(m=u.node)||(i=u.x0)>d||(o=u.y0)>p||(a=u.x1)<c||(l=u.y1)<f))if(m.length){var v=(i+a)/2,g=(o+l)/2;h.push(new lu(m[3],v,g,a,l),new lu(m[2],i,g,v,l),new lu(m[1],v,o,a,g),new lu(m[0],i,o,v,g)),(s=(t>=g)<<1|e>=v)&&(u=h[h.length-1],h[h.length-1]=h[h.length-1-s],h[h.length-1-s]=u)}else{var y=e-+this._x.call(null,m.data),b=t-+this._y.call(null,m.data),w=y*y+b*b;if(w<n){var x=Math.sqrt(n=w);c=e-x,f=t-x,d=e+x,p=t+x,r=m.data}}return r},pu.remove=function(e){if(isNaN(o=+this._x.call(null,e))||isNaN(a=+this._y.call(null,e)))return this;var t,n,r,i,o,a,l,u,s,c,f,d,p=this._root,h=this._x0,m=this._y0,v=this._x1,g=this._y1;if(!p)return this;if(p.length)for(;;){if((s=o>=(l=(h+v)/2))?h=l:v=l,(c=a>=(u=(m+g)/2))?m=u:g=u,t=p,!(p=p[f=c<<1|s]))return this;if(!p.length)break;(t[f+1&3]||t[f+2&3]||t[f+3&3])&&(n=t,d=f)}for(;p.data!==e;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):t?(i?t[f]=i:delete t[f],(p=t[0]||t[1]||t[2]||t[3])&&p===(t[3]||t[2]||t[1]||t[0])&&!p.length&&(n?n[d]=p:this._root=p),this):(this._root=i,this)},pu.removeAll=function(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this},pu.root=function(){return this._root},pu.size=function(){var e=0;return this.visit((function(t){if(!t.length)do{++e}while(t=t.next)})),e},pu.visit=function(e){var t,n,r,i,o,a,l=[],u=this._root;for(u&&l.push(new lu(u,this._x0,this._y0,this._x1,this._y1));t=l.pop();)if(!e(u=t.node,r=t.x0,i=t.y0,o=t.x1,a=t.y1)&&u.length){var s=(r+o)/2,c=(i+a)/2;(n=u[3])&&l.push(new lu(n,s,c,o,a)),(n=u[2])&&l.push(new lu(n,r,c,s,a)),(n=u[1])&&l.push(new lu(n,s,i,o,c)),(n=u[0])&&l.push(new lu(n,r,i,s,c))}return this},pu.visitAfter=function(e){var t,n=[],r=[];for(this._root&&n.push(new lu(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var i=t.node;if(i.length){var o,a=t.x0,l=t.y0,u=t.x1,s=t.y1,c=(a+u)/2,f=(l+s)/2;(o=i[0])&&n.push(new lu(o,a,l,c,f)),(o=i[1])&&n.push(new lu(o,c,l,u,f)),(o=i[2])&&n.push(new lu(o,a,f,c,s)),(o=i[3])&&n.push(new lu(o,c,f,u,s))}r.push(t)}for(;t=r.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this},pu.x=function(e){return arguments.length?(this._x=e,this):this._x},pu.y=function(e){return arguments.length?(this._y=e,this):this._y};Math.PI,Math.sqrt(5);var hu=function(){return Math.random()},mu=(function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(hu),function e(t){function n(e,n){var r,i;return e=null==e?0:+e,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*t()-1,o=2*t()-1,i=r*r+o*o}while(!i||i>1);return e+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=e,n}(hu)),vu=(function e(t){function n(){var e=mu.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(hu),function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}(hu));(function e(t){function n(e){var n=vu.source(t)(e);return function(){return n()/e}}return n.source=e,n})(hu),function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(hu);function gu(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}var yu=Array.prototype,bu=yu.map,wu=yu.slice,xu={name:"implicit"};function Au(){var e=nu(),t=[],n=[],r=xu;function i(i){var o=i+"",a=e.get(o);if(!a){if(r!==xu)return r;e.set(o,a=t.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return t.slice();t=[],e=nu();for(var r,o,a=-1,l=n.length;++a<l;)e.has(o=(r=n[a])+"")||e.set(o,t.push(r));return i},i.range=function(e){return arguments.length?(n=wu.call(e),i):n.slice()},i.unknown=function(e){return arguments.length?(r=e,i):r},i.copy=function(){return Au(t,n).unknown(r)},gu.apply(i,arguments),i}function Eu(){var e,t,n=Au().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,l=0,u=0,s=.5;function c(){var n=r().length,c=o[1]<o[0],f=o[c-0],d=o[1-c];e=(d-f)/Math.max(1,n-l+2*u),a&&(e=Math.floor(e)),f+=(d-f-e*(n-l))*s,t=e*(1-l),a&&(f=Math.round(f),t=Math.round(t));var p=hi(n).map((function(t){return f+e*t}));return i(c?p.reverse():p)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),c()):r()},n.range=function(e){return arguments.length?(o=[+e[0],+e[1]],c()):o.slice()},n.rangeRound=function(e){return o=[+e[0],+e[1]],a=!0,c()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(a=!!e,c()):a},n.padding=function(e){return arguments.length?(l=Math.min(1,u=+e),c()):l},n.paddingInner=function(e){return arguments.length?(l=Math.min(1,e),c()):l},n.paddingOuter=function(e){return arguments.length?(u=+e,c()):u},n.align=function(e){return arguments.length?(s=Math.max(0,Math.min(1,e)),c()):s},n.copy=function(){return Eu(r(),o).round(a).paddingInner(l).paddingOuter(u).align(s)},gu.apply(c(),arguments)}var Cu=function(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}},ku=function(e){return+e},Su=[0,1];function _u(e){return e}function Tu(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:(n=isNaN(t)?NaN:.5,function(){return n});var n}function Mu(e){var t,n=e[0],r=e[e.length-1];return n>r&&(t=n,n=r,r=t),function(e){return Math.max(n,Math.min(r,e))}}function Pu(e,t,n){var r=e[0],i=e[1],o=t[0],a=t[1];return i<r?(r=Tu(i,r),o=n(a,o)):(r=Tu(r,i),o=n(o,a)),function(e){return o(r(e))}}function Nu(e,t,n){var r=Math.min(e.length,t.length)-1,i=new Array(r),o=new Array(r),a=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++a<r;)i[a]=Tu(e[a],e[a+1]),o[a]=n(t[a],t[a+1]);return function(t){var n=di(e,t,1,r)-1;return o[n](i[n](t))}}function Ou(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function Ru(){var e,t,n,r,i,o,a=Su,l=Su,u=Ra,s=_u;function c(){return r=Math.min(a.length,l.length)>2?Nu:Pu,i=o=null,f}function f(t){return isNaN(t=+t)?n:(i||(i=r(a.map(e),l,u)))(e(s(t)))}return f.invert=function(n){return s(t((o||(o=r(l,a.map(e),Sa)))(n)))},f.domain=function(e){return arguments.length?(a=bu.call(e,ku),s===_u||(s=Mu(a)),c()):a.slice()},f.range=function(e){return arguments.length?(l=wu.call(e),c()):l.slice()},f.rangeRound=function(e){return l=wu.call(e),u=Cu,c()},f.clamp=function(e){return arguments.length?(s=e?Mu(a):_u,f):s!==_u},f.interpolate=function(e){return arguments.length?(u=e,c()):u},f.unknown=function(e){return arguments.length?(n=e,f):n},function(n,r){return e=n,t=r,c()}}function Iu(e,t){return Ru()(e,t)}var Du=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Lu(e){if(!(t=Du.exec(e)))throw new Error("invalid format: "+e);var t;return new ju({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function ju(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}Lu.prototype=ju.prototype,ju.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var zu,Uu,Bu,Fu,Hu=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]},Wu=function(e){return(e=Hu(Math.abs(e)))?e[1]:NaN},$u=function(e,t){var n=Hu(e,t);if(!n)return e+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Vu={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return $u(100*e,t)},r:$u,s:function(e,t){var n=Hu(e,t);if(!n)return e+"";var r=n[0],i=n[1],o=i-(zu=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Hu(e,Math.max(0,t+o-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Yu=function(e){return e},qu=Array.prototype.map,Qu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Uu=function(e){var t,n,r=void 0===e.grouping||void 0===e.thousands?Yu:(t=qu.call(e.grouping,Number),n=e.thousands+"",function(e,r){for(var i=e.length,o=[],a=0,l=t[0],u=0;i>0&&l>0&&(u+l+1>r&&(l=Math.max(1,r-u)),o.push(e.substring(i-=l,i+l)),!((u+=l+1)>r));)l=t[a=(a+1)%t.length];return o.reverse().join(n)}),i=void 0===e.currency?"":e.currency[0]+"",o=void 0===e.currency?"":e.currency[1]+"",a=void 0===e.decimal?".":e.decimal+"",l=void 0===e.numerals?Yu:function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}(qu.call(e.numerals,String)),u=void 0===e.percent?"%":e.percent+"",s=void 0===e.minus?"-":e.minus+"",c=void 0===e.nan?"NaN":e.nan+"";function f(e){var t=(e=Lu(e)).fill,n=e.align,f=e.sign,d=e.symbol,p=e.zero,h=e.width,m=e.comma,v=e.precision,g=e.trim,y=e.type;"n"===y?(m=!0,y="g"):Vu[y]||(void 0===v&&(v=12),g=!0,y="g"),(p||"0"===t&&"="===n)&&(p=!0,t="0",n="=");var b="$"===d?i:"#"===d&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",w="$"===d?o:/[%p]/.test(y)?u:"",x=Vu[y],A=/[defgprs%]/.test(y);function E(e){var i,o,u,d=b,E=w;if("c"===y)E=x(e)+E,e="";else{var C=(e=+e)<0||1/e<0;if(e=isNaN(e)?c:x(Math.abs(e),v),g&&(e=function(e){e:for(var t,n=e.length,r=1,i=-1;r<n;++r)switch(e[r]){case".":i=t=r;break;case"0":0===i&&(i=r),t=r;break;default:if(!+e[r])break e;i>0&&(i=0)}return i>0?e.slice(0,i)+e.slice(t+1):e}(e)),C&&0==+e&&"+"!==f&&(C=!1),d=(C?"("===f?f:s:"-"===f||"("===f?"":f)+d,E=("s"===y?Qu[8+zu/3]:"")+E+(C&&"("===f?")":""),A)for(i=-1,o=e.length;++i<o;)if(48>(u=e.charCodeAt(i))||u>57){E=(46===u?a+e.slice(i+1):e.slice(i))+E,e=e.slice(0,i);break}}m&&!p&&(e=r(e,1/0));var k=d.length+e.length+E.length,S=k<h?new Array(h-k+1).join(t):"";switch(m&&p&&(e=r(S+e,S.length?h-E.length:1/0),S=""),n){case"<":e=d+e+E+S;break;case"=":e=d+S+e+E;break;case"^":e=S.slice(0,k=S.length>>1)+d+e+E+S.slice(k);break;default:e=S+d+e+E}return l(e)}return v=void 0===v?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),E.toString=function(){return e+""},E}return{format:f,formatPrefix:function(e,t){var n=f(((e=Lu(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(Wu(t)/3))),i=Math.pow(10,-r),o=Qu[8+r/3];return function(e){return n(i*e)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Bu=Uu.format,Fu=Uu.formatPrefix;var Xu=function(e,t,n,r){var i,o=wi(e,t,n);switch((r=Lu(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(i=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Wu(t)/3)))-Wu(Math.abs(e)))}(o,a))||(r.precision=i),Fu(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Wu(t)-Wu(e))+1}(o,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(e){return Math.max(0,-Wu(Math.abs(e)))}(o))||(r.precision=i-2*("%"===r.type))}return Bu(r)};function Ku(e){var t=e.domain;return e.ticks=function(e){var n=t();return yi(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return Xu(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,i=t(),o=0,a=i.length-1,l=i[o],u=i[a];return u<l&&(r=l,l=u,u=r,r=o,o=a,a=r),(r=bi(l,u,n))>0?r=bi(l=Math.floor(l/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=bi(l=Math.ceil(l*r)/r,u=Math.floor(u*r)/r,n)),r>0?(i[o]=Math.floor(l/r)*r,i[a]=Math.ceil(u/r)*r,t(i)):r<0&&(i[o]=Math.ceil(l*r)/r,i[a]=Math.floor(u*r)/r,t(i)),e},e}function Zu(){var e=Iu(_u,_u);return e.copy=function(){return Ou(e,Zu())},gu.apply(e,arguments),Ku(e)}var Gu=new Date,Ju=new Date;function es(e,t,n,r){function i(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return i.floor=function(t){return e(t=new Date(+t)),t},i.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},i.round=function(e){var t=i(e),n=i.ceil(e);return e-t<n-e?t:n},i.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},i.range=function(n,r,o){var a,l=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return l;do{l.push(a=new Date(+n)),t(n,o),e(n)}while(a<n&&n<r);return l},i.filter=function(n){return es((function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),(function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););}))},n&&(i.count=function(t,r){return Gu.setTime(+t),Ju.setTime(+r),e(Gu),e(Ju),Math.floor(n(Gu,Ju))},i.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?i.filter(r?function(t){return r(t)%e==0}:function(t){return i.count(0,t)%e==0}):i:null}),i}var ts=es((function(e){e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,t){e.setFullYear(e.getFullYear()+t)}),(function(e,t){return t.getFullYear()-e.getFullYear()}),(function(e){return e.getFullYear()}));ts.every=function(e){return isFinite(e=Math.floor(e))&&e>0?es((function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n*e)})):null};var ns=ts,rs=(ts.range,es((function(e){e.setDate(1),e.setHours(0,0,0,0)}),(function(e,t){e.setMonth(e.getMonth()+t)}),(function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())}),(function(e){return e.getMonth()})));rs.range;function is(e){return es((function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+7*t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/6048e5}))}var os=is(0),as=is(1),ls=is(2),us=is(3),ss=is(4),cs=is(5),fs=is(6),ds=(os.range,as.range,ls.range,us.range,ss.range,cs.range,fs.range,es((function(e){e.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5}),(function(e){return e.getDate()-1}))),ps=ds,hs=(ds.range,es((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds()-6e4*e.getMinutes())}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getHours()}))),ms=(hs.range,es((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds())}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getMinutes()}))),vs=(ms.range,es((function(e){e.setTime(e-e.getMilliseconds())}),(function(e,t){e.setTime(+e+1e3*t)}),(function(e,t){return(t-e)/1e3}),(function(e){return e.getUTCSeconds()}))),gs=(vs.range,es((function(){}),(function(e,t){e.setTime(+e+t)}),(function(e,t){return t-e})));gs.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?es((function(t){t.setTime(Math.floor(t/e)*e)}),(function(t,n){t.setTime(+t+n*e)}),(function(t,n){return(n-t)/e})):gs:null};gs.range;function ys(e){return es((function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+7*t)}),(function(e,t){return(t-e)/6048e5}))}var bs=ys(0),ws=ys(1),xs=ys(2),As=ys(3),Es=ys(4),Cs=ys(5),ks=ys(6),Ss=(bs.range,ws.range,xs.range,As.range,Es.range,Cs.range,ks.range,es((function(e){e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+t)}),(function(e,t){return(t-e)/864e5}),(function(e){return e.getUTCDate()-1}))),_s=Ss,Ts=(Ss.range,es((function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)}),(function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()}),(function(e){return e.getUTCFullYear()})));Ts.every=function(e){return isFinite(e=Math.floor(e))&&e>0?es((function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null};var Ms=Ts;Ts.range;function Ps(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function Ns(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function Os(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}var Rs,Is={"-":"",_:" ",0:"0"},Ds=/^\s*\d+/,Ls=/^%/,js=/[\\^$*+?|[\]().{}]/g;function zs(e,t,n){var r=e<0?"-":"",i=(r?-e:e)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(t)+i:i)}function Us(e){return e.replace(js,"\\$&")}function Bs(e){return new RegExp("^(?:"+e.map(Us).join("|")+")","i")}function Fs(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function Hs(e,t,n){var r=Ds.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function Ws(e,t,n){var r=Ds.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function $s(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function Vs(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function Ys(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function qs(e,t,n){var r=Ds.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function Qs(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Xs(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Ks(e,t,n){var r=Ds.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function Zs(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function Gs(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function Js(e,t,n){var r=Ds.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function ec(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function tc(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function nc(e,t,n){var r=Ds.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function rc(e,t,n){var r=Ds.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function ic(e,t,n){var r=Ds.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function oc(e,t,n){var r=Ls.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function ac(e,t,n){var r=Ds.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function lc(e,t,n){var r=Ds.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function uc(e,t){return zs(e.getDate(),t,2)}function sc(e,t){return zs(e.getHours(),t,2)}function cc(e,t){return zs(e.getHours()%12||12,t,2)}function fc(e,t){return zs(1+ps.count(ns(e),e),t,3)}function dc(e,t){return zs(e.getMilliseconds(),t,3)}function pc(e,t){return dc(e,t)+"000"}function hc(e,t){return zs(e.getMonth()+1,t,2)}function mc(e,t){return zs(e.getMinutes(),t,2)}function vc(e,t){return zs(e.getSeconds(),t,2)}function gc(e){var t=e.getDay();return 0===t?7:t}function yc(e,t){return zs(os.count(ns(e)-1,e),t,2)}function bc(e,t){var n=e.getDay();return e=n>=4||0===n?ss(e):ss.ceil(e),zs(ss.count(ns(e),e)+(4===ns(e).getDay()),t,2)}function wc(e){return e.getDay()}function xc(e,t){return zs(as.count(ns(e)-1,e),t,2)}function Ac(e,t){return zs(e.getFullYear()%100,t,2)}function Ec(e,t){return zs(e.getFullYear()%1e4,t,4)}function Cc(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+zs(t/60|0,"0",2)+zs(t%60,"0",2)}function kc(e,t){return zs(e.getUTCDate(),t,2)}function Sc(e,t){return zs(e.getUTCHours(),t,2)}function _c(e,t){return zs(e.getUTCHours()%12||12,t,2)}function Tc(e,t){return zs(1+_s.count(Ms(e),e),t,3)}function Mc(e,t){return zs(e.getUTCMilliseconds(),t,3)}function Pc(e,t){return Mc(e,t)+"000"}function Nc(e,t){return zs(e.getUTCMonth()+1,t,2)}function Oc(e,t){return zs(e.getUTCMinutes(),t,2)}function Rc(e,t){return zs(e.getUTCSeconds(),t,2)}function Ic(e){var t=e.getUTCDay();return 0===t?7:t}function Dc(e,t){return zs(bs.count(Ms(e)-1,e),t,2)}function Lc(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Es(e):Es.ceil(e),zs(Es.count(Ms(e),e)+(4===Ms(e).getUTCDay()),t,2)}function jc(e){return e.getUTCDay()}function zc(e,t){return zs(ws.count(Ms(e)-1,e),t,2)}function Uc(e,t){return zs(e.getUTCFullYear()%100,t,2)}function Bc(e,t){return zs(e.getUTCFullYear()%1e4,t,4)}function Fc(){return"+0000"}function Hc(){return"%"}function Wc(e){return+e}function $c(e){return Math.floor(+e/1e3)}!function(e){Rs=function(e){var t=e.dateTime,n=e.date,r=e.time,i=e.periods,o=e.days,a=e.shortDays,l=e.months,u=e.shortMonths,s=Bs(i),c=Fs(i),f=Bs(o),d=Fs(o),p=Bs(a),h=Fs(a),m=Bs(l),v=Fs(l),g=Bs(u),y=Fs(u),b={a:function(e){return a[e.getDay()]},A:function(e){return o[e.getDay()]},b:function(e){return u[e.getMonth()]},B:function(e){return l[e.getMonth()]},c:null,d:uc,e:uc,f:pc,H:sc,I:cc,j:fc,L:dc,m:hc,M:mc,p:function(e){return i[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:Wc,s:$c,S:vc,u:gc,U:yc,V:bc,w:wc,W:xc,x:null,X:null,y:Ac,Y:Ec,Z:Cc,"%":Hc},w={a:function(e){return a[e.getUTCDay()]},A:function(e){return o[e.getUTCDay()]},b:function(e){return u[e.getUTCMonth()]},B:function(e){return l[e.getUTCMonth()]},c:null,d:kc,e:kc,f:Pc,H:Sc,I:_c,j:Tc,L:Mc,m:Nc,M:Oc,p:function(e){return i[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:Wc,s:$c,S:Rc,u:Ic,U:Dc,V:Lc,w:jc,W:zc,x:null,X:null,y:Uc,Y:Bc,Z:Fc,"%":Hc},x={a:function(e,t,n){var r=p.exec(t.slice(n));return r?(e.w=h[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=f.exec(t.slice(n));return r?(e.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=g.exec(t.slice(n));return r?(e.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=m.exec(t.slice(n));return r?(e.m=v[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return C(e,t,n,r)},d:Gs,e:Gs,f:ic,H:ec,I:ec,j:Js,L:rc,m:Zs,M:tc,p:function(e,t,n){var r=s.exec(t.slice(n));return r?(e.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:Ks,Q:ac,s:lc,S:nc,u:Ws,U:$s,V:Vs,w:Hs,W:Ys,x:function(e,t,r){return C(e,n,t,r)},X:function(e,t,n){return C(e,r,t,n)},y:Qs,Y:qs,Z:Xs,"%":oc};function A(e,t){return function(n){var r,i,o,a=[],l=-1,u=0,s=e.length;for(n instanceof Date||(n=new Date(+n));++l<s;)37===e.charCodeAt(l)&&(a.push(e.slice(u,l)),null!=(i=Is[r=e.charAt(++l)])?r=e.charAt(++l):i="e"===r?" ":"0",(o=t[r])&&(r=o(n,i)),a.push(r),u=l+1);return a.push(e.slice(u,l)),a.join("")}}function E(e,t){return function(n){var r,i,o=Os(1900,void 0,1);if(C(o,e,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(t&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Ns(Os(o.y,0,1))).getUTCDay(),r=i>4||0===i?ws.ceil(r):ws(r),r=_s.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Ps(Os(o.y,0,1))).getDay(),r=i>4||0===i?as.ceil(r):as(r),r=ps.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ns(Os(o.y,0,1)).getUTCDay():Ps(Os(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ns(o)):Ps(o)}}function C(e,t,n,r){for(var i,o,a=0,l=t.length,u=n.length;a<l;){if(r>=u)return-1;if(37===(i=t.charCodeAt(a++))){if(i=t.charAt(a++),!(o=x[i in Is?t.charAt(a++):i])||(r=o(e,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return b.x=A(n,b),b.X=A(r,b),b.c=A(t,b),w.x=A(n,w),w.X=A(r,w),w.c=A(t,w),{format:function(e){var t=A(e+="",b);return t.toString=function(){return e},t},parse:function(e){var t=E(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=A(e+="",w);return t.toString=function(){return e},t},utcParse:function(e){var t=E(e+="",!0);return t.toString=function(){return e},t}}}(e),Rs.format,Rs.parse,Rs.utcFormat,Rs.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Vc=es((function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCMonth(e.getUTCMonth()+t)}),(function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())}),(function(e){return e.getUTCMonth()})),Yc=(Vc.range,es((function(e){e.setUTCMinutes(0,0,0)}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getUTCHours()}))),qc=(Yc.range,es((function(e){e.setUTCSeconds(0,0)}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getUTCMinutes()})));qc.range;var Qc=function(e){return function(){return e}};function Xc(e){this._context=e}Xc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};var Kc=function(e){return new Xc(e)};function Zc(e){return e[0]}function Gc(e){return e[1]}function Jc(){this._=null}function ef(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function tf(e,t){var n=t,r=t.R,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function nf(e,t){var n=t,r=t.L,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function rf(e){for(;e.L;)e=e.L;return e}Jc.prototype={constructor:Jc,insert:function(e,t){var n,r,i;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=rf(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.R&&(tf(this,n),n=(e=n).U),n.C=!1,r.C=!0,nf(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.L&&(nf(this,n),n=(e=n).U),n.C=!1,r.C=!0,tf(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,i=e.U,o=e.L,a=e.R;if(n=o?a?rf(a):o:a,i?i.L===e?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=e.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=e.U,e=n.R,i.L=e,n.R=a,a.U=n):(n.U=i,i=n,e=n.R)):(r=e.C,e=n),e&&(e.U=i),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===i.L){if((t=i.R).C&&(t.C=!1,i.C=!0,tf(this,i),t=i.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,nf(this,t),t=i.R),t.C=i.C,i.C=t.R.C=!1,tf(this,i),e=this._;break}}else if((t=i.L).C&&(t.C=!1,i.C=!0,nf(this,i),t=i.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,tf(this,t),t=i.L),t.C=i.C,i.C=t.L.C=!1,nf(this,i),e=this._;break}t.C=!0,e=i,i=i.U}while(!e.C);e&&(e.C=!1)}}};var of=Jc;function af(e,t,n,r){var i=[null,null],o=Pf.push(i)-1;return i.left=e,i.right=t,n&&uf(i,e,t,n),r&&uf(i,t,e,r),Tf[e.index].halfedges.push(o),Tf[t.index].halfedges.push(o),i}function lf(e,t,n){var r=[t,n];return r.left=e,r}function uf(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function sf(e,t,n,r,i){var o,a=e[0],l=e[1],u=a[0],s=a[1],c=0,f=1,d=l[0]-u,p=l[1]-s;if(o=t-u,d||!(o>0)){if(o/=d,d<0){if(o<c)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>c&&(c=o)}if(o=r-u,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>c&&(c=o)}else if(d>0){if(o<c)return;o<f&&(f=o)}if(o=n-s,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>c&&(c=o)}if(o=i-s,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(e[0]=[u+c*d,s+c*p]),f<1&&(e[1]=[u+f*d,s+f*p]),!0)}}}}}function cf(e,t,n,r,i){var o=e[1];if(o)return!0;var a,l,u=e[0],s=e.left,c=e.right,f=s[0],d=s[1],p=c[0],h=c[1],m=(f+p)/2,v=(d+h)/2;if(h===d){if(m<t||m>=r)return;if(f>p){if(u){if(u[1]>=i)return}else u=[m,n];o=[m,i]}else{if(u){if(u[1]<n)return}else u=[m,i];o=[m,n]}}else if(l=v-(a=(f-p)/(h-d))*m,a<-1||a>1)if(f>p){if(u){if(u[1]>=i)return}else u=[(n-l)/a,n];o=[(i-l)/a,i]}else{if(u){if(u[1]<n)return}else u=[(i-l)/a,i];o=[(n-l)/a,n]}else if(d<h){if(u){if(u[0]>=r)return}else u=[t,a*t+l];o=[r,a*r+l]}else{if(u){if(u[0]<t)return}else u=[r,a*r+l];o=[t,a*t+l]}return e[0]=u,e[1]=o,!0}function ff(e,t){var n=e.site,r=t.left,i=t.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=t[1],i=t[0]):(r=t[0],i=t[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function df(e,t){return t[+(t.left!==e.site)]}function pf(e,t){return t[+(t.left===e.site)]}var hf,mf=[];function vf(){ef(this),this.x=this.y=this.arc=this.site=this.cy=null}function gf(e){var t=e.P,n=e.N;if(t&&n){var r=t.site,i=e.site,o=n.site;if(r!==o){var a=i[0],l=i[1],u=r[0]-a,s=r[1]-l,c=o[0]-a,f=o[1]-l,d=2*(u*f-s*c);if(!(d>=-Of)){var p=u*u+s*s,h=c*c+f*f,m=(f*p-s*h)/d,v=(u*h-c*p)/d,g=mf.pop()||new vf;g.arc=e,g.site=i,g.x=m+a,g.y=(g.cy=v+l)+Math.sqrt(m*m+v*v),e.circle=g;for(var y=null,b=Mf._;b;)if(g.y<b.y||g.y===b.y&&g.x<=b.x){if(!b.L){y=b.P;break}b=b.L}else{if(!b.R){y=b;break}b=b.R}Mf.insert(y,g),y||(hf=g)}}}}function yf(e){var t=e.circle;t&&(t.P||(hf=t.N),Mf.remove(t),mf.push(t),ef(t),e.circle=null)}var bf=[];function wf(){ef(this),this.edge=this.site=this.circle=null}function xf(e){var t=bf.pop()||new wf;return t.site=e,t}function Af(e){yf(e),_f.remove(e),bf.push(e),ef(e)}function Ef(e){var t=e.circle,n=t.x,r=t.cy,i=[n,r],o=e.P,a=e.N,l=[e];Af(e);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<Nf&&Math.abs(r-u.circle.cy)<Nf;)o=u.P,l.unshift(u),Af(u),u=o;l.unshift(u),yf(u);for(var s=a;s.circle&&Math.abs(n-s.circle.x)<Nf&&Math.abs(r-s.circle.cy)<Nf;)a=s.N,l.push(s),Af(s),s=a;l.push(s),yf(s);var c,f=l.length;for(c=1;c<f;++c)s=l[c],u=l[c-1],uf(s.edge,u.site,s.site,i);u=l[0],(s=l[f-1]).edge=af(u.site,s.site,null,i),gf(u),gf(s)}function Cf(e){for(var t,n,r,i,o=e[0],a=e[1],l=_f._;l;)if((r=kf(l,a)-o)>Nf)l=l.L;else{if(!((i=o-Sf(l,a))>Nf)){r>-Nf?(t=l.P,n=l):i>-Nf?(t=l,n=l.N):t=n=l;break}if(!l.R){t=l;break}l=l.R}!function(e){Tf[e.index]={site:e,halfedges:[]}}(e);var u=xf(e);if(_f.insert(t,u),t||n){if(t===n)return yf(t),n=xf(t.site),_f.insert(u,n),u.edge=n.edge=af(t.site,u.site),gf(t),void gf(n);if(n){yf(t),yf(n);var s=t.site,c=s[0],f=s[1],d=e[0]-c,p=e[1]-f,h=n.site,m=h[0]-c,v=h[1]-f,g=2*(d*v-p*m),y=d*d+p*p,b=m*m+v*v,w=[(v*y-p*b)/g+c,(d*b-m*y)/g+f];uf(n.edge,s,h,w),u.edge=af(s,e,null,w),n.edge=af(e,h,null,w),gf(t),gf(n)}else u.edge=af(t.site,u.site)}}function kf(e,t){var n=e.site,r=n[0],i=n[1],o=i-t;if(!o)return r;var a=e.P;if(!a)return-1/0;var l=(n=a.site)[0],u=n[1],s=u-t;if(!s)return l;var c=l-r,f=1/o-1/s,d=c/s;return f?(-d+Math.sqrt(d*d-2*f*(c*c/(-2*s)-u+s/2+i-o/2)))/f+r:(r+l)/2}function Sf(e,t){var n=e.N;if(n)return kf(n,t);var r=e.site;return r[1]===t?r[0]:1/0}var _f,Tf,Mf,Pf,Nf=1e-6,Of=1e-12;function Rf(e,t){return t[1]-e[1]||t[0]-e[0]}function If(e,t){var n,r,i,o=e.sort(Rf).pop();for(Pf=[],Tf=new Array(e.length),_f=new of,Mf=new of;;)if(i=hf,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Cf(o),n=o[0],r=o[1]),o=e.pop();else{if(!i)break;Ef(i.arc)}if(function(){for(var e,t,n,r,i=0,o=Tf.length;i<o;++i)if((e=Tf[i])&&(r=(t=e.halfedges).length)){var a=new Array(r),l=new Array(r);for(n=0;n<r;++n)a[n]=n,l[n]=ff(e,Pf[t[n]]);for(a.sort((function(e,t){return l[t]-l[e]})),n=0;n<r;++n)l[n]=t[a[n]];for(n=0;n<r;++n)t[n]=l[n]}}(),t){var a=+t[0][0],l=+t[0][1],u=+t[1][0],s=+t[1][1];!function(e,t,n,r){for(var i,o=Pf.length;o--;)cf(i=Pf[o],e,t,n,r)&&sf(i,e,t,n,r)&&(Math.abs(i[0][0]-i[1][0])>Nf||Math.abs(i[0][1]-i[1][1])>Nf)||delete Pf[o]}(a,l,u,s),function(e,t,n,r){var i,o,a,l,u,s,c,f,d,p,h,m,v=Tf.length,g=!0;for(i=0;i<v;++i)if(o=Tf[i]){for(a=o.site,l=(u=o.halfedges).length;l--;)Pf[u[l]]||u.splice(l,1);for(l=0,s=u.length;l<s;)h=(p=pf(o,Pf[u[l]]))[0],m=p[1],f=(c=df(o,Pf[u[++l%s]]))[0],d=c[1],(Math.abs(h-f)>Nf||Math.abs(m-d)>Nf)&&(u.splice(l,0,Pf.push(lf(a,p,Math.abs(h-e)<Nf&&r-m>Nf?[e,Math.abs(f-e)<Nf?d:r]:Math.abs(m-r)<Nf&&n-h>Nf?[Math.abs(d-r)<Nf?f:n,r]:Math.abs(h-n)<Nf&&m-t>Nf?[n,Math.abs(f-n)<Nf?d:t]:Math.abs(m-t)<Nf&&h-e>Nf?[Math.abs(d-t)<Nf?f:e,t]:null))-1),++s);s&&(g=!1)}if(g){var y,b,w,x=1/0;for(i=0,g=null;i<v;++i)(o=Tf[i])&&(w=(y=(a=o.site)[0]-e)*y+(b=a[1]-t)*b)<x&&(x=w,g=o);if(g){var A=[e,t],E=[e,r],C=[n,r],k=[n,t];g.halfedges.push(Pf.push(lf(a=g.site,A,E))-1,Pf.push(lf(a,E,C))-1,Pf.push(lf(a,C,k))-1,Pf.push(lf(a,k,A))-1)}}for(i=0;i<v;++i)(o=Tf[i])&&(o.halfedges.length||delete Tf[i])}(a,l,u,s)}this.edges=Pf,this.cells=Tf,_f=Mf=Pf=Tf=null}If.prototype={constructor:If,polygons:function(){var e=this.edges;return this.cells.map((function(t){var n=t.halfedges.map((function(n){return df(t,e[n])}));return n.data=t.site.data,n}))},triangles:function(){var e=[],t=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,l,u,s,c=n.site,f=-1,d=t[i[o-1]],p=d.left===c?d.right:d.left;++f<o;)a=p,p=(d=t[i[f]]).left===c?d.right:d.left,a&&p&&r<a.index&&r<p.index&&(u=a,s=p,((l=c)[0]-s[0])*(u[1]-l[1])-(l[0]-u[0])*(s[1]-l[1])<0)&&e.push([c.data,a.data,p.data])})),e},links:function(){return this.edges.filter((function(e){return e.right})).map((function(e){return{source:e.left.data,target:e.right.data}}))},find:function(e,t,n){for(var r,i,o=this,a=o._found||0,l=o.cells.length;!(i=o.cells[a]);)if(++a>=l)return null;var u=e-i.site[0],s=t-i.site[1],c=u*u+s*s;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],l=r.left;if(l!==i.site&&l||(l=r.right)){var u=e-l[0],s=t-l[1],f=u*u+s*s;f<c&&(c=f,a=l.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}};Math.SQRT2;function Df(e,t,n){this.k=e,this.x=t,this.y=n}Df.prototype={constructor:Df,scale:function(e){return 1===e?this:new Df(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new Df(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Df(1,0,0);Df.prototype;function Lf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return jf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return jf(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var zf=["Year","AMERICAS","APAC","EMEA","Capex"],Uf=function(e){var t=e.data,n=e.dimensions,o={top:n.height/10,right:n.width/10,bottom:n.height/10,left:n.width/10},a=Lf(Object(r.useState)(null),2),l=a[0],u=a[1],s=zf.slice(1,zf.length-1),c=Eu().domain(t.map((function(e){return e.Year}))).rangeRound([o.left,n.width-o.right]).paddingInner(.1),f=Eu().domain(s).rangeRound([0,c.bandwidth()]).padding(.05),d=Zu().domain([0,xi(t,(function(e){return xi(s,(function(t){return e[t]}))}))]).nice().rangeRound([n.height-o.bottom,o.top]),p=Zu().domain([0,xi(t,(function(e){return e.Capex}))]).nice().rangeRound([n.height-o.bottom,o.top]),h=d.ticks(),m=p.ticks(),v=Au().range(["#00467F","#6583A7","#98AAC3","#CCD3E0"]),g=function(){var e=Zc,t=Gc,n=Qc(!0),r=null,i=Kc,o=null;function a(a){var l,u,s,c=a.length,f=!1;for(null==r&&(o=i(s=Jl())),l=0;l<=c;++l)!(l<c&&n(u=a[l],l,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+e(u,l,a),+t(u,l,a));if(s)return o=null,s+""||null}return a.x=function(t){return arguments.length?(e="function"==typeof t?t:Qc(+t),a):e},a.y=function(e){return arguments.length?(t="function"==typeof e?e:Qc(+e),a):t},a.defined=function(e){return arguments.length?(n="function"==typeof e?e:Qc(!!e),a):n},a.curve=function(e){return arguments.length?(i=e,null!=r&&(o=i(r)),a):i},a.context=function(e){return arguments.length?(null==e?r=o=null:o=i(r=e),a):r},a}().defined((function(e){return!isNaN(e.Capex)})).x((function(e){return c(e.Year)+c.bandwidth()/2})).y((function(e){return p(e.Capex)}));return i.a.createElement("svg",{width:n.width,height:n.height},i.a.createElement("g",{className:"title"},i.a.createElement("text",{x:n.width/2,y:o.top/2,textAnchor:"middle",fontSize:o.top/3,fontWeight:"bold"},"ANNUAL COST BY REGION")),i.a.createElement("g",{className:"bars"},t.map((function(e,t){return i.a.createElement("g",{key:t,transform:"translate(".concat(c(e.Year),",0)")},s.map((function(t,n){return i.a.createElement(li,{key:n,title:"Annual Cost: $".concat(e[t],"MM"),placement:"top"},i.a.createElement("rect",{className:l===t?"hoverBar":"bar",x:f(t),y:d(e[t]),width:f.bandwidth(),height:d(0)-d(e[t]),fill:v(t),onMouseEnter:function(){return u(t)},onMouseLeave:function(){return u(null)}}))})))}))),i.a.createElement("g",{className:"line"},i.a.createElement("path",{d:g(t),fill:"none",stroke:"#0093D0",strokeWidth:2}),t.map((function(e,t){return i.a.createElement(li,{key:t,title:"Capex: $".concat(e.Capex,"MM"),placement:"top"},i.a.createElement("circle",{cx:c(e.Year)+c.bandwidth()/2,cy:p(e.Capex),r:"4",fill:"#0093D0"}))}))),i.a.createElement("g",{className:"legend",transform:"translate(".concat(0,",0)"),textAnchor:"end"},v.domain().slice().map((function(e,t){return i.a.createElement("g",{key:t,transform:"translate(".concat((t+.75)*((n.width-o.left-o.right)/v.domain().slice().length)+o.left,",").concat(o.top*(2/3),")")},i.a.createElement("rect",{x:-o.top/4,y:0,width:o.top/4,height:o.top/4,fill:l===e?"#0093d0":v(e)}),i.a.createElement("text",{x:-o.top/3,y:o.top/8,dy:o.top/10,fontSize:o.top/4},e))}))),i.a.createElement("g",{className:"x-axis"},i.a.createElement("line",{x1:o.left,y1:n.height-o.bottom,x2:n.width-o.right,y2:n.height-o.bottom,style:{stroke:"black",strokeWidth:"1"}}),c.domain().slice().map((function(e,t){var r=c(e)+c.bandwidth()/2;return i.a.createElement("g",{key:t},i.a.createElement("line",{x1:r,y1:n.height-o.bottom,x2:r,y2:n.height-o.bottom+5,style:{stroke:"black",strokeWidth:"1"}}),i.a.createElement("text",{x:r,y:n.height-o.bottom/2,textAnchor:"middle",fontSize:o.top/4},e))})),i.a.createElement("text",{x:n.width/2,y:n.height-o.bottom/8,textAnchor:"middle",fontSize:o.bottom/4,fontWeight:"bold"},"YEAR")),i.a.createElement("g",{className:"y-axis"},i.a.createElement("line",{x1:o.left,y1:o.top,x2:o.left,y2:n.height-o.bottom,style:{stroke:"black",strokeWidth:"1"}}),h.map((function(e,t){return i.a.createElement("g",{key:t},i.a.createElement("line",{x1:o.left,y1:d(e),x2:o.left-o.left/20,y2:d(e),style:{stroke:"black",strokeWidth:"1"}}),i.a.createElement("text",{x:o.left/1.5,y:d(e),dy:"0.35em",fontSize:o.left/8,textAnchor:"middle"},"$",e,"MM"))})),i.a.createElement("text",{x:-n.height/2-o.top/2+o.bottom/2,y:o.left/6,textAnchor:"middle",fontSize:o.left/6,fontWeight:"bold",transform:"rotate(-90 0 0 )"},"AMERICAS, APAC, EMEA")),i.a.createElement("g",{className:"y-axis-secondary"},i.a.createElement("line",{x1:n.width-o.right,y1:o.top,x2:n.width-o.right,y2:n.height-o.bottom,style:{stroke:"black",strokeWidth:"1"}}),m.map((function(e,t){return i.a.createElement("g",{key:t},i.a.createElement("line",{x1:n.width-o.right,y1:p(e),x2:n.width-o.right+o.right/20,y2:p(e),style:{stroke:"black",strokeWidth:"1"}}),i.a.createElement("text",{x:n.width-o.right*(2/3),y:p(e),dy:"0.35em",fontSize:o.right/8,textAnchor:"middle"},"$",e,"MM"))})),i.a.createElement("text",{x:n.height/2+o.top/2-o.bottom/2,y:-n.width+o.right/6,textAnchor:"middle",fontSize:o.right/6,fontWeight:"bold",transform:"rotate(90 0 0 )"},"Capex")))};function Bf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Ff(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ff(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ff(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Hf=[{Year:"2014",AMERICAS:134,APAC:64,EMEA:53,Capex:50},{Year:"2015",AMERICAS:137,APAC:65,EMEA:54,Capex:51},{Year:"2016",AMERICAS:140,APAC:66,EMEA:55,Capex:16},{Year:"2017",AMERICAS:136,APAC:64,EMEA:53,Capex:52},{Year:"2018",AMERICAS:129,APAC:61,EMEA:50,Capex:51},{Year:"2019",AMERICAS:133,APAC:63,EMEA:52,Capex:10},{Year:"2020",AMERICAS:137,APAC:65,EMEA:53,Capex:2}];function Wf(){var e=Object(r.useRef)(null),t=a(e),n=t.width,o=t.height,l=Bf(Object(r.useState)(Hf),1)[0];return i.a.createElement("div",{ref:e},i.a.createElement("h1",null,"D3.js & Data Visualization"),i.a.createElement("i",{className:"fas fa-chart-bar fa-10x"}),i.a.createElement("div",null,n&&o&&i.a.createElement(Uf,{data:l,dimensions:{width:"400",height:"200"}})))}},,function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(3),a=n.n(o),l=n(34);a.a.render(i.a.createElement(l.a,null),document.getElementById("root"))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(33),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,l=i?Symbol.for("react.fragment"):60107,u=i?Symbol.for("react.strict_mode"):60108,s=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.memo"):60115,m=i?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}function x(){}function A(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(g(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var E=A.prototype=new x;E.constructor=A,r(E,w.prototype),E.isPureReactComponent=!0;var C={current:null},k=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!S.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:C.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var M=/\/+/g,P=[];function N(e,t,n,r){if(P.length){var i=P.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function O(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,i){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case a:u=!0}}if(u)return r(i,t,""===n?"."+I(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+I(l=t[s],s);u+=e(l,c,r,i)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+I(l,s++),r,i);else if("object"===l)throw r=""+t,Error(g(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,(function(e){return e})):null!=e&&(T(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function j(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(M,"$&/")+"/"),R(e,L,t=N(t,o,r,i)),O(t)}var z={current:null};function U(){var e=z.current;if(null===e)throw Error(g(321));return e}var B={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:C,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,D,t=N(null,null,t,n)),O(t)},count:function(e){return R(e,(function(){return null}),null)},toArray:function(e){var t=[];return j(e,t,null,(function(e){return e})),t},only:function(e){if(!T(e))throw Error(g(143));return e}},t.Component=w,t.Fragment=l,t.Profiler=s,t.PureComponent=A,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,t.cloneElement=function(e,t,n){if(null==e)throw Error(g(267,e));var i=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=C.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!S.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return U().useCallback(e,t)},t.useContext=function(e,t){return U().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return U().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return U().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return U().useLayoutEffect(e,t)},t.useMemo=function(e,t){return U().useMemo(e,t)},t.useReducer=function(e,t,n){return U().useReducer(e,t,n)},t.useRef=function(e){return U().useRef(e)},t.useState=function(e){return U().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(33),o=n(98);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function l(e,t,n,r,i,o,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var u=!1,s=null,c=!1,f=null,d={onError:function(e){u=!0,s=e}};function p(e,t,n,r,i,o,a,c,f){u=!1,s=null,l.apply(d,arguments)}var h=null,m=null,v=null;function g(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,i,o,l,d,h){if(p.apply(this,arguments),u){if(!u)throw Error(a(198));var m=s;u=!1,s=null,c||(c=!0,f=m)}}(r,t,void 0,e),e.currentTarget=null}var y=null,b={};function w(){if(y)for(var e in b){var t=b[e],n=y.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!A[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in A[n]=t,n=t.eventTypes){var i=void 0,o=n[r],l=t,u=r;if(E.hasOwnProperty(u))throw Error(a(99,u));E[u]=o;var s=o.phasedRegistrationNames;if(s){for(i in s)s.hasOwnProperty(i)&&x(s[i],l,u);i=!0}else o.registrationName?(x(o.registrationName,l,u),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function x(e,t,n){if(C[e])throw Error(a(100,e));C[e]=t,k[e]=t.eventTypes[n].dependencies}var A=[],E={},C={},k={};function S(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&w()}var _=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),T=null,M=null,P=null;function N(e){if(e=m(e)){if("function"!=typeof T)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),T(e.stateNode,e.type,t))}}function O(e){M?P?P.push(e):P=[e]:M=e}function R(){if(M){var e=M,t=P;if(P=M=null,N(e),t)for(e=0;e<t.length;e++)N(t[e])}}function I(e,t){return e(t)}function D(e,t,n,r,i){return e(t,n,r,i)}function L(){}var j=I,z=!1,U=!1;function B(){null===M&&null===P||(L(),R())}function F(e,t,n){if(U)return e(t,n);U=!0;try{return j(e,t,n)}finally{U=!1,B()}}var H=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,W=Object.prototype.hasOwnProperty,$={},V={};function Y(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){q[e]=new Y(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];q[t]=new Y(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){q[e]=new Y(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){q[e]=new Y(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){q[e]=new Y(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){q[e]=new Y(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){q[e]=new Y(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){q[e]=new Y(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){q[e]=new Y(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function X(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,X);q[t]=new Y(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,X);q[t]=new Y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,X);q[t]=new Y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){q[e]=new Y(e,1,!1,e.toLowerCase(),null,!1)})),q.xlinkHref=new Y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){q[e]=new Y(e,1,!1,e.toLowerCase(),null,!0)}));var K=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Z(e,t,n,r){var i=q.hasOwnProperty(t)?q[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!W.call(V,e)||!W.call($,e)&&(H.test(e)?V[e]=!0:($[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}K.hasOwnProperty("ReactCurrentDispatcher")||(K.ReactCurrentDispatcher={current:null}),K.hasOwnProperty("ReactCurrentBatchConfig")||(K.ReactCurrentBatchConfig={suspense:null});var G=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,ie=J?Symbol.for("react.profiler"):60114,oe=J?Symbol.for("react.provider"):60109,ae=J?Symbol.for("react.context"):60110,le=J?Symbol.for("react.concurrent_mode"):60111,ue=J?Symbol.for("react.forward_ref"):60112,se=J?Symbol.for("react.suspense"):60113,ce=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,pe=J?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case se:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case oe:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ge(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=ve(e.type);n=null,r&&(n=ve(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(G,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ae(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ce(e,t){null!=(t=t.checked)&&Z(e,"checked",t,!1)}function ke(e,t){Ce(e,t);var n=ye(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?_e(e,t.type,n):t.hasOwnProperty("defaultValue")&&_e(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Se(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function _e(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Te(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Me(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Pe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ne(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function Oe(e,t){var n=ye(t.value),r=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Re(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ie="http://www.w3.org/1999/xhtml",De="http://www.w3.org/2000/svg";function Le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function je(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,Ue=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==De||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Be(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Fe(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:Fe("Animation","AnimationEnd"),animationiteration:Fe("Animation","AnimationIteration"),animationstart:Fe("Animation","AnimationStart"),transitionend:Fe("Transition","TransitionEnd")},We={},$e={};function Ve(e){if(We[e])return We[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in $e)return We[e]=n[t];return e}_&&($e=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var Ye=Ve("animationend"),qe=Ve("animationiteration"),Qe=Ve("animationstart"),Xe=Ve("transitionend"),Ke="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ze=new("function"==typeof WeakMap?WeakMap:Map);function Ge(e){var t=Ze.get(e);return void 0===t&&(t=new Map,Ze.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return tt(i),e;if(o===r)return tt(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var l=!1,u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)g(e,t[r],n[r]);else t&&g(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(ot=rt(ot,e)),e=ot,ot=null,e){if(it(e,at),ot)throw Error(a(95));if(c)throw e=f,c=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function st(e){if(!_)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function dt(e,t,n,r){if(ct.length){var i=ct.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=_n(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=ut(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var l=null,u=0;u<A.length;u++){var s=A[u];s&&(s=s.extractEvents(r,t,o,i,a))&&(l=rt(l,s))}lt(l)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Qt(t,"scroll",!0);break;case"focus":case"blur":Qt(t,"focus",!0),Qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":st(e)&&Qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ke.indexOf(e)&&qt(e,t)}n.set(e,null)}}var mt,vt,gt,yt=!1,bt=[],wt=null,xt=null,At=null,Et=new Map,Ct=new Map,kt=[],St="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),_t="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Tt(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function Mt(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":At=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ct.delete(t.pointerId)}}function Pt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=Tt(t,n,r,i,o),null!==t&&(null!==(t=Tn(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Nt(e){var t=_n(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){gt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ot(e){if(null!==e.blockedOn)return!1;var t=Gt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Tn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Rt(e,t,n){Ot(e)&&n.delete(t)}function It(){for(yt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=Tn(e.blockedOn))&&mt(e);break}var t=Gt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&Ot(wt)&&(wt=null),null!==xt&&Ot(xt)&&(xt=null),null!==At&&Ot(At)&&(At=null),Et.forEach(Rt),Ct.forEach(Rt)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,It)))}function Lt(e){function t(t){return Dt(t,e)}if(0<bt.length){Dt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&Dt(wt,e),null!==xt&&Dt(xt,e),null!==At&&Dt(At,e),Et.forEach(t),Ct.forEach(t),n=0;n<kt.length;n++)(r=kt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<kt.length&&null===(n=kt[0]).blockedOn;)Nt(n),null===n.blockedOn&&kt.shift()}var jt={},zt=new Map,Ut=new Map,Bt=["abort","abort",Ye,"animationEnd",qe,"animationIteration",Qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Xe,"transitionEnd","waiting","waiting"];function Ft(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Ut.set(r,t),zt.set(r,o),jt[i]=o}}Ft("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ft("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ft(Bt,2);for(var Ht="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Wt=0;Wt<Ht.length;Wt++)Ut.set(Ht[Wt],0);var $t=o.unstable_UserBlockingPriority,Vt=o.unstable_runWithPriority,Yt=!0;function qt(e,t){Qt(t,e,!1)}function Qt(e,t,n){var r=Ut.get(t);switch(void 0===r?2:r){case 0:r=Xt.bind(null,t,1,e);break;case 1:r=Kt.bind(null,t,1,e);break;default:r=Zt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Xt(e,t,n,r){z||L();var i=Zt,o=z;z=!0;try{D(i,e,t,n,r)}finally{(z=o)||B()}}function Kt(e,t,n,r){Vt($t,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){if(Yt)if(0<bt.length&&-1<St.indexOf(e))e=Tt(null,e,t,n,r),bt.push(e);else{var i=Gt(e,t,n,r);if(null===i)Mt(e,r);else if(-1<St.indexOf(e))e=Tt(i,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return wt=Pt(wt,e,t,n,r,i),!0;case"dragenter":return xt=Pt(xt,e,t,n,r,i),!0;case"mouseover":return At=Pt(At,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Et.set(o,Pt(Et.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Ct.set(o,Pt(Ct.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){Mt(e,r),e=dt(e,r,null,t);try{F(pt,e)}finally{ft(e)}}}}function Gt(e,t,n,r){if(null!==(n=_n(n=ut(r)))){var i=Je(n);if(null===i)n=null;else{var o=i.tag;if(13===o){if(null!==(n=et(i)))return n;n=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=dt(e,r,n,t);try{F(pt,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ie;function un(e,t){var n=Ge(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function sn(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,vn=null;function gn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function An(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),Cn="__reactInternalInstance$"+En,kn="__reactEventHandlers$"+En,Sn="__reactContainere$"+En;function _n(e){var t=e[Cn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Sn]||n[Cn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=An(e);null!==e;){if(n=e[Cn])return n;e=An(e)}return t}n=(e=n).parentNode}return null}function Tn(e){return!(e=e[Cn]||e[Sn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Mn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Pn(e){return e[kn]||null}function Nn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function On(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Rn(e,t,n){(t=On(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Nn(t);for(t=n.length;0<t--;)Rn(n[t],"captured",e);for(t=0;t<n.length;t++)Rn(n[t],"bubbled",e)}}function Dn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=On(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Ln(e){e&&e.dispatchConfig.registrationName&&Dn(e._targetInst,null,e)}function jn(e){it(e,In)}var zn=null,Un=null,Bn=null;function Fn(){if(Bn)return Bn;var e,t,n=Un,r=n.length,i="value"in zn?zn.value:zn.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Bn=i.slice(e,1<t?1-t:void 0)}function Hn(){return!0}function Wn(){return!1}function $n(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Hn:Wn,this.isPropagationStopped=Wn,this}function Vn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Yn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function qn(e){e.eventPool=[],e.getPooled=Vn,e.release=Yn}i($n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Hn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Hn)},persist:function(){this.isPersistent=Hn},isPersistent:Wn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Wn,this._dispatchInstances=this._dispatchListeners=null}}),$n.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},$n.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,qn(n),n},qn($n);var Qn=$n.extend({data:null}),Xn=$n.extend({data:null}),Kn=[9,13,27,32],Zn=_&&"CompositionEvent"in window,Gn=null;_&&"documentMode"in document&&(Gn=document.documentMode);var Jn=_&&"TextEvent"in window&&!Gn,er=_&&(!Zn||Gn&&8<Gn&&11>=Gn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ir(e,t){switch(e){case"keyup":return-1!==Kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var i;if(Zn)e:{switch(e){case"compositionstart":var o=nr.compositionStart;break e;case"compositionend":o=nr.compositionEnd;break e;case"compositionupdate":o=nr.compositionUpdate;break e}o=void 0}else ar?ir(e,n)&&(o=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=nr.compositionStart);return o?(er&&"ko"!==n.locale&&(ar||o!==nr.compositionStart?o===nr.compositionEnd&&ar&&(i=Fn()):(Un="value"in(zn=r)?zn.value:zn.textContent,ar=!0)),o=Qn.getPooled(o,t,n,r),i?o.data=i:null!==(i=or(n))&&(o.data=i),jn(o),i=o):i=null,(e=Jn?function(e,t){switch(e){case"compositionend":return or(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Zn&&ir(e,t)?(e=Fn(),Bn=Un=zn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Xn.getPooled(nr.beforeInput,t,n,r)).data=e,jn(t)):t=null,null===i?t:null===t?i:[i,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var cr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=$n.getPooled(cr.change,e,t,n)).type="change",O(n),jn(e),e}var dr=null,pr=null;function hr(e){lt(e)}function mr(e){if(xe(Mn(e)))return e}function vr(e,t){if("change"===e)return t}var gr=!1;function yr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&mr(pr))if(e=fr(pr,e,ut(e)),z)lt(e);else{z=!0;try{I(hr,e)}finally{z=!1,B()}}}function wr(e,t,n){"focus"===e?(yr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&yr()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function Ar(e,t){if("click"===e)return mr(t)}function Er(e,t){if("input"===e||"change"===e)return mr(t)}_&&(gr=st("input")&&(!document.documentMode||9<document.documentMode));var Cr={eventTypes:cr,_isInputEventSupported:gr,extractEvents:function(e,t,n,r){var i=t?Mn(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=vr;else if(sr(i))if(gr)a=Er;else{a=xr;var l=wr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=Ar);if(a&&(a=a(e,t)))return fr(a,n,r);l&&l(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&_e(i,"number",i.value)}},kr=$n.extend({view:null,detail:null}),Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _r(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Tr(){return _r}var Mr=0,Pr=0,Nr=!1,Or=!1,Rr=kr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Tr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Mr;return Mr=e.screenX,Nr?"mousemove"===e.type?e.screenX-t:0:(Nr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Pr;return Pr=e.screenY,Or?"mousemove"===e.type?e.screenY-t:0:(Or=!0,0)}}),Ir=Rr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Dr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Lr={eventTypes:Dr,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?_n(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var l=Rr,u=Dr.mouseLeave,s=Dr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Ir,u=Dr.pointerLeave,s=Dr.pointerEnter,c="pointer");if(e=null==a?o:Mn(a),o=null==t?o:Mn(t),(u=l.getPooled(u,a,n,r)).type=c+"leave",u.target=e,u.relatedTarget=o,(n=l.getPooled(s,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=e,c=t,(r=a)&&c)e:{for(s=c,a=0,e=l=r;e;e=Nn(e))a++;for(e=0,t=s;t;t=Nn(t))e++;for(;0<a-e;)l=Nn(l),a--;for(;0<e-a;)s=Nn(s),e--;for(;a--;){if(l===s||l===s.alternate)break e;l=Nn(l),s=Nn(s)}l=null}else l=null;for(s=l,l=[];r&&r!==s&&(null===(a=r.alternate)||a!==s);)l.push(r),r=Nn(r);for(r=[];c&&c!==s&&(null===(a=c.alternate)||a!==s);)r.push(c),c=Nn(c);for(c=0;c<l.length;c++)Dn(l[c],"bubbled",u);for(c=r.length;0<c--;)Dn(r[c],"captured",n);return 0==(64&i)?[u]:[u,n]}};var jr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},zr=Object.prototype.hasOwnProperty;function Ur(e,t){if(jr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!zr.call(t,n[r])||!jr(e[n[r]],t[n[r]]))return!1;return!0}var Br=_&&"documentMode"in document&&11>=document.documentMode,Fr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,Wr=null,$r=null,Vr=!1;function Yr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vr||null==Hr||Hr!==cn(n)?null:("selectionStart"in(n=Hr)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},$r&&Ur($r,n)?null:($r=n,(e=$n.getPooled(Fr.select,Wr,e,t)).type="select",e.target=Hr,jn(e),e))}var qr={eventTypes:Fr,extractEvents:function(e,t,n,r,i,o){if(!(o=!(i=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Ge(i),o=k.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?Mn(t):window,e){case"focus":(sr(i)||"true"===i.contentEditable)&&(Hr=i,Wr=t,$r=null);break;case"blur":$r=Wr=Hr=null;break;case"mousedown":Vr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vr=!1,Yr(n,r);case"selectionchange":if(Br)break;case"keydown":case"keyup":return Yr(n,r)}return null}},Qr=$n.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Xr=$n.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Kr=kr.extend({relatedTarget:null});function Zr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Gr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ei=kr.extend({key:function(e){if(e.key){var t=Gr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Tr,charCode:function(e){return"keypress"===e.type?Zr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ti=Rr.extend({dataTransfer:null}),ni=kr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Tr}),ri=$n.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ii=Rr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),oi={eventTypes:jt,extractEvents:function(e,t,n,r){var i=zt.get(e);if(!i)return null;switch(e){case"keypress":if(0===Zr(n))return null;case"keydown":case"keyup":e=ei;break;case"blur":case"focus":e=Kr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Rr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ti;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ni;break;case Ye:case qe:case Qe:e=Qr;break;case Xe:e=ri;break;case"scroll":e=kr;break;case"wheel":e=ii;break;case"copy":case"cut":case"paste":e=Xr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ir;break;default:e=$n}return jn(t=e.getPooled(i,t,n,r)),t}};if(y)throw Error(a(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),h=Pn,m=Tn,v=Mn,S({SimpleEventPlugin:oi,EnterLeaveEventPlugin:Lr,ChangeEventPlugin:Cr,SelectEventPlugin:qr,BeforeInputEventPlugin:lr});var ai=[],li=-1;function ui(e){0>li||(e.current=ai[li],ai[li]=null,li--)}function si(e,t){li++,ai[li]=e.current,e.current=t}var ci={},fi={current:ci},di={current:!1},pi=ci;function hi(e,t){var n=e.type.contextTypes;if(!n)return ci;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function mi(e){return null!=(e=e.childContextTypes)}function vi(){ui(di),ui(fi)}function gi(e,t,n){if(fi.current!==ci)throw Error(a(168));si(fi,t),si(di,n)}function yi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,ve(t)||"Unknown",o));return i({},n,{},r)}function bi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ci,pi=fi.current,si(fi,e),si(di,di.current),!0}function wi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=yi(e,t,pi),r.__reactInternalMemoizedMergedChildContext=e,ui(di),ui(fi),si(fi,e)):ui(di),si(di,n)}var xi=o.unstable_runWithPriority,Ai=o.unstable_scheduleCallback,Ei=o.unstable_cancelCallback,Ci=o.unstable_requestPaint,ki=o.unstable_now,Si=o.unstable_getCurrentPriorityLevel,_i=o.unstable_ImmediatePriority,Ti=o.unstable_UserBlockingPriority,Mi=o.unstable_NormalPriority,Pi=o.unstable_LowPriority,Ni=o.unstable_IdlePriority,Oi={},Ri=o.unstable_shouldYield,Ii=void 0!==Ci?Ci:function(){},Di=null,Li=null,ji=!1,zi=ki(),Ui=1e4>zi?ki:function(){return ki()-zi};function Bi(){switch(Si()){case _i:return 99;case Ti:return 98;case Mi:return 97;case Pi:return 96;case Ni:return 95;default:throw Error(a(332))}}function Fi(e){switch(e){case 99:return _i;case 98:return Ti;case 97:return Mi;case 96:return Pi;case 95:return Ni;default:throw Error(a(332))}}function Hi(e,t){return e=Fi(e),xi(e,t)}function Wi(e,t,n){return e=Fi(e),Ai(e,t,n)}function $i(e){return null===Di?(Di=[e],Li=Ai(_i,Yi)):Di.push(e),Oi}function Vi(){if(null!==Li){var e=Li;Li=null,Ei(e)}Yi()}function Yi(){if(!ji&&null!==Di){ji=!0;var e=0;try{var t=Di;Hi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Di=null}catch(t){throw null!==Di&&(Di=Di.slice(e+1)),Ai(_i,Vi),t}finally{ji=!1}}}function qi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Qi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Xi={current:null},Ki=null,Zi=null,Gi=null;function Ji(){Gi=Zi=Ki=null}function eo(e){var t=Xi.current;ui(Xi),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){Ki=e,Gi=Zi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Pa=!0),e.firstContext=null)}function ro(e,t){if(Gi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Gi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zi){if(null===Ki)throw Error(a(308));Zi=t,Ki.dependencies={expirationTime:0,firstContext:t,responders:null}}else Zi=Zi.next=t;return e._currentValue}var io=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ao(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function lo(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function uo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function so(e,t){var n=e.alternate;null!==n&&ao(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function co(e,t,n,r){var o=e.updateQueue;io=!1;var a=o.baseQueue,l=o.shared.pending;if(null!==l){if(null!==a){var u=a.next;a.next=l.next,l.next=u}a=l,o.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==a){u=a.next;var s=o.baseState,c=0,f=null,d=null,p=null;if(null!==u)for(var h=u;;){if((l=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=m,f=s):p=p.next=m,l>c&&(c=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),ou(l,h.suspenseConfig);e:{var v=e,g=h;switch(l=t,m=n,g.tag){case 1:if("function"==typeof(v=g.payload)){s=v.call(m,s,l);break e}s=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(l="function"==typeof(v=g.payload)?v.call(m,s,l):v))break e;s=i({},s,l);break e;case 2:io=!0}}null!==h.callback&&(e.effectTag|=32,null===(l=o.effects)?o.effects=[h]:l.push(h))}if(null===(h=h.next)||h===u){if(null===(l=o.shared.pending))break;h=a.next=l.next,l.next=u,o.baseQueue=a=l,o.shared.pending=null}}null===p?f=s:p.next=d,o.baseState=f,o.baseQueue=p,au(c),e.expirationTime=c,e.memoizedState=s}}function fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var po=K.ReactCurrentBatchConfig,ho=(new r.Component).refs;function mo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Yl(),i=po.suspense;(i=lo(r=ql(r,e,i),i)).payload=t,null!=n&&(i.callback=n),uo(e,i),Ql(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Yl(),i=po.suspense;(i=lo(r=ql(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),uo(e,i),Ql(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Yl(),r=po.suspense;(r=lo(n=ql(n,e,r),r)).tag=2,null!=t&&(r.callback=t),uo(e,r),Ql(e,n)}};function go(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Ur(n,r)||!Ur(i,o))}function yo(e,t,n){var r=!1,i=ci,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(i=mi(t)?pi:fi.current,o=(r=null!=(r=t.contextTypes))?hi(e,i):ci),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function bo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vo.enqueueReplaceState(t,t.state,null)}function wo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=ho,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=ro(o):(o=mi(t)?pi:fi.current,i.context=hi(e,o)),co(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(mo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&vo.enqueueReplaceState(i,i.state,null),co(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var xo=Array.isArray;function Ao(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===ho&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Eo(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Co(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Su(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Mu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Ao(e,t,n),r.return=e,r):((r=_u(n.type,n.key,n.props,null,e.mode,r)).ref=Ao(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Pu(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Tu(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Mu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=_u(t.type,t.key,t.props,null,e.mode,n)).ref=Ao(e,null,t),n.return=e,n;case te:return(t=Pu(t,e.mode,n)).return=e,t}if(xo(t)||me(t))return(t=Tu(t,e.mode,n,null)).return=e,t;Eo(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):s(e,t,n,r):null;case te:return n.key===i?c(e,t,n,r):null}if(xo(n)||me(n))return null!==i?null:f(e,t,n,r,null);Eo(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):s(t,e,r,i);case te:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(xo(r)||me(r))return f(t,e=e.get(n)||null,r,i,null);Eo(t,r)}return null}function m(i,a,l,u){for(var s=null,c=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(i,f,l[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(i,f),a=o(g,a,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===l.length)return n(i,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(i,l[m],u))&&(a=o(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(i,f);m<l.length;m++)null!==(v=h(f,i,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=o(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(i,e)})),s}function v(i,l,u,s){var c=me(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=l,v=l=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(i,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(i,m),l=o(b,l,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(i,m),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(i,y.value,s))&&(l=o(y,l,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(i,m);!y.done;v++,y=u.next())null!==(y=h(m,i,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=o(y,l,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(i,e)})),c}return function(e,r,o,u){var s="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;s&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case ee:e:{for(c=o.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(o.type===ne){n(e,s.sibling),(r=i(s,o.props.children)).return=e,e=r;break e}break;default:if(s.elementType===o.type){n(e,s.sibling),(r=i(s,o.props)).ref=Ao(e,s,o),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}o.type===ne?((r=Tu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=_u(o.type,o.key,o.props,null,e.mode,u)).ref=Ao(e,r,o),u.return=e,e=u)}return l(e);case te:e:{for(s=o.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Pu(o,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Mu(o,e.mode,u)).return=e,e=r),l(e);if(xo(o))return m(e,r,o,u);if(me(o))return v(e,r,o,u);if(c&&Eo(e,o),void 0===o&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var ko=Co(!0),So=Co(!1),_o={},To={current:_o},Mo={current:_o},Po={current:_o};function No(e){if(e===_o)throw Error(a(174));return e}function Oo(e,t){switch(si(Po,t),si(Mo,e),si(To,_o),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:je(null,"");break;default:t=je(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ui(To),si(To,t)}function Ro(){ui(To),ui(Mo),ui(Po)}function Io(e){No(Po.current);var t=No(To.current),n=je(t,e.type);t!==n&&(si(Mo,e),si(To,n))}function Do(e){Mo.current===e&&(ui(To),ui(Mo))}var Lo={current:0};function jo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function zo(e,t){return{responder:e,props:t}}var Uo=K.ReactCurrentDispatcher,Bo=K.ReactCurrentBatchConfig,Fo=0,Ho=null,Wo=null,$o=null,Vo=!1;function Yo(){throw Error(a(321))}function qo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!jr(e[n],t[n]))return!1;return!0}function Qo(e,t,n,r,i,o){if(Fo=o,Ho=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Uo.current=null===e||null===e.memoizedState?ga:ya,e=n(r,i),t.expirationTime===Fo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(a(301));o+=1,$o=Wo=null,t.updateQueue=null,Uo.current=ba,e=n(r,i)}while(t.expirationTime===Fo)}if(Uo.current=va,t=null!==Wo&&null!==Wo.next,Fo=0,$o=Wo=Ho=null,Vo=!1,t)throw Error(a(300));return e}function Xo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===$o?Ho.memoizedState=$o=e:$o=$o.next=e,$o}function Ko(){if(null===Wo){var e=Ho.alternate;e=null!==e?e.memoizedState:null}else e=Wo.next;var t=null===$o?Ho.memoizedState:$o.next;if(null!==t)$o=t,Wo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Wo=e).memoizedState,baseState:Wo.baseState,baseQueue:Wo.baseQueue,queue:Wo.queue,next:null},null===$o?Ho.memoizedState=$o=e:$o=$o.next=e}return $o}function Zo(e,t){return"function"==typeof t?t(e):t}function Go(e){var t=Ko(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Wo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var l=i.next;i.next=o.next,o.next=l}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var u=l=o=null,s=i;do{var c=s.expirationTime;if(c<Fo){var f={expirationTime:s.expirationTime,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,o=r):u=u.next=f,c>Ho.expirationTime&&(Ho.expirationTime=c,au(c))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),ou(c,s.suspenseConfig),r=s.eagerReducer===e?s.eagerState:e(r,s.action);s=s.next}while(null!==s&&s!==i);null===u?o=r:u.next=l,jr(r,t.memoizedState)||(Pa=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Jo(e){var t=Ko(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var l=i=i.next;do{o=e(o,l.action),l=l.next}while(l!==i);jr(o,t.memoizedState)||(Pa=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ea(e){var t=Xo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Zo,lastRenderedState:e}).dispatch=ma.bind(null,Ho,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ho.updateQueue)?(t={lastEffect:null},Ho.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Ko().memoizedState}function ra(e,t,n,r){var i=Xo();Ho.effectTag|=e,i.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function ia(e,t,n,r){var i=Ko();r=void 0===r?null:r;var o=void 0;if(null!==Wo){var a=Wo.memoizedState;if(o=a.destroy,null!==r&&qo(r,a.deps))return void ta(t,n,o,r)}Ho.effectTag|=e,i.memoizedState=ta(1|t,n,o,r)}function oa(e,t){return ra(516,4,e,t)}function aa(e,t){return ia(516,4,e,t)}function la(e,t){return ia(4,2,e,t)}function ua(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function sa(e,t,n){return n=null!=n?n.concat([e]):null,ia(4,2,ua.bind(null,t,e),n)}function ca(){}function fa(e,t){return Xo().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Ko();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Ko();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ha(e,t,n){var r=Bi();Hi(98>r?98:r,(function(){e(!0)})),Hi(97<r?97:r,(function(){var r=Bo.suspense;Bo.suspense=void 0===t?null:t;try{e(!1),n()}finally{Bo.suspense=r}}))}function ma(e,t,n){var r=Yl(),i=po.suspense;i={expirationTime:r=ql(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Ho||null!==o&&o===Ho)Vo=!0,i.expirationTime=Fo,Ho.expirationTime=Fo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=o(a,n);if(i.eagerReducer=o,i.eagerState=l,jr(l,a))return}catch(e){}Ql(e,r)}}var va={readContext:ro,useCallback:Yo,useContext:Yo,useEffect:Yo,useImperativeHandle:Yo,useLayoutEffect:Yo,useMemo:Yo,useReducer:Yo,useRef:Yo,useState:Yo,useDebugValue:Yo,useResponder:Yo,useDeferredValue:Yo,useTransition:Yo},ga={readContext:ro,useCallback:fa,useContext:ro,useEffect:oa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,ua.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Xo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Xo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ma.bind(null,Ho,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Xo().memoizedState=e},useState:ea,useDebugValue:ca,useResponder:zo,useDeferredValue:function(e,t){var n=ea(e),r=n[0],i=n[1];return oa((function(){var n=Bo.suspense;Bo.suspense=void 0===t?null:t;try{i(e)}finally{Bo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},ya={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:la,useMemo:pa,useReducer:Go,useRef:na,useState:function(){return Go(Zo)},useDebugValue:ca,useResponder:zo,useDeferredValue:function(e,t){var n=Go(Zo),r=n[0],i=n[1];return aa((function(){var n=Bo.suspense;Bo.suspense=void 0===t?null:t;try{i(e)}finally{Bo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Go(Zo),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},ba={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:la,useMemo:pa,useReducer:Jo,useRef:na,useState:function(){return Jo(Zo)},useDebugValue:ca,useResponder:zo,useDeferredValue:function(e,t){var n=Jo(Zo),r=n[0],i=n[1];return aa((function(){var n=Bo.suspense;Bo.suspense=void 0===t?null:t;try{i(e)}finally{Bo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Jo(Zo),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},wa=null,xa=null,Aa=!1;function Ea(e,t){var n=Cu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ca(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ka(e){if(Aa){var t=xa;if(t){var n=t;if(!Ca(e,t)){if(!(t=xn(n.nextSibling))||!Ca(e,t))return e.effectTag=-1025&e.effectTag|2,Aa=!1,void(wa=e);Ea(wa,n)}wa=e,xa=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Aa=!1,wa=e}}function Sa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function _a(e){if(e!==wa)return!1;if(!Aa)return Sa(e),Aa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yn(t,e.memoizedProps))for(t=xa;t;)Ea(e,t),t=xn(t.nextSibling);if(Sa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xa=xn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}xa=null}}else xa=wa?xn(e.stateNode.nextSibling):null;return!0}function Ta(){xa=wa=null,Aa=!1}var Ma=K.ReactCurrentOwner,Pa=!1;function Na(e,t,n,r){t.child=null===e?So(t,null,n,r):ko(t,e.child,n,r)}function Oa(e,t,n,r,i){n=n.render;var o=t.ref;return no(t,i),r=Qo(e,t,n,r,o,i),null===e||Pa?(t.effectTag|=1,Na(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Qa(e,t,i))}function Ra(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||ku(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=_u(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ia(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Ur)(i,r)&&e.ref===t.ref)?Qa(e,t,o):(t.effectTag|=1,(e=Su(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ia(e,t,n,r,i,o){return null!==e&&Ur(e.memoizedProps,r)&&e.ref===t.ref&&(Pa=!1,i<o)?(t.expirationTime=e.expirationTime,Qa(e,t,o)):La(e,t,n,r,o)}function Da(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function La(e,t,n,r,i){var o=mi(n)?pi:fi.current;return o=hi(t,o),no(t,i),n=Qo(e,t,n,r,o,i),null===e||Pa?(t.effectTag|=1,Na(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Qa(e,t,i))}function ja(e,t,n,r,i){if(mi(n)){var o=!0;bi(t)}else o=!1;if(no(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yo(t,n,r),wo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=ro(s):s=hi(t,s=mi(n)?pi:fi.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&bo(t,a,r,s),io=!1;var d=t.memoizedState;a.state=d,co(t,r,a,i),u=t.memoizedState,l!==r||d!==u||di.current||io?("function"==typeof c&&(mo(t,n,c,r),u=t.memoizedState),(l=io||go(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ao(e,t),l=t.memoizedProps,a.props=t.type===t.elementType?l:Qi(t.type,l),u=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=ro(s):s=hi(t,s=mi(n)?pi:fi.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&bo(t,a,r,s),io=!1,u=t.memoizedState,a.state=u,co(t,r,a,i),d=t.memoizedState,l!==r||u!==d||di.current||io?("function"==typeof c&&(mo(t,n,c,r),d=t.memoizedState),(c=io||go(t,n,l,r,u,d,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return za(e,t,n,r,o,i)}function za(e,t,n,r,i,o){Da(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&wi(t,n,!1),Qa(e,t,o);r=t.stateNode,Ma.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=ko(t,e.child,null,o),t.child=ko(t,null,l,o)):Na(e,t,l,o),t.memoizedState=r.state,i&&wi(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?gi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&gi(0,t.context,!1),Oo(e,t.containerInfo)}var Ba,Fa,Ha,Wa={dehydrated:null,retryTime:0};function $a(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Lo.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),si(Lo,1&a),null===e){if(void 0!==o.fallback&&ka(t),l){if(l=o.fallback,(o=Tu(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Tu(l,i,n,null)).return=t,o.sibling=n,t.memoizedState=Wa,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=So(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,l){if(o=o.fallback,(n=Su(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(i=Su(i,o)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Wa,t.child=n,i}return n=ko(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=o.fallback,(o=Tu(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Tu(l,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Wa,t.child=o,n}return t.memoizedState=null,t.child=ko(t,e,o.children,n)}function Va(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function Ya(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function qa(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Na(e,t,r.children,n),0!=(2&(r=Lo.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Va(e,n);else if(19===e.tag)Va(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(si(Lo,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===jo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ya(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===jo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ya(t,!0,n,null,o,t.lastEffect);break;case"together":Ya(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Qa(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&au(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Su(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Su(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Xa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ka(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return mi(t.type)&&vi(),null;case 3:return Ro(),ui(di),ui(fi),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!_a(t)||(t.effectTag|=4),null;case 5:Do(t),n=No(Po.current);var o=t.type;if(null!==e&&null!=t.stateNode)Fa(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=No(To.current),_a(t)){r=t.stateNode,o=t.type;var l=t.memoizedProps;switch(r[Cn]=t,r[kn]=l,o){case"iframe":case"object":case"embed":qt("load",r);break;case"video":case"audio":for(e=0;e<Ke.length;e++)qt(Ke[e],r);break;case"source":qt("error",r);break;case"img":case"image":case"link":qt("error",r),qt("load",r);break;case"form":qt("reset",r),qt("submit",r);break;case"details":qt("toggle",r);break;case"input":Ee(r,l),qt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},qt("invalid",r),un(n,"onChange");break;case"textarea":Ne(r,l),qt("invalid",r),un(n,"onChange")}for(var u in on(o,l),e=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(e=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(e=["children",""+s]):C.hasOwnProperty(u)&&null!=s&&un(n,u)}switch(o){case"input":we(r),Se(r,l,!0);break;case"textarea":we(r),Re(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=sn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Le(o)),e===ln?"script"===o?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(o,{is:r.is}):(e=u.createElement(o),"select"===o&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,o),e[Cn]=t,e[kn]=r,Ba(e,t),t.stateNode=e,u=an(o,r),o){case"iframe":case"object":case"embed":qt("load",e),s=r;break;case"video":case"audio":for(s=0;s<Ke.length;s++)qt(Ke[s],e);s=r;break;case"source":qt("error",e),s=r;break;case"img":case"image":case"link":qt("error",e),qt("load",e),s=r;break;case"form":qt("reset",e),qt("submit",e),s=r;break;case"details":qt("toggle",e),s=r;break;case"input":Ee(e,r),s=Ae(e,r),qt("invalid",e),un(n,"onChange");break;case"option":s=Te(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},s=i({},r,{value:void 0}),qt("invalid",e),un(n,"onChange");break;case"textarea":Ne(e,r),s=Pe(e,r),qt("invalid",e),un(n,"onChange");break;default:s=r}on(o,s);var c=s;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&Ue(e,f):"children"===l?"string"==typeof f?("textarea"!==o||""!==f)&&Be(e,f):"number"==typeof f&&Be(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(C.hasOwnProperty(l)?null!=f&&un(n,l):null!=f&&Z(e,l,f,u))}switch(o){case"input":we(e),Se(e,r,!1);break;case"textarea":we(e),Re(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ye(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Me(e,!!r.multiple,n,!1):null!=r.defaultValue&&Me(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=sn)}gn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=No(Po.current),No(To.current),_a(t)?(n=t.stateNode,r=t.memoizedProps,n[Cn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Cn]=t,t.stateNode=n)}return null;case 13:return ui(Lo),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&_a(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=o,o.nextEffect=l):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Lo.current)?_l===wl&&(_l=xl):(_l!==wl&&_l!==xl||(_l=Al),0!==Ol&&null!==Cl&&(Ru(Cl,Sl),Iu(Cl,Ol)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ro(),null;case 10:return eo(t),null;case 17:return mi(t.type)&&vi(),null;case 19:if(ui(Lo),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(l=r.rendering)){if(o)Xa(r,!1);else if(_l!==wl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=jo(l))){for(t.effectTag|=64,Xa(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=l,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,l=e.dependencies,o.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return si(Lo,1&Lo.current|2),t.child}l=l.sibling}}else{if(!o)if(null!==(e=jo(l))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Xa(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ui()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Xa(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Ui()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ui(),n.sibling=null,t=Lo.current,si(Lo,o?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Za(e){switch(e.tag){case 1:mi(e.type)&&vi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ro(),ui(di),ui(fi),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Do(e),null;case 13:return ui(Lo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ui(Lo),null;case 4:return Ro(),null;case 10:return eo(e),null;default:return null}}function Ga(e,t){return{value:e,source:t,stack:ge(t)}}Ba=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Fa=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var l,u,s=t.stateNode;switch(No(To.current),e=null,n){case"input":a=Ae(s,a),r=Ae(s,r),e=[];break;case"option":a=Te(s,a),r=Te(s,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=Pe(s,a),r=Pe(s,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(s.onclick=sn)}for(l in on(n,r),n=null,a)if(!r.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(u in s=a[l])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(C.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(s=null!=a?a[l]:void 0,r.hasOwnProperty(l)&&c!==s&&(null!=c||null!=s))if("style"===l)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(l,c)):"children"===l?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(C.hasOwnProperty(l)?(null!=c&&un(o,l),e||s===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Ha=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Ja="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ge(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){yu(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function il(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ol(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void il(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Qi(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&gn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Lt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function al(e,t,n){switch("function"==typeof Au&&Au(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Hi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){yu(i,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){yu(e,t)}}(t,n);break;case 5:tl(t);break;case 4:cl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Be(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=sn));else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function cl(e,t,n){for(var r,i,o=t,l=!1;;){if(!l){l=o.return;e:for(;;){if(null===l)throw Error(a(160));switch(r=l.stateNode,l.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}l=l.return}l=!0}if(5===o.tag||6===o.tag){e:for(var u=e,s=o,c=n,f=s;;)if(al(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(u=r,s=o.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(al(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(l=!1)}o.sibling.return=o.return,o=o.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[kn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ce(n,r),an(e,i),t=an(e,r),i=0;i<o.length;i+=2){var l=o[i],u=o[i+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?Ue(n,u):"children"===l?Be(n,u):Z(n,l,u,t)}switch(e){case"input":ke(n,r);break;case"textarea":Oe(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Me(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Me(n,!!r.multiple,r.defaultValue,!0):Me(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Lt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Il=Ui()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=tn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(a(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ja),t.forEach((function(t){var r=wu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=lo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ll||(Ll=!0,jl=r),el(e,t)},n}function ml(e,t,n){(n=lo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return el(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zl?zl=new Set([this]):zl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vl,gl=Math.ceil,yl=K.ReactCurrentDispatcher,bl=K.ReactCurrentOwner,wl=0,xl=3,Al=4,El=0,Cl=null,kl=null,Sl=0,_l=wl,Tl=null,Ml=1073741823,Pl=1073741823,Nl=null,Ol=0,Rl=!1,Il=0,Dl=null,Ll=!1,jl=null,zl=null,Ul=!1,Bl=null,Fl=90,Hl=null,Wl=0,$l=null,Vl=0;function Yl(){return 0!=(48&El)?1073741821-(Ui()/10|0):0!==Vl?Vl:Vl=1073741821-(Ui()/10|0)}function ql(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Bi();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&El))return Sl;if(null!==n)e=qi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=qi(e,150,100);break;case 97:case 96:e=qi(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Cl&&e===Sl&&--e,e}function Ql(e,t){if(50<Wl)throw Wl=0,$l=null,Error(a(185));if(null!==(e=Xl(e,t))){var n=Bi();1073741823===t?0!=(8&El)&&0==(48&El)?Jl(e):(Zl(e),0===El&&Vi()):Zl(e),0==(4&El)||98!==n&&99!==n||(null===Hl?Hl=new Map([[e,t]]):(void 0===(n=Hl.get(e))||n>t)&&Hl.set(e,t))}}function Xl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Cl===i&&(au(t),_l===Al&&Ru(i,Sl)),Iu(i,t)),i}function Kl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Ou(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Zl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=$i(Jl.bind(null,e));else{var t=Kl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Yl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Oi&&Ei(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?$i(Jl.bind(null,e)):Wi(r,Gl.bind(null,e),{timeout:10*(1073741821-t)-Ui()}),e.callbackNode=t}}}function Gl(e,t){if(Vl=0,t)return Du(e,t=Yl()),Zl(e),null;var n=Kl(e);if(0!==n){if(t=e.callbackNode,0!=(48&El))throw Error(a(327));if(mu(),e===Cl&&n===Sl||nu(e,n),null!==kl){var r=El;El|=16;for(var i=iu();;)try{uu();break}catch(t){ru(e,t)}if(Ji(),El=r,yl.current=i,1===_l)throw t=Tl,nu(e,n),Ru(e,n),Zl(e),t;if(null===kl)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=_l,Cl=null,r){case wl:case 1:throw Error(a(345));case 2:Du(e,2<n?2:n);break;case xl:if(Ru(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(i)),1073741823===Ml&&10<(i=Il+500-Ui())){if(Rl){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(o=Kl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(du.bind(null,e),i);break}du(e);break;case Al:if(Ru(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(i)),Rl&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(i=Kl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Pl?r=10*(1073741821-Pl)-Ui():1073741823===Ml?r=0:(r=10*(1073741821-Ml)-5e3,0>(r=(i=Ui())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*gl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(du.bind(null,e),r);break}du(e);break;case 5:if(1073741823!==Ml&&null!==Nl){o=Ml;var l=Nl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(i=0|l.busyDelayMs,r=(o=Ui()-(10*(1073741821-o)-(0|l.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Ru(e,n),e.timeoutHandle=bn(du.bind(null,e),r);break}}du(e);break;default:throw Error(a(329))}if(Zl(e),e.callbackNode===t)return Gl.bind(null,e)}}return null}function Jl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&El))throw Error(a(327));if(mu(),e===Cl&&t===Sl||nu(e,t),null!==kl){var n=El;El|=16;for(var r=iu();;)try{lu();break}catch(t){ru(e,t)}if(Ji(),El=n,yl.current=r,1===_l)throw n=Tl,nu(e,t),Ru(e,t),Zl(e),n;if(null!==kl)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Cl=null,du(e),Zl(e)}return null}function eu(e,t){var n=El;El|=1;try{return e(t)}finally{0===(El=n)&&Vi()}}function tu(e,t){var n=El;El&=-2,El|=8;try{return e(t)}finally{0===(El=n)&&Vi()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==kl)for(n=kl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vi();break;case 3:Ro(),ui(di),ui(fi);break;case 5:Do(r);break;case 4:Ro();break;case 13:case 19:ui(Lo);break;case 10:eo(r)}n=n.return}Cl=e,kl=Su(e.current,null),Sl=t,_l=wl,Tl=null,Pl=Ml=1073741823,Nl=null,Ol=0,Rl=!1}function ru(e,t){for(;;){try{if(Ji(),Uo.current=va,Vo)for(var n=Ho.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Fo=0,$o=Wo=Ho=null,Vo=!1,null===kl||null===kl.return)return _l=1,Tl=t,kl=null;e:{var i=e,o=kl.return,a=kl,l=t;if(t=Sl,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&a.mode)){var s=a.alternate;s?(a.updateQueue=s.updateQueue,a.memoizedState=s.memoizedState,a.expirationTime=s.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var c=0!=(1&Lo.current),f=o;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!c)}}if(d){var m=f.updateQueue;if(null===m){var v=new Set;v.add(u),f.updateQueue=v}else m.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var g=lo(1073741823,null);g.tag=2,uo(a,g)}a.expirationTime=1073741823;break e}l=void 0,a=t;var y=i.pingCache;if(null===y?(y=i.pingCache=new pl,l=new Set,y.set(u,l)):void 0===(l=y.get(u))&&(l=new Set,y.set(u,l)),!l.has(a)){l.add(a);var b=bu.bind(null,i,u,a);u.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ve(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ge(a))}5!==_l&&(_l=2),l=Ga(l,a),f=o;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t,so(f,hl(f,u,t));break e;case 1:u=l;var w=f.type,x=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===zl||!zl.has(x)))){f.effectTag|=4096,f.expirationTime=t,so(f,ml(f,u,t));break e}}f=f.return}while(null!==f)}kl=cu(kl)}catch(e){t=e;continue}break}}function iu(){var e=yl.current;return yl.current=va,null===e?va:e}function ou(e,t){e<Ml&&2<e&&(Ml=e),null!==t&&e<Pl&&2<e&&(Pl=e,Nl=t)}function au(e){e>Ol&&(Ol=e)}function lu(){for(;null!==kl;)kl=su(kl)}function uu(){for(;null!==kl&&!Ri();)kl=su(kl)}function su(e){var t=vl(e.alternate,e,Sl);return e.memoizedProps=e.pendingProps,null===t&&(t=cu(e)),bl.current=null,t}function cu(e){kl=e;do{var t=kl.alternate;if(e=kl.return,0==(2048&kl.effectTag)){if(t=Ka(t,kl,Sl),1===Sl||1!==kl.childExpirationTime){for(var n=0,r=kl.child;null!==r;){var i=r.expirationTime,o=r.childExpirationTime;i>n&&(n=i),o>n&&(n=o),r=r.sibling}kl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=kl.firstEffect),null!==kl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=kl.firstEffect),e.lastEffect=kl.lastEffect),1<kl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=kl:e.firstEffect=kl,e.lastEffect=kl))}else{if(null!==(t=Za(kl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=kl.sibling))return t;kl=e}while(null!==kl);return _l===wl&&(_l=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function du(e){var t=Bi();return Hi(99,pu.bind(null,e,t)),null}function pu(e,t){do{mu()}while(null!==Bl);if(0!=(48&El))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=fu(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Cl&&(kl=Cl=null,Sl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=El;El|=32,bl.current=null,mn=Yt;var l=pn();if(hn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var s=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,h=-1,m=0,v=0,g=l,y=null;t:for(;;){for(var b;g!==u||0!==c&&3!==g.nodeType||(p=d+c),g!==f||0!==s&&3!==g.nodeType||(h=d+s),3===g.nodeType&&(d+=g.nodeValue.length),null!==(b=g.firstChild);)y=g,g=b;for(;;){if(g===l)break t;if(y===u&&++m===c&&(p=d),y===f&&++v===s&&(h=d),null!==(b=g.nextSibling))break;y=(g=y).parentNode}g=b}u=-1===p||-1===h?null:{start:p,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;vn={activeElementDetached:null,focusedElem:l,selectionRange:u},Yt=!1,Dl=i;do{try{hu()}catch(e){if(null===Dl)throw Error(a(330));yu(Dl,e),Dl=Dl.nextEffect}}while(null!==Dl);Dl=i;do{try{for(l=e,u=t;null!==Dl;){var w=Dl.effectTag;if(16&w&&Be(Dl.stateNode,""),128&w){var x=Dl.alternate;if(null!==x){var A=x.ref;null!==A&&("function"==typeof A?A(null):A.current=null)}}switch(1038&w){case 2:sl(Dl),Dl.effectTag&=-3;break;case 6:sl(Dl),Dl.effectTag&=-3,fl(Dl.alternate,Dl);break;case 1024:Dl.effectTag&=-1025;break;case 1028:Dl.effectTag&=-1025,fl(Dl.alternate,Dl);break;case 4:fl(Dl.alternate,Dl);break;case 8:cl(l,c=Dl,u),ll(c)}Dl=Dl.nextEffect}}catch(e){if(null===Dl)throw Error(a(330));yu(Dl,e),Dl=Dl.nextEffect}}while(null!==Dl);if(A=vn,x=pn(),w=A.focusedElem,u=A.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&hn(w)&&(x=u.start,void 0===(A=u.end)&&(A=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(A,w.value.length)):(A=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(A=A.getSelection(),c=w.textContent.length,l=Math.min(u.start,c),u=void 0===u.end?l:Math.min(u.end,c),!A.extend&&l>u&&(c=u,u=l,l=c),c=dn(w,l),f=dn(w,u),c&&f&&(1!==A.rangeCount||A.anchorNode!==c.node||A.anchorOffset!==c.offset||A.focusNode!==f.node||A.focusOffset!==f.offset)&&((x=x.createRange()).setStart(c.node,c.offset),A.removeAllRanges(),l>u?(A.addRange(x),A.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),A.addRange(x))))),x=[];for(A=w;A=A.parentNode;)1===A.nodeType&&x.push({element:A,left:A.scrollLeft,top:A.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(A=x[w]).element.scrollLeft=A.left,A.element.scrollTop=A.top}Yt=!!mn,vn=mn=null,e.current=n,Dl=i;do{try{for(w=e;null!==Dl;){var E=Dl.effectTag;if(36&E&&ol(w,Dl.alternate,Dl),128&E){x=void 0;var C=Dl.ref;if(null!==C){var k=Dl.stateNode;switch(Dl.tag){case 5:x=k;break;default:x=k}"function"==typeof C?C(x):C.current=x}}Dl=Dl.nextEffect}}catch(e){if(null===Dl)throw Error(a(330));yu(Dl,e),Dl=Dl.nextEffect}}while(null!==Dl);Dl=null,Ii(),El=o}else e.current=n;if(Ul)Ul=!1,Bl=e,Fl=t;else for(Dl=i;null!==Dl;)t=Dl.nextEffect,Dl.nextEffect=null,Dl=t;if(0===(t=e.firstPendingTime)&&(zl=null),1073741823===t?e===$l?Wl++:(Wl=0,$l=e):Wl=0,"function"==typeof xu&&xu(n.stateNode,r),Zl(e),Ll)throw Ll=!1,e=jl,jl=null,e;return 0!=(8&El)||Vi(),null}function hu(){for(;null!==Dl;){var e=Dl.effectTag;0!=(256&e)&&nl(Dl.alternate,Dl),0==(512&e)||Ul||(Ul=!0,Wi(97,(function(){return mu(),null}))),Dl=Dl.nextEffect}}function mu(){if(90!==Fl){var e=97<Fl?97:Fl;return Fl=90,Hi(e,vu)}}function vu(){if(null===Bl)return!1;var e=Bl;if(Bl=null,0!=(48&El))throw Error(a(331));var t=El;for(El|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),il(5,n)}}catch(t){if(null===e)throw Error(a(330));yu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return El=t,Vi(),!0}function gu(e,t,n){uo(e,t=hl(e,t=Ga(n,t),1073741823)),null!==(e=Xl(e,1073741823))&&Zl(e)}function yu(e,t){if(3===e.tag)gu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){gu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zl||!zl.has(r))){uo(n,e=ml(n,e=Ga(t,e),1073741823)),null!==(n=Xl(n,1073741823))&&Zl(n);break}}n=n.return}}function bu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Cl===e&&Sl===n?_l===Al||_l===xl&&1073741823===Ml&&Ui()-Il<500?nu(e,Sl):Rl=!0:Ou(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Zl(e)))}function wu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=ql(t=Yl(),e,null)),null!==(e=Xl(e,t))&&Zl(e)}vl=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||di.current)Pa=!0;else{if(r<n){switch(Pa=!1,t.tag){case 3:Ua(t),Ta();break;case 5:if(Io(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:mi(t.type)&&bi(t);break;case 4:Oo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,si(Xi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?$a(e,t,n):(si(Lo,1&Lo.current),null!==(t=Qa(e,t,n))?t.sibling:null);si(Lo,1&Lo.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return qa(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),si(Lo,Lo.current),!r)return null}return Qa(e,t,n)}Pa=!1}}else Pa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=hi(t,fi.current),no(t,n),i=Qo(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mi(r)){var o=!0;bi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,oo(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&mo(t,r,l,e),i.updater=vo,t.stateNode=i,i._reactInternalFiber=t,wo(t,r,e,n),t=za(null,t,r,!0,o,n)}else t.tag=0,Na(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return ku(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(i),e=Qi(i,e),o){case 0:t=La(null,t,i,e,n);break e;case 1:t=ja(null,t,i,e,n);break e;case 11:t=Oa(null,t,i,e,n);break e;case 14:t=Ra(null,t,i,Qi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,La(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 1:return r=t.type,i=t.pendingProps,ja(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 3:if(Ua(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,ao(e,t),co(t,r,null,n),(r=t.memoizedState.element)===i)Ta(),t=Qa(e,t,n);else{if((i=t.stateNode.hydrate)&&(xa=xn(t.stateNode.containerInfo.firstChild),wa=t,i=Aa=!0),i)for(n=So(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Na(e,t,r,n),Ta();t=t.child}return t;case 5:return Io(t),null===e&&ka(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,l=i.children,yn(r,i)?l=null:null!==o&&yn(r,o)&&(t.effectTag|=16),Da(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Na(e,t,l,n),t=t.child),t;case 6:return null===e&&ka(t),null;case 13:return $a(e,t,n);case 4:return Oo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ko(t,null,r,n):Na(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Oa(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 7:return Na(e,t,t.pendingProps,n),t.child;case 8:case 12:return Na(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,l=t.memoizedProps,o=i.value;var u=t.type._context;if(si(Xi,u._currentValue),u._currentValue=o,null!==l)if(u=l.value,0===(o=jr(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(l.children===i.children&&!di.current){t=Qa(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===u.tag&&((c=lo(n,null)).tag=2,uo(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),to(u.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Na(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(i=ro(i,o.unstable_observedBits)),t.effectTag|=1,Na(e,t,r,n),t.child;case 14:return o=Qi(i=t.type,t.pendingProps),Ra(e,t,i,o=Qi(i.type,o),r,n);case 15:return Ia(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Qi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,mi(r)?(e=!0,bi(t)):e=!1,no(t,n),yo(t,r,i),wo(t,r,i,n),za(null,t,r,!0,e,n);case 19:return qa(e,t,n)}throw Error(a(156,t.tag))};var xu=null,Au=null;function Eu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Cu(e,t,n,r){return new Eu(e,t,n,r)}function ku(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Su(e,t){var n=e.alternate;return null===n?((n=Cu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function _u(e,t,n,r,i,o){var l=2;if(r=e,"function"==typeof e)ku(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Tu(n.children,i,o,t);case le:l=8,i|=7;break;case re:l=8,i|=1;break;case ie:return(e=Cu(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=o,e;case se:return(e=Cu(13,n,t,i)).type=se,e.elementType=se,e.expirationTime=o,e;case ce:return(e=Cu(19,n,t,i)).elementType=ce,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:l=10;break e;case ae:l=9;break e;case ue:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Cu(l,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Tu(e,t,n,r){return(e=Cu(7,e,r,t)).expirationTime=n,e}function Mu(e,t,n){return(e=Cu(6,e,null,t)).expirationTime=n,e}function Pu(e,t,n){return(t=Cu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Nu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Ou(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Ru(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Iu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Du(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Lu(e,t,n,r){var i=t.current,o=Yl(),l=po.suspense;o=ql(o,i,l);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(mi(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(mi(s)){n=yi(n,s,u);break e}}n=u}else n=ci;return null===t.context?t.context=n:t.pendingContext=n,(t=lo(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),uo(i,t),Ql(i,o),o}function ju(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Uu(e,t){zu(e,t),(e=e.alternate)&&zu(e,t)}function Bu(e,t,n){var r=new Nu(e,t,n=null!=n&&!0===n.hydrate),i=Cu(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,oo(i),e[Sn]=r.current,n&&0!==t&&function(e,t){var n=Ge(t);St.forEach((function(e){ht(e,t,n)})),_t.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Fu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Hu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var l=i;i=function(){var e=ju(a);l.call(e)}}Lu(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Bu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var u=i;i=function(){var e=ju(a);u.call(e)}}tu((function(){Lu(t,a,e,i)}))}return ju(a)}function Wu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function $u(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Fu(t))throw Error(a(200));return Wu(e,t,null,n)}Bu.prototype.render=function(e){Lu(e,this._internalRoot,null,null)},Bu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Lu(null,e,null,(function(){t[Sn]=null}))},mt=function(e){if(13===e.tag){var t=qi(Yl(),150,100);Ql(e,t),Uu(e,t)}},vt=function(e){13===e.tag&&(Ql(e,3),Uu(e,3))},gt=function(e){if(13===e.tag){var t=Yl();Ql(e,t=ql(t,e,null)),Uu(e,t)}},T=function(e,t,n){switch(t){case"input":if(ke(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Pn(r);if(!i)throw Error(a(90));xe(r),ke(r,i)}}}break;case"textarea":Oe(e,n);break;case"select":null!=(t=n.value)&&Me(e,!!n.multiple,t,!1)}},I=eu,D=function(e,t,n,r,i){var o=El;El|=4;try{return Hi(98,e.bind(null,t,n,r,i))}finally{0===(El=o)&&Vi()}},L=function(){0==(49&El)&&(function(){if(null!==Hl){var e=Hl;Hl=null,e.forEach((function(e,t){Du(t,e),Zl(t)})),Vi()}}(),mu())},j=function(e,t){var n=El;El|=2;try{return e(t)}finally{0===(El=n)&&Vi()}};var Vu,Yu,qu={Events:[Tn,Mn,Pn,S,E,jn,function(e){it(e,Ln)},O,R,Zt,lt,mu,{current:!1}]};Yu=(Vu={findFiberByHostInstance:_n,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Au=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Vu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:K.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Yu?Yu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=qu,t.createPortal=$u,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&El))throw Error(a(187));var n=El;El|=1;try{return Hi(99,e.bind(null,t))}finally{El=n,Vi()}},t.hydrate=function(e,t,n){if(!Fu(t))throw Error(a(200));return Hu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Fu(t))throw Error(a(200));return Hu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Fu(e))throw Error(a(40));return!!e._reactRootContainer&&(tu((function(){Hu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Sn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return $u(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Fu(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Hu(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(99)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(c,0))},i=function(e,t){s=setTimeout(e,t)},o=function(){clearTimeout(s)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var g=p.now();t.unstable_now=function(){return p.now()-g}}var y=!1,b=null,w=-1,x=5,A=0;a=function(){return t.unstable_now()>=A},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,C=E.port2;E.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();A=e+x;try{b(!0,e)?C.postMessage(null):(y=!1,b=null)}catch(e){throw C.postMessage(null),e}}else y=!1},r=function(e){b=e,y||(y=!0,C.postMessage(null))},i=function(e,n){w=h((function(){e(t.unstable_now())}),n)},o=function(){m(w),w=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<T(i,t)))break e;e[r]=t,e[n]=i,n=r}}function S(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],l=o+1,u=e[l];if(void 0!==a&&0>T(a,n))void 0!==u&&0>T(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==u&&0>T(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function T(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var M=[],P=[],N=1,O=null,R=3,I=!1,D=!1,L=!1;function j(e){for(var t=S(P);null!==t;){if(null===t.callback)_(P);else{if(!(t.startTime<=e))break;_(P),t.sortIndex=t.expirationTime,k(M,t)}t=S(P)}}function z(e){if(L=!1,j(e),!D)if(null!==S(M))D=!0,r(U);else{var t=S(P);null!==t&&i(z,t.startTime-e)}}function U(e,n){D=!1,L&&(L=!1,o()),I=!0;var r=R;try{for(j(n),O=S(M);null!==O&&(!(O.expirationTime>n)||e&&!a());){var l=O.callback;if(null!==l){O.callback=null,R=O.priorityLevel;var u=l(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?O.callback=u:O===S(M)&&_(M),j(n)}else _(M);O=S(M)}if(null!==O)var s=!0;else{var c=S(P);null!==c&&i(z,c.startTime-n),s=!1}return s}finally{O=null,R=r,I=!1}}function B(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var F=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){D||I||(D=!0,r(U))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return S(M)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=F,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"==typeof a&&null!==a){var u=a.delay;u="number"==typeof u&&0<u?l+u:l,a="number"==typeof a.timeout?a.timeout:B(e)}else a=B(e),u=l;return e={id:N++,callback:n,priorityLevel:e,startTime:u,expirationTime:a=u+a,sortIndex:-1},u>l?(e.sortIndex=u,k(P,e),null===S(M)&&e===S(P)&&(L?o():L=!0,i(z,u-l))):(e.sortIndex=a,k(M,e),D||I||(D=!0,r(U))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();j(e);var n=S(M);return n!==O&&null!==O&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<O.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(102);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(8),i=n(21);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var l=i.locals;e.hot.accept(21,(function(){"string"==typeof(i=(i=n(21)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(l,i.locals)?(l=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){var r=n(8),i=n(22);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var l=i.locals;e.hot.accept(22,(function(){"string"==typeof(i=(i=n(22)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(l,i.locals)?(l=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){var r=n(8),i=n(23);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var l=i.locals;e.hot.accept(23,(function(){"string"==typeof(i=(i=n(23)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(l,i.locals)?(l=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){var r=n(8),i=n(24);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var l=i.locals;e.hot.accept(24,(function(){"string"==typeof(i=(i=n(24)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(l,i.locals)?(l=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t,n){var r=n(8),i=n(25);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},a=r(i,o);if(!i.locals||e.hot.invalidate){var l=i.locals;e.hot.accept(25,(function(){"string"==typeof(i=(i=n(25)).__esModule?i.default:i)&&(i=[[e.i,i,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(l,i.locals)?(l=i.locals,a(i)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=i.locals||{}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(110)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function A(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case a:case u:case l:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case g:case v:case s:return e;default:return t}}case o:return t}}}function E(e){return A(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=o,t.Profiler=u,t.StrictMode=l,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||A(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return A(e)===c},t.isContextProvider=function(e){return A(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return A(e)===p},t.isFragment=function(e){return A(e)===a},t.isLazy=function(e){return A(e)===g},t.isMemo=function(e){return A(e)===v},t.isPortal=function(e){return A(e)===o},t.isProfiler=function(e){return A(e)===u},t.isStrictMode=function(e){return A(e)===l},t.isSuspense=function(e){return A(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===l||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===x||e.$$typeof===y)},t.typeOf=A},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=(r=n(0))&&"object"==typeof r&&"default"in r?r.default:r;function o(e){return o.warnAboutHMRDisabled&&(o.warnAboutHMRDisabled=!0,console.error("React-Hot-Loader: misconfiguration detected, using production version in non-production environment."),console.error("React-Hot-Loader: Hot Module Replacement is not enabled.")),i.Children.only(e.children)}o.warnAboutHMRDisabled=!1;var a=function e(){return e.shouldWrapWithAppContainer?function(e){return function(t){return i.createElement(o,null,i.createElement(e,t))}}:function(e){return e}};a.shouldWrapWithAppContainer=!1;t.AppContainer=o,t.hot=a,t.areComponentsEqual=function(e,t){return e===t},t.setConfig=function(){},t.cold=function(e){return e},t.configureComponent=function(){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,